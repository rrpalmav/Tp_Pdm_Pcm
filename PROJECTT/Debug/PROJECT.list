
PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000720c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f60  080073bc  080073bc  000083bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800831c  0800831c  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  0800831c  0800831c  0000931c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008324  08008324  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008324  08008324  00009324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008328  08008328  00009328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800832c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a064  2**0
                  CONTENTS
 10 .bss          00000e80  20000064  20000064  0000a064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ee4  20000ee4  0000a064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a83a  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031b5  00000000  00000000  000248ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  00027a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012f4  00000000  00000000  00029290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027413  00000000  00000000  0002a584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d2c1  00000000  00000000  00051997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ede80  00000000  00000000  0006ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015cad8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e34  00000000  00000000  0015cb1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00163950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080073a4 	.word	0x080073a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	080073a4 	.word	0x080073a4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f002 f967 	bl	8002868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f83f 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 faad 	bl	8000afc <MX_GPIO_Init>
  MX_ETH_Init();
 80005a2:	f000 f8a7 	bl	80006f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005a6:	f000 fa51 	bl	8000a4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005aa:	f000 fa79 	bl	8000aa0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80005ae:	f000 f8ef 	bl	8000790 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005b2:	f000 f92d 	bl	8000810 <MX_I2C2_Init>
  MX_SPI1_Init();
 80005b6:	f000 f9c5 	bl	8000944 <MX_SPI1_Init>
  MX_TIM2_Init();
 80005ba:	f000 f9f9 	bl	80009b0 <MX_TIM2_Init>
  MX_RTC_Init();
 80005be:	f000 f967 	bl	8000890 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80005c2:	f001 fe8b 	bl	80022dc <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char snum[5];

  SSD1306_GotoXY (0,0);
 80005c6:	2100      	movs	r1, #0
 80005c8:	2000      	movs	r0, #0
 80005ca:	f001 fff1 	bl	80025b0 <SSD1306_GotoXY>
  SSD1306_Puts ("CARGANDO..", &Font_11x18, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	490f      	ldr	r1, [pc, #60]	@ (8000610 <main+0x80>)
 80005d2:	4810      	ldr	r0, [pc, #64]	@ (8000614 <main+0x84>)
 80005d4:	f002 f880 	bl	80026d8 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80005d8:	f001 ff44 	bl	8002464 <SSD1306_UpdateScreen>
  HAL_Delay(3000);
 80005dc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005e0:	f002 f9b4 	bl	800294c <HAL_Delay>
  SSD1306_Clear();
 80005e4:	f002 f89d 	bl	8002722 <SSD1306_Clear>

  presentarHora();
 80005e8:	f000 fbbc 	bl	8000d64 <presentarHora>
  while (1)
  {
	  presentarHora();
 80005ec:	f000 fbba 	bl	8000d64 <presentarHora>
	  key = readKeyMPrincipal();
 80005f0:	f000 fc12 	bl	8000e18 <readKeyMPrincipal>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <main+0x88>)
 80005fa:	701a      	strb	r2, [r3, #0]
	  if(key == 'A' ){
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <main+0x88>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b41      	cmp	r3, #65	@ 0x41
 8000602:	d1f3      	bne.n	80005ec <main+0x5c>
		  SSD1306_Clear();
 8000604:	f002 f88d 	bl	8002722 <SSD1306_Clear>
		  menuOpciones();
 8000608:	f001 fa88 	bl	8001b1c <menuOpciones>
	  presentarHora();
 800060c:	e7ee      	b.n	80005ec <main+0x5c>
 800060e:	bf00      	nop
 8000610:	20000004 	.word	0x20000004
 8000614:	080073bc 	.word	0x080073bc
 8000618:	20000095 	.word	0x20000095

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	@ 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f006 fa26 	bl	8006a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a28      	ldr	r2, [pc, #160]	@ (80006ec <SystemClock_Config+0xd0>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b26      	ldr	r3, [pc, #152]	@ (80006ec <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a22      	ldr	r2, [pc, #136]	@ (80006f0 <SystemClock_Config+0xd4>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000678:	2309      	movs	r3, #9
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000682:	2301      	movs	r3, #1
 8000684:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000694:	23a8      	movs	r3, #168	@ 0xa8
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069c:	2307      	movs	r3, #7
 800069e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 feb7 	bl	8004418 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b0:	f001 faac 	bl	8001c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2105      	movs	r1, #5
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 f918 	bl	8004908 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006de:	f001 fa95 	bl	8001c0c <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <MX_ETH_Init+0x84>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <MX_ETH_Init+0x88>)
 80006fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <MX_ETH_Init+0x8c>)
 800070c:	22e1      	movs	r2, #225	@ 0xe1
 800070e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_ETH_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_ETH_Init+0x84>)
 8000724:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000726:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_ETH_Init+0x84>)
 800072a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800072e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_ETH_Init+0x84>)
 8000732:	4a14      	ldr	r2, [pc, #80]	@ (8000784 <MX_ETH_Init+0x90>)
 8000734:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_ETH_Init+0x84>)
 8000738:	4a13      	ldr	r2, [pc, #76]	@ (8000788 <MX_ETH_Init+0x94>)
 800073a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_ETH_Init+0x84>)
 800073e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000742:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <MX_ETH_Init+0x84>)
 8000746:	f002 fa0b 	bl	8002b60 <HAL_ETH_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000750:	f001 fa5c 	bl	8001c0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000754:	2238      	movs	r2, #56	@ 0x38
 8000756:	2100      	movs	r1, #0
 8000758:	480c      	ldr	r0, [pc, #48]	@ (800078c <MX_ETH_Init+0x98>)
 800075a:	f006 f98f 	bl	8006a7c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_ETH_Init+0x98>)
 8000760:	2221      	movs	r2, #33	@ 0x21
 8000762:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_ETH_Init+0x98>)
 8000766:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800076a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <MX_ETH_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000210 	.word	0x20000210
 800077c:	40028000 	.word	0x40028000
 8000780:	20000984 	.word	0x20000984
 8000784:	20000170 	.word	0x20000170
 8000788:	200000d0 	.word	0x200000d0
 800078c:	20000098 	.word	0x20000098

08000790 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <MX_I2C1_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	@ (8000808 <MX_I2C1_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_I2C1_Init+0x74>)
 800079c:	4a1b      	ldr	r2, [pc, #108]	@ (800080c <MX_I2C1_Init+0x7c>)
 800079e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a6:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c0:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007cc:	480d      	ldr	r0, [pc, #52]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007ce:	f002 fecd 	bl	800356c <HAL_I2C_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d8:	f001 fa18 	bl	8001c0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4809      	ldr	r0, [pc, #36]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007e0:	f003 fc8f 	bl	8004102 <HAL_I2CEx_ConfigAnalogFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007ea:	f001 fa0f 	bl	8001c0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007f2:	f003 fcc2 	bl	800417a <HAL_I2CEx_ConfigDigitalFilter>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007fc:	f001 fa06 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200002c0 	.word	0x200002c0
 8000808:	40005400 	.word	0x40005400
 800080c:	00061a80 	.word	0x00061a80

08000810 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000814:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	@ (8000888 <MX_I2C2_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_I2C2_Init+0x74>)
 800081c:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <MX_I2C2_Init+0x7c>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082c:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <MX_I2C2_Init+0x74>)
 800082e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000832:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_I2C2_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000840:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800084c:	480d      	ldr	r0, [pc, #52]	@ (8000884 <MX_I2C2_Init+0x74>)
 800084e:	f002 fe8d 	bl	800356c <HAL_I2C_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000858:	f001 f9d8 	bl	8001c0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085c:	2100      	movs	r1, #0
 800085e:	4809      	ldr	r0, [pc, #36]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000860:	f003 fc4f 	bl	8004102 <HAL_I2CEx_ConfigAnalogFilter>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800086a:	f001 f9cf 	bl	8001c0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800086e:	2100      	movs	r1, #0
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000872:	f003 fc82 	bl	800417a <HAL_I2CEx_ConfigDigitalFilter>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800087c:	f001 f9c6 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000314 	.word	0x20000314
 8000888:	40005800 	.word	0x40005800
 800088c:	000186a0 	.word	0x000186a0

08000890 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008a8:	4b24      	ldr	r3, [pc, #144]	@ (800093c <MX_RTC_Init+0xac>)
 80008aa:	4a25      	ldr	r2, [pc, #148]	@ (8000940 <MX_RTC_Init+0xb0>)
 80008ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008ae:	4b23      	ldr	r3, [pc, #140]	@ (800093c <MX_RTC_Init+0xac>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008b4:	4b21      	ldr	r3, [pc, #132]	@ (800093c <MX_RTC_Init+0xac>)
 80008b6:	227f      	movs	r2, #127	@ 0x7f
 80008b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ba:	4b20      	ldr	r3, [pc, #128]	@ (800093c <MX_RTC_Init+0xac>)
 80008bc:	22ff      	movs	r2, #255	@ 0xff
 80008be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008c0:	4b1e      	ldr	r3, [pc, #120]	@ (800093c <MX_RTC_Init+0xac>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <MX_RTC_Init+0xac>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_RTC_Init+0xac>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008d2:	481a      	ldr	r0, [pc, #104]	@ (800093c <MX_RTC_Init+0xac>)
 80008d4:	f004 fbf8 	bl	80050c8 <HAL_RTC_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80008de:	f001 f995 	bl	8001c0c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80008e2:	230d      	movs	r3, #13
 80008e4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 50;
 80008e6:	2332      	movs	r3, #50	@ 0x32
 80008e8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	4619      	mov	r1, r3
 80008fc:	480f      	ldr	r0, [pc, #60]	@ (800093c <MX_RTC_Init+0xac>)
 80008fe:	f004 fc66 	bl	80051ce <HAL_RTC_SetTime>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000908:	f001 f980 	bl	8001c0c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800090c:	2302      	movs	r3, #2
 800090e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8000910:	2302      	movs	r3, #2
 8000912:	707b      	strb	r3, [r7, #1]
  sDate.Date = 14;
 8000914:	230e      	movs	r3, #14
 8000916:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 23;
 8000918:	2317      	movs	r3, #23
 800091a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	4619      	mov	r1, r3
 8000922:	4806      	ldr	r0, [pc, #24]	@ (800093c <MX_RTC_Init+0xac>)
 8000924:	f004 fd4b 	bl	80053be <HAL_RTC_SetDate>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800092e:	f001 f96d 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000368 	.word	0x20000368
 8000940:	40002800 	.word	0x40002800

08000944 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800094a:	4a18      	ldr	r2, [pc, #96]	@ (80009ac <MX_SPI1_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000950:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000964:	2202      	movs	r2, #2
 8000966:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800096a:	2201      	movs	r2, #1
 800096c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000974:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000978:	2220      	movs	r2, #32
 800097a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000990:	220a      	movs	r2, #10
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000996:	f004 fea3 	bl	80056e0 <HAL_SPI_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009a0:	f001 f934 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000388 	.word	0x20000388
 80009ac:	40013000 	.word	0x40013000

080009b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <MX_TIM2_Init+0x98>)
 80009ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_TIM2_Init+0x98>)
 80009d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_TIM2_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <MX_TIM2_Init+0x98>)
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295
 80009e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <MX_TIM2_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <MX_TIM2_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f6:	4814      	ldr	r0, [pc, #80]	@ (8000a48 <MX_TIM2_Init+0x98>)
 80009f8:	f004 fefb 	bl	80057f2 <HAL_TIM_Base_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a02:	f001 f903 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	4619      	mov	r1, r3
 8000a12:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <MX_TIM2_Init+0x98>)
 8000a14:	f004 ff3c 	bl	8005890 <HAL_TIM_ConfigClockSource>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a1e:	f001 f8f5 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4806      	ldr	r0, [pc, #24]	@ (8000a48 <MX_TIM2_Init+0x98>)
 8000a30:	f005 f93c 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a3a:	f001 f8e7 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200003e0 	.word	0x200003e0

08000a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	@ (8000a9c <MX_USART3_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a84:	f005 f98e 	bl	8005da4 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f001 f8bd 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000428 	.word	0x20000428
 8000a9c:	40004800 	.word	0x40004800

08000aa0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000aaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae4:	f003 fb88 	bl	80041f8 <HAL_PCD_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aee:	f001 f88d 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000470 	.word	0x20000470

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	@ 0x38
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
 8000b16:	4b8c      	ldr	r3, [pc, #560]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a8b      	ldr	r2, [pc, #556]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b89      	ldr	r3, [pc, #548]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	623b      	str	r3, [r7, #32]
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	4b85      	ldr	r3, [pc, #532]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a84      	ldr	r2, [pc, #528]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b38:	f043 0320 	orr.w	r3, r3, #32
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b82      	ldr	r3, [pc, #520]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0320 	and.w	r3, r3, #32
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	4b7e      	ldr	r3, [pc, #504]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a7d      	ldr	r2, [pc, #500]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b7b      	ldr	r3, [pc, #492]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	4b77      	ldr	r3, [pc, #476]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a76      	ldr	r2, [pc, #472]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b74      	ldr	r3, [pc, #464]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b70      	ldr	r3, [pc, #448]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a6f      	ldr	r2, [pc, #444]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b6d      	ldr	r3, [pc, #436]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b69      	ldr	r3, [pc, #420]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a68      	ldr	r2, [pc, #416]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000ba8:	f043 0310 	orr.w	r3, r3, #16
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b66      	ldr	r3, [pc, #408]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0310 	and.w	r3, r3, #16
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b62      	ldr	r3, [pc, #392]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a61      	ldr	r2, [pc, #388]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b5f      	ldr	r3, [pc, #380]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b5b      	ldr	r3, [pc, #364]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a5a      	ldr	r2, [pc, #360]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b58      	ldr	r3, [pc, #352]	@ (8000d48 <MX_GPIO_Init+0x24c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2110      	movs	r1, #16
 8000bf6:	4855      	ldr	r0, [pc, #340]	@ (8000d4c <MX_GPIO_Init+0x250>)
 8000bf8:	f002 fc9e 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c02:	4853      	ldr	r0, [pc, #332]	@ (8000d50 <MX_GPIO_Init+0x254>)
 8000c04:	f002 fc98 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D7_Pin|D4_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000c0e:	4851      	ldr	r0, [pc, #324]	@ (8000d54 <MX_GPIO_Init+0x258>)
 8000c10:	f002 fc92 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, D6_Pin|D5_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8000c1a:	484f      	ldr	r0, [pc, #316]	@ (8000d58 <MX_GPIO_Init+0x25c>)
 8000c1c:	f002 fc8c 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2140      	movs	r1, #64	@ 0x40
 8000c24:	484d      	ldr	r0, [pc, #308]	@ (8000d5c <MX_GPIO_Init+0x260>)
 8000c26:	f002 fc87 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4847      	ldr	r0, [pc, #284]	@ (8000d60 <MX_GPIO_Init+0x264>)
 8000c42:	f002 fab5 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000c46:	2310      	movs	r3, #16
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	483b      	ldr	r0, [pc, #236]	@ (8000d4c <MX_GPIO_Init+0x250>)
 8000c5e:	f002 faa7 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c62:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4835      	ldr	r0, [pc, #212]	@ (8000d50 <MX_GPIO_Init+0x254>)
 8000c7c:	f002 fa98 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D4_Pin;
 8000c80:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	482e      	ldr	r0, [pc, #184]	@ (8000d54 <MX_GPIO_Init+0x258>)
 8000c9a:	f002 fa89 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_Pin */
  GPIO_InitStruct.Pin = D2_Pin;
 8000c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4828      	ldr	r0, [pc, #160]	@ (8000d54 <MX_GPIO_Init+0x258>)
 8000cb4:	f002 fa7c 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin;
 8000cb8:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4821      	ldr	r0, [pc, #132]	@ (8000d58 <MX_GPIO_Init+0x25c>)
 8000cd2:	f002 fa6d 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3_Pin */
  GPIO_InitStruct.Pin = D3_Pin;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	481b      	ldr	r0, [pc, #108]	@ (8000d58 <MX_GPIO_Init+0x25c>)
 8000cec:	f002 fa60 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cf0:	2340      	movs	r3, #64	@ 0x40
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	4815      	ldr	r0, [pc, #84]	@ (8000d5c <MX_GPIO_Init+0x260>)
 8000d08:	f002 fa52 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d0c:	2380      	movs	r3, #128	@ 0x80
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480f      	ldr	r0, [pc, #60]	@ (8000d5c <MX_GPIO_Init+0x260>)
 8000d20:	f002 fa46 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin;
 8000d24:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4808      	ldr	r0, [pc, #32]	@ (8000d5c <MX_GPIO_Init+0x260>)
 8000d3a:	f002 fa39 	bl	80031b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d3e:	bf00      	nop
 8000d40:	3738      	adds	r7, #56	@ 0x38
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40020400 	.word	0x40020400
 8000d54:	40021400 	.word	0x40021400
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40021800 	.word	0x40021800
 8000d60:	40020800 	.word	0x40020800

08000d64 <presentarHora>:
		ITM_SendChar(*ptr++);
	}
	return len;
}

void presentarHora(void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af02      	add	r7, sp, #8
	SSD1306_GotoXY (0,0);
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f001 fc1f 	bl	80025b0 <SSD1306_GotoXY>
	SSD1306_Puts ("Hora, Fecha", &Font_11x18, 1);
 8000d72:	2201      	movs	r2, #1
 8000d74:	4920      	ldr	r1, [pc, #128]	@ (8000df8 <presentarHora+0x94>)
 8000d76:	4821      	ldr	r0, [pc, #132]	@ (8000dfc <presentarHora+0x98>)
 8000d78:	f001 fcae 	bl	80026d8 <SSD1306_Puts>
	HAL_RTC_GetTime(&hrtc, &sTime,  RTC_FORMAT_BIN);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4920      	ldr	r1, [pc, #128]	@ (8000e00 <presentarHora+0x9c>)
 8000d80:	4820      	ldr	r0, [pc, #128]	@ (8000e04 <presentarHora+0xa0>)
 8000d82:	f004 fabe 	bl	8005302 <HAL_RTC_GetTime>
    sprintf(firstTime, " %02d-%02d-%02d  ", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000d86:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <presentarHora+0x9c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <presentarHora+0x9c>)
 8000d8e:	785b      	ldrb	r3, [r3, #1]
 8000d90:	4619      	mov	r1, r3
 8000d92:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <presentarHora+0x9c>)
 8000d94:	789b      	ldrb	r3, [r3, #2]
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	491b      	ldr	r1, [pc, #108]	@ (8000e08 <presentarHora+0xa4>)
 8000d9c:	481b      	ldr	r0, [pc, #108]	@ (8000e0c <presentarHora+0xa8>)
 8000d9e:	f005 fe4d 	bl	8006a3c <siprintf>
	SSD1306_GotoXY (0,25);
 8000da2:	2119      	movs	r1, #25
 8000da4:	2000      	movs	r0, #0
 8000da6:	f001 fc03 	bl	80025b0 <SSD1306_GotoXY>
	SSD1306_Puts (firstTime, &Font_11x18, 1);
 8000daa:	2201      	movs	r2, #1
 8000dac:	4912      	ldr	r1, [pc, #72]	@ (8000df8 <presentarHora+0x94>)
 8000dae:	4817      	ldr	r0, [pc, #92]	@ (8000e0c <presentarHora+0xa8>)
 8000db0:	f001 fc92 	bl	80026d8 <SSD1306_Puts>

	HAL_RTC_GetDate(&hrtc, &dateToUpdate, RTC_FORMAT_BIN);
 8000db4:	2200      	movs	r2, #0
 8000db6:	4916      	ldr	r1, [pc, #88]	@ (8000e10 <presentarHora+0xac>)
 8000db8:	4812      	ldr	r0, [pc, #72]	@ (8000e04 <presentarHora+0xa0>)
 8000dba:	f004 fb84 	bl	80054c6 <HAL_RTC_GetDate>
	sprintf(date, " %02d-%02d-%02d  ", dateToUpdate.Date, dateToUpdate.Month, dateToUpdate.Year);
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <presentarHora+0xac>)
 8000dc0:	789b      	ldrb	r3, [r3, #2]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <presentarHora+0xac>)
 8000dc6:	785b      	ldrb	r3, [r3, #1]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <presentarHora+0xac>)
 8000dcc:	78db      	ldrb	r3, [r3, #3]
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	490d      	ldr	r1, [pc, #52]	@ (8000e08 <presentarHora+0xa4>)
 8000dd4:	480f      	ldr	r0, [pc, #60]	@ (8000e14 <presentarHora+0xb0>)
 8000dd6:	f005 fe31 	bl	8006a3c <siprintf>
	SSD1306_GotoXY (0,45);
 8000dda:	212d      	movs	r1, #45	@ 0x2d
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f001 fbe7 	bl	80025b0 <SSD1306_GotoXY>
	SSD1306_Puts (date, &Font_11x18, 1);
 8000de2:	2201      	movs	r2, #1
 8000de4:	4904      	ldr	r1, [pc, #16]	@ (8000df8 <presentarHora+0x94>)
 8000de6:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <presentarHora+0xb0>)
 8000de8:	f001 fc76 	bl	80026d8 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000dec:	f001 fb3a 	bl	8002464 <SSD1306_UpdateScreen>
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	080073c8 	.word	0x080073c8
 8000e00:	20000954 	.word	0x20000954
 8000e04:	20000368 	.word	0x20000368
 8000e08:	080073d4 	.word	0x080073d4
 8000e0c:	20000080 	.word	0x20000080
 8000e10:	20000968 	.word	0x20000968
 8000e14:	2000008c 	.word	0x2000008c

08000e18 <readKeyMPrincipal>:


char readKeyMPrincipal(void){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e22:	4821      	ldr	r0, [pc, #132]	@ (8000ea8 <readKeyMPrincipal+0x90>)
 8000e24:	f002 fb88 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e2e:	481f      	ldr	r0, [pc, #124]	@ (8000eac <readKeyMPrincipal+0x94>)
 8000e30:	f002 fb82 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e3a:	481c      	ldr	r0, [pc, #112]	@ (8000eac <readKeyMPrincipal+0x94>)
 8000e3c:	f002 fb7c 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e46:	4818      	ldr	r0, [pc, #96]	@ (8000ea8 <readKeyMPrincipal+0x90>)
 8000e48:	f002 fb76 	bl	8003538 <HAL_GPIO_WritePin>

	if(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin)){
 8000e4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e50:	4817      	ldr	r0, [pc, #92]	@ (8000eb0 <readKeyMPrincipal+0x98>)
 8000e52:	f002 fb59 	bl	8003508 <HAL_GPIO_ReadPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10a      	bne.n	8000e72 <readKeyMPrincipal+0x5a>

		while(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin));
 8000e5c:	bf00      	nop
 8000e5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e62:	4813      	ldr	r0, [pc, #76]	@ (8000eb0 <readKeyMPrincipal+0x98>)
 8000e64:	f002 fb50 	bl	8003508 <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f7      	beq.n	8000e5e <readKeyMPrincipal+0x46>
		return 'A';
 8000e6e:	2341      	movs	r3, #65	@ 0x41
 8000e70:	e018      	b.n	8000ea4 <readKeyMPrincipal+0x8c>
	}
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e78:	480b      	ldr	r0, [pc, #44]	@ (8000ea8 <readKeyMPrincipal+0x90>)
 8000e7a:	f002 fb5d 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e84:	4809      	ldr	r0, [pc, #36]	@ (8000eac <readKeyMPrincipal+0x94>)
 8000e86:	f002 fb57 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e90:	4806      	ldr	r0, [pc, #24]	@ (8000eac <readKeyMPrincipal+0x94>)
 8000e92:	f002 fb51 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <readKeyMPrincipal+0x90>)
 8000e9e:	f002 fb4b 	bl	8003538 <HAL_GPIO_WritePin>
	return ' ';
 8000ea2:	2320      	movs	r3, #32
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021400 	.word	0x40021400
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40021800 	.word	0x40021800

08000eb4 <keyMenuOpciones>:

char keyMenuOpciones(){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ebe:	484c      	ldr	r0, [pc, #304]	@ (8000ff0 <keyMenuOpciones+0x13c>)
 8000ec0:	f002 fb3a 	bl	8003538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eca:	484a      	ldr	r0, [pc, #296]	@ (8000ff4 <keyMenuOpciones+0x140>)
 8000ecc:	f002 fb34 	bl	8003538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ed6:	4847      	ldr	r0, [pc, #284]	@ (8000ff4 <keyMenuOpciones+0x140>)
 8000ed8:	f002 fb2e 	bl	8003538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ee2:	4843      	ldr	r0, [pc, #268]	@ (8000ff0 <keyMenuOpciones+0x13c>)
 8000ee4:	f002 fb28 	bl	8003538 <HAL_GPIO_WritePin>

		if(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin)){
 8000ee8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eec:	4842      	ldr	r0, [pc, #264]	@ (8000ff8 <keyMenuOpciones+0x144>)
 8000eee:	f002 fb0b 	bl	8003508 <HAL_GPIO_ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10a      	bne.n	8000f0e <keyMenuOpciones+0x5a>

			while(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin));
 8000ef8:	bf00      	nop
 8000efa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000efe:	483e      	ldr	r0, [pc, #248]	@ (8000ff8 <keyMenuOpciones+0x144>)
 8000f00:	f002 fb02 	bl	8003508 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f7      	beq.n	8000efa <keyMenuOpciones+0x46>
			return 'A';
 8000f0a:	2341      	movs	r3, #65	@ 0x41
 8000f0c:	e06d      	b.n	8000fea <keyMenuOpciones+0x136>
		}

		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f14:	4836      	ldr	r0, [pc, #216]	@ (8000ff0 <keyMenuOpciones+0x13c>)
 8000f16:	f002 fb0f 	bl	8003538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f20:	4834      	ldr	r0, [pc, #208]	@ (8000ff4 <keyMenuOpciones+0x140>)
 8000f22:	f002 fb09 	bl	8003538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f2c:	4831      	ldr	r0, [pc, #196]	@ (8000ff4 <keyMenuOpciones+0x140>)
 8000f2e:	f002 fb03 	bl	8003538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f38:	482d      	ldr	r0, [pc, #180]	@ (8000ff0 <keyMenuOpciones+0x13c>)
 8000f3a:	f002 fafd 	bl	8003538 <HAL_GPIO_WritePin>

		if(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin)){
 8000f3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f42:	482d      	ldr	r0, [pc, #180]	@ (8000ff8 <keyMenuOpciones+0x144>)
 8000f44:	f002 fae0 	bl	8003508 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10a      	bne.n	8000f64 <keyMenuOpciones+0xb0>

			while(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin));
 8000f4e:	bf00      	nop
 8000f50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f54:	4828      	ldr	r0, [pc, #160]	@ (8000ff8 <keyMenuOpciones+0x144>)
 8000f56:	f002 fad7 	bl	8003508 <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f7      	beq.n	8000f50 <keyMenuOpciones+0x9c>
			return 'B';
 8000f60:	2342      	movs	r3, #66	@ 0x42
 8000f62:	e042      	b.n	8000fea <keyMenuOpciones+0x136>
		}


		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6a:	4821      	ldr	r0, [pc, #132]	@ (8000ff0 <keyMenuOpciones+0x13c>)
 8000f6c:	f002 fae4 	bl	8003538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f76:	481f      	ldr	r0, [pc, #124]	@ (8000ff4 <keyMenuOpciones+0x140>)
 8000f78:	f002 fade 	bl	8003538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f82:	481c      	ldr	r0, [pc, #112]	@ (8000ff4 <keyMenuOpciones+0x140>)
 8000f84:	f002 fad8 	bl	8003538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f8e:	4818      	ldr	r0, [pc, #96]	@ (8000ff0 <keyMenuOpciones+0x13c>)
 8000f90:	f002 fad2 	bl	8003538 <HAL_GPIO_WritePin>

		if(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin)){
 8000f94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f98:	4817      	ldr	r0, [pc, #92]	@ (8000ff8 <keyMenuOpciones+0x144>)
 8000f9a:	f002 fab5 	bl	8003508 <HAL_GPIO_ReadPin>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d10a      	bne.n	8000fba <keyMenuOpciones+0x106>

			while(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin));
 8000fa4:	bf00      	nop
 8000fa6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000faa:	4813      	ldr	r0, [pc, #76]	@ (8000ff8 <keyMenuOpciones+0x144>)
 8000fac:	f002 faac 	bl	8003508 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f7      	beq.n	8000fa6 <keyMenuOpciones+0xf2>
			return 'D';
 8000fb6:	2344      	movs	r3, #68	@ 0x44
 8000fb8:	e017      	b.n	8000fea <keyMenuOpciones+0x136>
		}

		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc0:	480b      	ldr	r0, [pc, #44]	@ (8000ff0 <keyMenuOpciones+0x13c>)
 8000fc2:	f002 fab9 	bl	8003538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fcc:	4809      	ldr	r0, [pc, #36]	@ (8000ff4 <keyMenuOpciones+0x140>)
 8000fce:	f002 fab3 	bl	8003538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fd8:	4806      	ldr	r0, [pc, #24]	@ (8000ff4 <keyMenuOpciones+0x140>)
 8000fda:	f002 faad 	bl	8003538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <keyMenuOpciones+0x13c>)
 8000fe6:	f002 faa7 	bl	8003538 <HAL_GPIO_WritePin>
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40021400 	.word	0x40021400
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40021800 	.word	0x40021800

08000ffc <detectNumPad>:

char detectNumPad(void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001006:	48bd      	ldr	r0, [pc, #756]	@ (80012fc <detectNumPad+0x300>)
 8001008:	f002 fa96 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001012:	48bb      	ldr	r0, [pc, #748]	@ (8001300 <detectNumPad+0x304>)
 8001014:	f002 fa90 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800101e:	48b8      	ldr	r0, [pc, #736]	@ (8001300 <detectNumPad+0x304>)
 8001020:	f002 fa8a 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800102a:	48b4      	ldr	r0, [pc, #720]	@ (80012fc <detectNumPad+0x300>)
 800102c:	f002 fa84 	bl	8003538 <HAL_GPIO_WritePin>

	if(!HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin) ){
 8001030:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001034:	48b2      	ldr	r0, [pc, #712]	@ (8001300 <detectNumPad+0x304>)
 8001036:	f002 fa67 	bl	8003508 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10a      	bne.n	8001056 <detectNumPad+0x5a>

		while(!HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin));
 8001040:	bf00      	nop
 8001042:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001046:	48ae      	ldr	r0, [pc, #696]	@ (8001300 <detectNumPad+0x304>)
 8001048:	f002 fa5e 	bl	8003508 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f7      	beq.n	8001042 <detectNumPad+0x46>
		return '1';
 8001052:	2331      	movs	r3, #49	@ 0x31
 8001054:	e183      	b.n	800135e <detectNumPad+0x362>
	}
	if(!HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin)){
 8001056:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800105a:	48a8      	ldr	r0, [pc, #672]	@ (80012fc <detectNumPad+0x300>)
 800105c:	f002 fa54 	bl	8003508 <HAL_GPIO_ReadPin>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10a      	bne.n	800107c <detectNumPad+0x80>

		while(!HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin));
 8001066:	bf00      	nop
 8001068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800106c:	48a3      	ldr	r0, [pc, #652]	@ (80012fc <detectNumPad+0x300>)
 800106e:	f002 fa4b 	bl	8003508 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f7      	beq.n	8001068 <detectNumPad+0x6c>
		return '2';
 8001078:	2332      	movs	r3, #50	@ 0x32
 800107a:	e170      	b.n	800135e <detectNumPad+0x362>
	}
	if(!HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin)){
 800107c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001080:	48a0      	ldr	r0, [pc, #640]	@ (8001304 <detectNumPad+0x308>)
 8001082:	f002 fa41 	bl	8003508 <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10a      	bne.n	80010a2 <detectNumPad+0xa6>

		while(!HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin));
 800108c:	bf00      	nop
 800108e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001092:	489c      	ldr	r0, [pc, #624]	@ (8001304 <detectNumPad+0x308>)
 8001094:	f002 fa38 	bl	8003508 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f7      	beq.n	800108e <detectNumPad+0x92>
		return '3';
 800109e:	2333      	movs	r3, #51	@ 0x33
 80010a0:	e15d      	b.n	800135e <detectNumPad+0x362>
	}
	if(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin)){
 80010a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010a6:	4897      	ldr	r0, [pc, #604]	@ (8001304 <detectNumPad+0x308>)
 80010a8:	f002 fa2e 	bl	8003508 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10a      	bne.n	80010c8 <detectNumPad+0xcc>

		while(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin));
 80010b2:	bf00      	nop
 80010b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b8:	4892      	ldr	r0, [pc, #584]	@ (8001304 <detectNumPad+0x308>)
 80010ba:	f002 fa25 	bl	8003508 <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f7      	beq.n	80010b4 <detectNumPad+0xb8>
		return 'A';
 80010c4:	2341      	movs	r3, #65	@ 0x41
 80010c6:	e14a      	b.n	800135e <detectNumPad+0x362>
	}

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ce:	488b      	ldr	r0, [pc, #556]	@ (80012fc <detectNumPad+0x300>)
 80010d0:	f002 fa32 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010da:	4889      	ldr	r0, [pc, #548]	@ (8001300 <detectNumPad+0x304>)
 80010dc:	f002 fa2c 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010e6:	4886      	ldr	r0, [pc, #536]	@ (8001300 <detectNumPad+0x304>)
 80010e8:	f002 fa26 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010f2:	4882      	ldr	r0, [pc, #520]	@ (80012fc <detectNumPad+0x300>)
 80010f4:	f002 fa20 	bl	8003538 <HAL_GPIO_WritePin>

	if(!HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin)){
 80010f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010fc:	4880      	ldr	r0, [pc, #512]	@ (8001300 <detectNumPad+0x304>)
 80010fe:	f002 fa03 	bl	8003508 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10a      	bne.n	800111e <detectNumPad+0x122>

		while(!HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin));
 8001108:	bf00      	nop
 800110a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110e:	487c      	ldr	r0, [pc, #496]	@ (8001300 <detectNumPad+0x304>)
 8001110:	f002 f9fa 	bl	8003508 <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f7      	beq.n	800110a <detectNumPad+0x10e>
		return '4';
 800111a:	2334      	movs	r3, #52	@ 0x34
 800111c:	e11f      	b.n	800135e <detectNumPad+0x362>
	}
	if(!HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin)){
 800111e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001122:	4876      	ldr	r0, [pc, #472]	@ (80012fc <detectNumPad+0x300>)
 8001124:	f002 f9f0 	bl	8003508 <HAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10a      	bne.n	8001144 <detectNumPad+0x148>

		while(!HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin));
 800112e:	bf00      	nop
 8001130:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001134:	4871      	ldr	r0, [pc, #452]	@ (80012fc <detectNumPad+0x300>)
 8001136:	f002 f9e7 	bl	8003508 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f7      	beq.n	8001130 <detectNumPad+0x134>
		return '5';
 8001140:	2335      	movs	r3, #53	@ 0x35
 8001142:	e10c      	b.n	800135e <detectNumPad+0x362>
	}
	if(!HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin)){
 8001144:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001148:	486e      	ldr	r0, [pc, #440]	@ (8001304 <detectNumPad+0x308>)
 800114a:	f002 f9dd 	bl	8003508 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10a      	bne.n	800116a <detectNumPad+0x16e>

		while(!HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin));
 8001154:	bf00      	nop
 8001156:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800115a:	486a      	ldr	r0, [pc, #424]	@ (8001304 <detectNumPad+0x308>)
 800115c:	f002 f9d4 	bl	8003508 <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f7      	beq.n	8001156 <detectNumPad+0x15a>
		return '6';
 8001166:	2336      	movs	r3, #54	@ 0x36
 8001168:	e0f9      	b.n	800135e <detectNumPad+0x362>
	}
	if(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin)){
 800116a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800116e:	4865      	ldr	r0, [pc, #404]	@ (8001304 <detectNumPad+0x308>)
 8001170:	f002 f9ca 	bl	8003508 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10a      	bne.n	8001190 <detectNumPad+0x194>

		while(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin));
 800117a:	bf00      	nop
 800117c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001180:	4860      	ldr	r0, [pc, #384]	@ (8001304 <detectNumPad+0x308>)
 8001182:	f002 f9c1 	bl	8003508 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f7      	beq.n	800117c <detectNumPad+0x180>
		return 'B';
 800118c:	2342      	movs	r3, #66	@ 0x42
 800118e:	e0e6      	b.n	800135e <detectNumPad+0x362>
	}

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001196:	4859      	ldr	r0, [pc, #356]	@ (80012fc <detectNumPad+0x300>)
 8001198:	f002 f9ce 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011a2:	4857      	ldr	r0, [pc, #348]	@ (8001300 <detectNumPad+0x304>)
 80011a4:	f002 f9c8 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011ae:	4854      	ldr	r0, [pc, #336]	@ (8001300 <detectNumPad+0x304>)
 80011b0:	f002 f9c2 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ba:	4850      	ldr	r0, [pc, #320]	@ (80012fc <detectNumPad+0x300>)
 80011bc:	f002 f9bc 	bl	8003538 <HAL_GPIO_WritePin>

	if(!HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin)){
 80011c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011c4:	484e      	ldr	r0, [pc, #312]	@ (8001300 <detectNumPad+0x304>)
 80011c6:	f002 f99f 	bl	8003508 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10a      	bne.n	80011e6 <detectNumPad+0x1ea>

		while(!HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin));
 80011d0:	bf00      	nop
 80011d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011d6:	484a      	ldr	r0, [pc, #296]	@ (8001300 <detectNumPad+0x304>)
 80011d8:	f002 f996 	bl	8003508 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f7      	beq.n	80011d2 <detectNumPad+0x1d6>
		return '7';
 80011e2:	2337      	movs	r3, #55	@ 0x37
 80011e4:	e0bb      	b.n	800135e <detectNumPad+0x362>
	}
	if(!HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin)){
 80011e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ea:	4844      	ldr	r0, [pc, #272]	@ (80012fc <detectNumPad+0x300>)
 80011ec:	f002 f98c 	bl	8003508 <HAL_GPIO_ReadPin>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10a      	bne.n	800120c <detectNumPad+0x210>

		while(!HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin));
 80011f6:	bf00      	nop
 80011f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011fc:	483f      	ldr	r0, [pc, #252]	@ (80012fc <detectNumPad+0x300>)
 80011fe:	f002 f983 	bl	8003508 <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f7      	beq.n	80011f8 <detectNumPad+0x1fc>
		return '8';
 8001208:	2338      	movs	r3, #56	@ 0x38
 800120a:	e0a8      	b.n	800135e <detectNumPad+0x362>
	}
	if(!HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin)){
 800120c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001210:	483c      	ldr	r0, [pc, #240]	@ (8001304 <detectNumPad+0x308>)
 8001212:	f002 f979 	bl	8003508 <HAL_GPIO_ReadPin>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10a      	bne.n	8001232 <detectNumPad+0x236>

		while(!HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin));
 800121c:	bf00      	nop
 800121e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001222:	4838      	ldr	r0, [pc, #224]	@ (8001304 <detectNumPad+0x308>)
 8001224:	f002 f970 	bl	8003508 <HAL_GPIO_ReadPin>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f7      	beq.n	800121e <detectNumPad+0x222>
		return '9';
 800122e:	2339      	movs	r3, #57	@ 0x39
 8001230:	e095      	b.n	800135e <detectNumPad+0x362>
	}
	if(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin)){
 8001232:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001236:	4833      	ldr	r0, [pc, #204]	@ (8001304 <detectNumPad+0x308>)
 8001238:	f002 f966 	bl	8003508 <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10a      	bne.n	8001258 <detectNumPad+0x25c>

		while(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin));
 8001242:	bf00      	nop
 8001244:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001248:	482e      	ldr	r0, [pc, #184]	@ (8001304 <detectNumPad+0x308>)
 800124a:	f002 f95d 	bl	8003508 <HAL_GPIO_ReadPin>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f7      	beq.n	8001244 <detectNumPad+0x248>
		return 'C';
 8001254:	2343      	movs	r3, #67	@ 0x43
 8001256:	e082      	b.n	800135e <detectNumPad+0x362>
	}

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800125e:	4827      	ldr	r0, [pc, #156]	@ (80012fc <detectNumPad+0x300>)
 8001260:	f002 f96a 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800126a:	4825      	ldr	r0, [pc, #148]	@ (8001300 <detectNumPad+0x304>)
 800126c:	f002 f964 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001276:	4822      	ldr	r0, [pc, #136]	@ (8001300 <detectNumPad+0x304>)
 8001278:	f002 f95e 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001282:	481e      	ldr	r0, [pc, #120]	@ (80012fc <detectNumPad+0x300>)
 8001284:	f002 f958 	bl	8003538 <HAL_GPIO_WritePin>

	if(!HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin)){
 8001288:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800128c:	481c      	ldr	r0, [pc, #112]	@ (8001300 <detectNumPad+0x304>)
 800128e:	f002 f93b 	bl	8003508 <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10a      	bne.n	80012ae <detectNumPad+0x2b2>

		while(!HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin));
 8001298:	bf00      	nop
 800129a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129e:	4818      	ldr	r0, [pc, #96]	@ (8001300 <detectNumPad+0x304>)
 80012a0:	f002 f932 	bl	8003508 <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f7      	beq.n	800129a <detectNumPad+0x29e>
		return '*';
 80012aa:	232a      	movs	r3, #42	@ 0x2a
 80012ac:	e057      	b.n	800135e <detectNumPad+0x362>
	}
	if(!HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin)){
 80012ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012b2:	4812      	ldr	r0, [pc, #72]	@ (80012fc <detectNumPad+0x300>)
 80012b4:	f002 f928 	bl	8003508 <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10a      	bne.n	80012d4 <detectNumPad+0x2d8>

		while(!HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin));
 80012be:	bf00      	nop
 80012c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012c4:	480d      	ldr	r0, [pc, #52]	@ (80012fc <detectNumPad+0x300>)
 80012c6:	f002 f91f 	bl	8003508 <HAL_GPIO_ReadPin>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f7      	beq.n	80012c0 <detectNumPad+0x2c4>
		return '0';
 80012d0:	2330      	movs	r3, #48	@ 0x30
 80012d2:	e044      	b.n	800135e <detectNumPad+0x362>
	}
	if(!HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin)){
 80012d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012d8:	480a      	ldr	r0, [pc, #40]	@ (8001304 <detectNumPad+0x308>)
 80012da:	f002 f915 	bl	8003508 <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d111      	bne.n	8001308 <detectNumPad+0x30c>

		while(!HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin));
 80012e4:	bf00      	nop
 80012e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ea:	4806      	ldr	r0, [pc, #24]	@ (8001304 <detectNumPad+0x308>)
 80012ec:	f002 f90c 	bl	8003508 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f7      	beq.n	80012e6 <detectNumPad+0x2ea>
		return '#';
 80012f6:	2323      	movs	r3, #35	@ 0x23
 80012f8:	e031      	b.n	800135e <detectNumPad+0x362>
 80012fa:	bf00      	nop
 80012fc:	40021400 	.word	0x40021400
 8001300:	40021000 	.word	0x40021000
 8001304:	40021800 	.word	0x40021800
	}
	if(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin)){
 8001308:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800130c:	4815      	ldr	r0, [pc, #84]	@ (8001364 <detectNumPad+0x368>)
 800130e:	f002 f8fb 	bl	8003508 <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10a      	bne.n	800132e <detectNumPad+0x332>

		while(!HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin));
 8001318:	bf00      	nop
 800131a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800131e:	4811      	ldr	r0, [pc, #68]	@ (8001364 <detectNumPad+0x368>)
 8001320:	f002 f8f2 	bl	8003508 <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f7      	beq.n	800131a <detectNumPad+0x31e>
		return 'D';
 800132a:	2344      	movs	r3, #68	@ 0x44
 800132c:	e017      	b.n	800135e <detectNumPad+0x362>
	}

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <detectNumPad+0x36c>)
 8001336:	f002 f8ff 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001340:	480a      	ldr	r0, [pc, #40]	@ (800136c <detectNumPad+0x370>)
 8001342:	f002 f8f9 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800134c:	4807      	ldr	r0, [pc, #28]	@ (800136c <detectNumPad+0x370>)
 800134e:	f002 f8f3 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001358:	4803      	ldr	r0, [pc, #12]	@ (8001368 <detectNumPad+0x36c>)
 800135a:	f002 f8ed 	bl	8003538 <HAL_GPIO_WritePin>

}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021800 	.word	0x40021800
 8001368:	40021400 	.word	0x40021400
 800136c:	40021000 	.word	0x40021000

08001370 <calculadora>:
	SSD1306_Puts (date, &Font_11x18, 1);
	SSD1306_UpdateScreen();
}


void calculadora(){
 8001370:	b580      	push	{r7, lr}
 8001372:	b09a      	sub	sp, #104	@ 0x68
 8001374:	af00      	add	r7, sp, #0
	int salida = 1;
 8001376:	2301      	movs	r3, #1
 8001378:	667b      	str	r3, [r7, #100]	@ 0x64
	int opcion = 1;
 800137a:	2301      	movs	r3, #1
 800137c:	65bb      	str	r3, [r7, #88]	@ 0x58
	char contenido[11] = "0";
 800137e:	2330      	movs	r3, #48	@ 0x30
 8001380:	643b      	str	r3, [r7, #64]	@ 0x40
 8001382:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	f8c3 2003 	str.w	r2, [r3, #3]
	char resultado[11] = "0";
 800138e:	2330      	movs	r3, #48	@ 0x30
 8001390:	637b      	str	r3, [r7, #52]	@ 0x34
 8001392:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	f8c3 2003 	str.w	r2, [r3, #3]
	char value[11];
	char salidaUart[40] = "";
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2224      	movs	r2, #36	@ 0x24
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f005 fb67 	bl	8006a7c <memset>
	char key;
	int inicial = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	663b      	str	r3, [r7, #96]	@ 0x60
	int tamano = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	657b      	str	r3, [r7, #84]	@ 0x54
	int valor1 = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	653b      	str	r3, [r7, #80]	@ 0x50
	int valor2 = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int operacionAritmetica = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	//SSD1306_GotoXY (0,25);
	//SSD1306_GotoXY (0,45);
	SSD1306_Clear();
 80013c2:	f001 f9ae 	bl	8002722 <SSD1306_Clear>
	while(salida){
 80013c6:	e1e6      	b.n	8001796 <calculadora+0x426>
		SSD1306_GotoXY (0,0);
 80013c8:	2100      	movs	r1, #0
 80013ca:	2000      	movs	r0, #0
 80013cc:	f001 f8f0 	bl	80025b0 <SSD1306_GotoXY>
		SSD1306_Puts ("Calculadora", &Font_11x18, 1);
 80013d0:	2201      	movs	r2, #1
 80013d2:	49c6      	ldr	r1, [pc, #792]	@ (80016ec <calculadora+0x37c>)
 80013d4:	48c6      	ldr	r0, [pc, #792]	@ (80016f0 <calculadora+0x380>)
 80013d6:	f001 f97f 	bl	80026d8 <SSD1306_Puts>
		SSD1306_GotoXY (0,45);
 80013da:	212d      	movs	r1, #45	@ 0x2d
 80013dc:	2000      	movs	r0, #0
 80013de:	f001 f8e7 	bl	80025b0 <SSD1306_GotoXY>
		sprintf(value, "%11s", contenido);
 80013e2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80013e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ea:	49c2      	ldr	r1, [pc, #776]	@ (80016f4 <calculadora+0x384>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f005 fb25 	bl	8006a3c <siprintf>
		SSD1306_Puts ( value, &Font_11x18, 1);
 80013f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013f6:	2201      	movs	r2, #1
 80013f8:	49bc      	ldr	r1, [pc, #752]	@ (80016ec <calculadora+0x37c>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 f96c 	bl	80026d8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001400:	f001 f830 	bl	8002464 <SSD1306_UpdateScreen>

		key = detectNumPad();
 8001404:	f7ff fdfa 	bl	8000ffc <detectNumPad>
 8001408:	4603      	mov	r3, r0
 800140a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		switch(key){
 800140e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001412:	3b23      	subs	r3, #35	@ 0x23
 8001414:	2b21      	cmp	r3, #33	@ 0x21
 8001416:	f200 81bb 	bhi.w	8001790 <calculadora+0x420>
 800141a:	a201      	add	r2, pc, #4	@ (adr r2, 8001420 <calculadora+0xb0>)
 800141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001420:	08001657 	.word	0x08001657
 8001424:	08001791 	.word	0x08001791
 8001428:	08001791 	.word	0x08001791
 800142c:	08001791 	.word	0x08001791
 8001430:	08001791 	.word	0x08001791
 8001434:	08001791 	.word	0x08001791
 8001438:	08001791 	.word	0x08001791
 800143c:	08001787 	.word	0x08001787
 8001440:	08001791 	.word	0x08001791
 8001444:	08001791 	.word	0x08001791
 8001448:	08001791 	.word	0x08001791
 800144c:	08001791 	.word	0x08001791
 8001450:	08001791 	.word	0x08001791
 8001454:	080014fd 	.word	0x080014fd
 8001458:	080014a9 	.word	0x080014a9
 800145c:	080014a9 	.word	0x080014a9
 8001460:	080014a9 	.word	0x080014a9
 8001464:	080014a9 	.word	0x080014a9
 8001468:	080014a9 	.word	0x080014a9
 800146c:	080014a9 	.word	0x080014a9
 8001470:	080014a9 	.word	0x080014a9
 8001474:	080014a9 	.word	0x080014a9
 8001478:	080014a9 	.word	0x080014a9
 800147c:	08001791 	.word	0x08001791
 8001480:	08001791 	.word	0x08001791
 8001484:	08001791 	.word	0x08001791
 8001488:	08001791 	.word	0x08001791
 800148c:	08001791 	.word	0x08001791
 8001490:	08001791 	.word	0x08001791
 8001494:	08001791 	.word	0x08001791
 8001498:	0800154f 	.word	0x0800154f
 800149c:	08001591 	.word	0x08001591
 80014a0:	080015d3 	.word	0x080015d3
 80014a4:	08001615 	.word	0x08001615
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				if(inicial == 0){
 80014a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10a      	bne.n	80014c4 <calculadora+0x154>
					sprintf(contenido,"%c",key);
 80014ae:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80014b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014b6:	4990      	ldr	r1, [pc, #576]	@ (80016f8 <calculadora+0x388>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f005 fabf 	bl	8006a3c <siprintf>
					inicial = 1;
 80014be:	2301      	movs	r3, #1
 80014c0:	663b      	str	r3, [r7, #96]	@ 0x60
				else{
					tamano = strlen(contenido);
					if(tamano > 10)  strncpy(contenido, contenido, 10);
					sprintf(contenido, "%s%c", contenido, key);
				}
				break;
 80014c2:	e168      	b.n	8001796 <calculadora+0x426>
					tamano = strlen(contenido);
 80014c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe fe91 	bl	80001f0 <strlen>
 80014ce:	4603      	mov	r3, r0
 80014d0:	657b      	str	r3, [r7, #84]	@ 0x54
					if(tamano > 10)  strncpy(contenido, contenido, 10);
 80014d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014d4:	2b0a      	cmp	r3, #10
 80014d6:	dd07      	ble.n	80014e8 <calculadora+0x178>
 80014d8:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80014dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014e0:	220a      	movs	r2, #10
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 fad2 	bl	8006a8c <strncpy>
					sprintf(contenido, "%s%c", contenido, key);
 80014e8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80014ec:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80014f0:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80014f4:	4981      	ldr	r1, [pc, #516]	@ (80016fc <calculadora+0x38c>)
 80014f6:	f005 faa1 	bl	8006a3c <siprintf>
				break;
 80014fa:	e14c      	b.n	8001796 <calculadora+0x426>
			case '0':
				if(inicial == 0){
 80014fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <calculadora+0x1a6>
					sprintf(contenido,"%c",'0');
 8001502:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001506:	2230      	movs	r2, #48	@ 0x30
 8001508:	497b      	ldr	r1, [pc, #492]	@ (80016f8 <calculadora+0x388>)
 800150a:	4618      	mov	r0, r3
 800150c:	f005 fa96 	bl	8006a3c <siprintf>
					inicial = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	663b      	str	r3, [r7, #96]	@ 0x60
				else{
					tamano = strlen(contenido);
					if(tamano > 10)  strncpy(contenido, contenido, 10);
					sprintf(contenido, "%s%c", contenido, key);
				}
				break;
 8001514:	e13f      	b.n	8001796 <calculadora+0x426>
					tamano = strlen(contenido);
 8001516:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe fe68 	bl	80001f0 <strlen>
 8001520:	4603      	mov	r3, r0
 8001522:	657b      	str	r3, [r7, #84]	@ 0x54
					if(tamano > 10)  strncpy(contenido, contenido, 10);
 8001524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001526:	2b0a      	cmp	r3, #10
 8001528:	dd07      	ble.n	800153a <calculadora+0x1ca>
 800152a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800152e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001532:	220a      	movs	r2, #10
 8001534:	4618      	mov	r0, r3
 8001536:	f005 faa9 	bl	8006a8c <strncpy>
					sprintf(contenido, "%s%c", contenido, key);
 800153a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800153e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001542:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001546:	496d      	ldr	r1, [pc, #436]	@ (80016fc <calculadora+0x38c>)
 8001548:	f005 fa78 	bl	8006a3c <siprintf>
				break;
 800154c:	e123      	b.n	8001796 <calculadora+0x426>
			case 'A': operacionAritmetica = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	65fb      	str	r3, [r7, #92]	@ 0x5c
					if(inicial == 0){
 8001552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001554:	2b00      	cmp	r3, #0
 8001556:	d109      	bne.n	800156c <calculadora+0x1fc>
						sprintf(resultado, "%s", "0");
 8001558:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800155c:	4a68      	ldr	r2, [pc, #416]	@ (8001700 <calculadora+0x390>)
 800155e:	4969      	ldr	r1, [pc, #420]	@ (8001704 <calculadora+0x394>)
 8001560:	4618      	mov	r0, r3
 8001562:	f005 fa6b 	bl	8006a3c <siprintf>
						inicial = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	663b      	str	r3, [r7, #96]	@ 0x60

					sprintf(salidaUart,"%s: %s, %d\n\r", "+salidac", contenido);
					strcpy((char*)tx_buffer, salidaUart);
					HAL_UART_Transmit(&huart3, tx_buffer, 30, 10);
					*/
					break;
 800156a:	e114      	b.n	8001796 <calculadora+0x426>
						sprintf(resultado, "%s", contenido);
 800156c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001570:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001574:	4963      	ldr	r1, [pc, #396]	@ (8001704 <calculadora+0x394>)
 8001576:	4618      	mov	r0, r3
 8001578:	f005 fa60 	bl	8006a3c <siprintf>
						sprintf(contenido, "%s", "0");
 800157c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001580:	4a5f      	ldr	r2, [pc, #380]	@ (8001700 <calculadora+0x390>)
 8001582:	4960      	ldr	r1, [pc, #384]	@ (8001704 <calculadora+0x394>)
 8001584:	4618      	mov	r0, r3
 8001586:	f005 fa59 	bl	8006a3c <siprintf>
						inicial = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	663b      	str	r3, [r7, #96]	@ 0x60
					break;
 800158e:	e102      	b.n	8001796 <calculadora+0x426>
			case 'B': operacionAritmetica = 2;
 8001590:	2302      	movs	r3, #2
 8001592:	65fb      	str	r3, [r7, #92]	@ 0x5c
						if(inicial == 0){
 8001594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <calculadora+0x23e>
							sprintf(resultado, "%s", "0");
 800159a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800159e:	4a58      	ldr	r2, [pc, #352]	@ (8001700 <calculadora+0x390>)
 80015a0:	4958      	ldr	r1, [pc, #352]	@ (8001704 <calculadora+0x394>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f005 fa4a 	bl	8006a3c <siprintf>
							inicial = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	663b      	str	r3, [r7, #96]	@ 0x60

						sprintf(salidaUart,"%s: %s\n\r", "+salidac", contenido);
						strcpy((char*)tx_buffer, salidaUart);
						HAL_UART_Transmit(&huart3, tx_buffer, 30, 10);
						*/
					    break;
 80015ac:	e0f3      	b.n	8001796 <calculadora+0x426>
							sprintf(resultado, "%s", contenido);
 80015ae:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80015b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015b6:	4953      	ldr	r1, [pc, #332]	@ (8001704 <calculadora+0x394>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f005 fa3f 	bl	8006a3c <siprintf>
							sprintf(contenido, "%s", "0");
 80015be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015c2:	4a4f      	ldr	r2, [pc, #316]	@ (8001700 <calculadora+0x390>)
 80015c4:	494f      	ldr	r1, [pc, #316]	@ (8001704 <calculadora+0x394>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f005 fa38 	bl	8006a3c <siprintf>
							inicial = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	663b      	str	r3, [r7, #96]	@ 0x60
					    break;
 80015d0:	e0e1      	b.n	8001796 <calculadora+0x426>
			case 'C': operacionAritmetica = 3;
 80015d2:	2303      	movs	r3, #3
 80015d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
						if(inicial == 0){
 80015d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <calculadora+0x280>
							sprintf(resultado, "%s", "0");
 80015dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015e0:	4a47      	ldr	r2, [pc, #284]	@ (8001700 <calculadora+0x390>)
 80015e2:	4948      	ldr	r1, [pc, #288]	@ (8001704 <calculadora+0x394>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f005 fa29 	bl	8006a3c <siprintf>
							inicial = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	663b      	str	r3, [r7, #96]	@ 0x60

						sprintf(salidaUart,"%s: %s\n\r", "+salidac", contenido);
						strcpy((char*)tx_buffer, salidaUart);
						HAL_UART_Transmit(&huart3, tx_buffer, 30, 10);
						*/
						break;
 80015ee:	e0d2      	b.n	8001796 <calculadora+0x426>
							sprintf(resultado, "%s", contenido);
 80015f0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80015f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015f8:	4942      	ldr	r1, [pc, #264]	@ (8001704 <calculadora+0x394>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f005 fa1e 	bl	8006a3c <siprintf>
							sprintf(contenido, "%s", "0");
 8001600:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001604:	4a3e      	ldr	r2, [pc, #248]	@ (8001700 <calculadora+0x390>)
 8001606:	493f      	ldr	r1, [pc, #252]	@ (8001704 <calculadora+0x394>)
 8001608:	4618      	mov	r0, r3
 800160a:	f005 fa17 	bl	8006a3c <siprintf>
							inicial = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	663b      	str	r3, [r7, #96]	@ 0x60
						break;
 8001612:	e0c0      	b.n	8001796 <calculadora+0x426>
			case 'D': operacionAritmetica = 4;
 8001614:	2304      	movs	r3, #4
 8001616:	65fb      	str	r3, [r7, #92]	@ 0x5c
						if(inicial == 0){
 8001618:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <calculadora+0x2c2>
							inicial = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	663b      	str	r3, [r7, #96]	@ 0x60
							sprintf(resultado, "%s", "0");
 8001622:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001626:	4a36      	ldr	r2, [pc, #216]	@ (8001700 <calculadora+0x390>)
 8001628:	4936      	ldr	r1, [pc, #216]	@ (8001704 <calculadora+0x394>)
 800162a:	4618      	mov	r0, r3
 800162c:	f005 fa06 	bl	8006a3c <siprintf>

						sprintf(salidaUart,"%s: %s\n\r", "+salidac", contenido);
						strcpy((char*)tx_buffer, salidaUart);
						HAL_UART_Transmit(&huart3, tx_buffer, 30, 10);
						*/
						break;
 8001630:	e0b1      	b.n	8001796 <calculadora+0x426>
							sprintf(resultado, "%s", contenido);
 8001632:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001636:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800163a:	4932      	ldr	r1, [pc, #200]	@ (8001704 <calculadora+0x394>)
 800163c:	4618      	mov	r0, r3
 800163e:	f005 f9fd 	bl	8006a3c <siprintf>
							sprintf(contenido, "%s", "0");
 8001642:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001646:	4a2e      	ldr	r2, [pc, #184]	@ (8001700 <calculadora+0x390>)
 8001648:	492e      	ldr	r1, [pc, #184]	@ (8001704 <calculadora+0x394>)
 800164a:	4618      	mov	r0, r3
 800164c:	f005 f9f6 	bl	8006a3c <siprintf>
							inicial = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	663b      	str	r3, [r7, #96]	@ 0x60
						break;
 8001654:	e09f      	b.n	8001796 <calculadora+0x426>
 8001656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001658:	3b01      	subs	r3, #1
 800165a:	2b03      	cmp	r3, #3
 800165c:	f200 809a 	bhi.w	8001794 <calculadora+0x424>
 8001660:	a201      	add	r2, pc, #4	@ (adr r2, 8001668 <calculadora+0x2f8>)
 8001662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001666:	bf00      	nop
 8001668:	08001679 	.word	0x08001679
 800166c:	080016b3 	.word	0x080016b3
 8001670:	0800170d 	.word	0x0800170d
 8001674:	08001749 	.word	0x08001749
			case '#':
					switch(operacionAritmetica){
						case 1:
							valor1 = atoi(resultado);
 8001678:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800167c:	4618      	mov	r0, r3
 800167e:	f005 f954 	bl	800692a <atoi>
 8001682:	6538      	str	r0, [r7, #80]	@ 0x50
							valor2 = atoi(contenido);
 8001684:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001688:	4618      	mov	r0, r3
 800168a:	f005 f94e 	bl	800692a <atoi>
 800168e:	64f8      	str	r0, [r7, #76]	@ 0x4c
							valor2 += valor1;
 8001690:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001692:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001694:	4413      	add	r3, r2
 8001696:	64fb      	str	r3, [r7, #76]	@ 0x4c
							if(valor2 == 0) 	inicial = 0;
 8001698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <calculadora+0x332>
 800169e:	2300      	movs	r3, #0
 80016a0:	663b      	str	r3, [r7, #96]	@ 0x60
							sprintf(contenido, "%10d", valor2);
 80016a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80016a8:	4917      	ldr	r1, [pc, #92]	@ (8001708 <calculadora+0x398>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f005 f9c6 	bl	8006a3c <siprintf>
							break;
 80016b0:	e068      	b.n	8001784 <calculadora+0x414>
						case 2:
							valor1 = atoi(resultado);
 80016b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016b6:	4618      	mov	r0, r3
 80016b8:	f005 f937 	bl	800692a <atoi>
 80016bc:	6538      	str	r0, [r7, #80]	@ 0x50
							valor2 = atoi(contenido);
 80016be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016c2:	4618      	mov	r0, r3
 80016c4:	f005 f931 	bl	800692a <atoi>
 80016c8:	64f8      	str	r0, [r7, #76]	@ 0x4c
							valor1 -= valor2;
 80016ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80016cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	653b      	str	r3, [r7, #80]	@ 0x50
							if(valor1 == 0) 	inicial = 0;
 80016d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <calculadora+0x36c>
 80016d8:	2300      	movs	r3, #0
 80016da:	663b      	str	r3, [r7, #96]	@ 0x60
							sprintf(contenido, "%10d", valor1);
 80016dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80016e2:	4909      	ldr	r1, [pc, #36]	@ (8001708 <calculadora+0x398>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f005 f9a9 	bl	8006a3c <siprintf>
							break;
 80016ea:	e04b      	b.n	8001784 <calculadora+0x414>
 80016ec:	20000004 	.word	0x20000004
 80016f0:	080073e8 	.word	0x080073e8
 80016f4:	080073f4 	.word	0x080073f4
 80016f8:	080073fc 	.word	0x080073fc
 80016fc:	08007400 	.word	0x08007400
 8001700:	08007408 	.word	0x08007408
 8001704:	0800740c 	.word	0x0800740c
 8001708:	08007410 	.word	0x08007410
						case 3:
							valor1 = atoi(resultado);
 800170c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001710:	4618      	mov	r0, r3
 8001712:	f005 f90a 	bl	800692a <atoi>
 8001716:	6538      	str	r0, [r7, #80]	@ 0x50
							valor2 = atoi(contenido);
 8001718:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800171c:	4618      	mov	r0, r3
 800171e:	f005 f904 	bl	800692a <atoi>
 8001722:	64f8      	str	r0, [r7, #76]	@ 0x4c
							valor2 *= valor1;
 8001724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001726:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	64fb      	str	r3, [r7, #76]	@ 0x4c
							if(valor2 == 0) 	inicial = 0;
 800172e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <calculadora+0x3c8>
 8001734:	2300      	movs	r3, #0
 8001736:	663b      	str	r3, [r7, #96]	@ 0x60
							sprintf(contenido, "%10d", valor2);
 8001738:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800173c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800173e:	491a      	ldr	r1, [pc, #104]	@ (80017a8 <calculadora+0x438>)
 8001740:	4618      	mov	r0, r3
 8001742:	f005 f97b 	bl	8006a3c <siprintf>
							break;
 8001746:	e01d      	b.n	8001784 <calculadora+0x414>
						case 4:
							valor1 = atoi(resultado);
 8001748:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800174c:	4618      	mov	r0, r3
 800174e:	f005 f8ec 	bl	800692a <atoi>
 8001752:	6538      	str	r0, [r7, #80]	@ 0x50
							valor2 = atoi(contenido);
 8001754:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001758:	4618      	mov	r0, r3
 800175a:	f005 f8e6 	bl	800692a <atoi>
 800175e:	64f8      	str	r0, [r7, #76]	@ 0x4c
							valor1 /= valor2;
 8001760:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001764:	fb92 f3f3 	sdiv	r3, r2, r3
 8001768:	653b      	str	r3, [r7, #80]	@ 0x50
							if(valor1 == 0) 	inicial = 0;
 800176a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <calculadora+0x404>
 8001770:	2300      	movs	r3, #0
 8001772:	663b      	str	r3, [r7, #96]	@ 0x60
							sprintf(contenido, "%10d", valor1);
 8001774:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001778:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800177a:	490b      	ldr	r1, [pc, #44]	@ (80017a8 <calculadora+0x438>)
 800177c:	4618      	mov	r0, r3
 800177e:	f005 f95d 	bl	8006a3c <siprintf>
							break;
 8001782:	bf00      	nop
					//strcpy((char*)tx_buffer, salidaUart);
					//HAL_UART_Transmit(&huart3, tx_buffer, 30, 10);
					//sprintf(salidaUart,"%s: %s\n\r", "+salidafc", contenido);
					//strcpy((char*)tx_buffer, salidaUart);
					//HAL_UART_Transmit(&huart3, tx_buffer, 30, 10);
					break;
 8001784:	e006      	b.n	8001794 <calculadora+0x424>
			case '*': salida = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	667b      	str	r3, [r7, #100]	@ 0x64
					SSD1306_Clear();
 800178a:	f000 ffca 	bl	8002722 <SSD1306_Clear>
					break;
 800178e:	e002      	b.n	8001796 <calculadora+0x426>
			default: break; // nunca llegar aqui
 8001790:	bf00      	nop
 8001792:	e000      	b.n	8001796 <calculadora+0x426>
					break;
 8001794:	bf00      	nop
	while(salida){
 8001796:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f ae15 	bne.w	80013c8 <calculadora+0x58>
		}
	}
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	3768      	adds	r7, #104	@ 0x68
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	08007410 	.word	0x08007410

080017ac <reloj>:

void reloj(){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b096      	sub	sp, #88	@ 0x58
 80017b0:	af02      	add	r7, sp, #8
	int salida = 1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int opcion = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	int valor;
	char contenido[11] = "0";
 80017ba:	2330      	movs	r3, #48	@ 0x30
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80017be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	f8c3 2003 	str.w	r2, [r3, #3]
	char resultado = "";
 80017ca:	4ba8      	ldr	r3, [pc, #672]	@ (8001a6c <reloj+0x2c0>)
 80017cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	char value[11];
	char key;
	int inicial = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	643b      	str	r3, [r7, #64]	@ 0x40
	int tamano = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int operacionAritmetica = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	63bb      	str	r3, [r7, #56]	@ 0x38

	char horas[3] = "";
 80017dc:	4ba4      	ldr	r3, [pc, #656]	@ (8001a70 <reloj+0x2c4>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	753b      	strb	r3, [r7, #20]
 80017e2:	f107 0315 	add.w	r3, r7, #21
 80017e6:	2200      	movs	r2, #0
 80017e8:	801a      	strh	r2, [r3, #0]
	char fecha[6][3];
	//RTC_TimeTypeDef changeTime;
	//RTC_DateTypeDef changeDate;
	SSD1306_GotoXY (0,0);
 80017ea:	2100      	movs	r1, #0
 80017ec:	2000      	movs	r0, #0
 80017ee:	f000 fedf 	bl	80025b0 <SSD1306_GotoXY>
	SSD1306_Puts ("Hora, Fecha", &Font_11x18, 1);
 80017f2:	2201      	movs	r2, #1
 80017f4:	499f      	ldr	r1, [pc, #636]	@ (8001a74 <reloj+0x2c8>)
 80017f6:	48a0      	ldr	r0, [pc, #640]	@ (8001a78 <reloj+0x2cc>)
 80017f8:	f000 ff6e 	bl	80026d8 <SSD1306_Puts>

	HAL_RTC_GetTime(&hrtc, &changeTime,  RTC_FORMAT_BIN);
 80017fc:	2200      	movs	r2, #0
 80017fe:	499f      	ldr	r1, [pc, #636]	@ (8001a7c <reloj+0x2d0>)
 8001800:	489f      	ldr	r0, [pc, #636]	@ (8001a80 <reloj+0x2d4>)
 8001802:	f003 fd7e 	bl	8005302 <HAL_RTC_GetTime>
	sprintf(fecha[0], "%02d", changeTime.Hours);
 8001806:	4b9d      	ldr	r3, [pc, #628]	@ (8001a7c <reloj+0x2d0>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	463b      	mov	r3, r7
 800180e:	499d      	ldr	r1, [pc, #628]	@ (8001a84 <reloj+0x2d8>)
 8001810:	4618      	mov	r0, r3
 8001812:	f005 f913 	bl	8006a3c <siprintf>
	sprintf(fecha[1], "%02d", changeTime.Minutes);
 8001816:	4b99      	ldr	r3, [pc, #612]	@ (8001a7c <reloj+0x2d0>)
 8001818:	785b      	ldrb	r3, [r3, #1]
 800181a:	461a      	mov	r2, r3
 800181c:	463b      	mov	r3, r7
 800181e:	3303      	adds	r3, #3
 8001820:	4998      	ldr	r1, [pc, #608]	@ (8001a84 <reloj+0x2d8>)
 8001822:	4618      	mov	r0, r3
 8001824:	f005 f90a 	bl	8006a3c <siprintf>
	sprintf(fecha[2], "%02d", changeTime.Seconds);
 8001828:	4b94      	ldr	r3, [pc, #592]	@ (8001a7c <reloj+0x2d0>)
 800182a:	789b      	ldrb	r3, [r3, #2]
 800182c:	461a      	mov	r2, r3
 800182e:	463b      	mov	r3, r7
 8001830:	3306      	adds	r3, #6
 8001832:	4994      	ldr	r1, [pc, #592]	@ (8001a84 <reloj+0x2d8>)
 8001834:	4618      	mov	r0, r3
 8001836:	f005 f901 	bl	8006a3c <siprintf>
    sprintf(firstTime, " %s-%s-%0s  ", fecha[0], fecha[1], fecha[2]);
 800183a:	463b      	mov	r3, r7
 800183c:	1cd9      	adds	r1, r3, #3
 800183e:	463a      	mov	r2, r7
 8001840:	463b      	mov	r3, r7
 8001842:	3306      	adds	r3, #6
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	460b      	mov	r3, r1
 8001848:	498f      	ldr	r1, [pc, #572]	@ (8001a88 <reloj+0x2dc>)
 800184a:	4890      	ldr	r0, [pc, #576]	@ (8001a8c <reloj+0x2e0>)
 800184c:	f005 f8f6 	bl	8006a3c <siprintf>
	SSD1306_GotoXY (0,25);
 8001850:	2119      	movs	r1, #25
 8001852:	2000      	movs	r0, #0
 8001854:	f000 feac 	bl	80025b0 <SSD1306_GotoXY>
	SSD1306_Puts (firstTime, &Font_11x18, 1);
 8001858:	2201      	movs	r2, #1
 800185a:	4986      	ldr	r1, [pc, #536]	@ (8001a74 <reloj+0x2c8>)
 800185c:	488b      	ldr	r0, [pc, #556]	@ (8001a8c <reloj+0x2e0>)
 800185e:	f000 ff3b 	bl	80026d8 <SSD1306_Puts>

	HAL_RTC_GetDate(&hrtc, &changeDate, RTC_FORMAT_BIN);
 8001862:	2200      	movs	r2, #0
 8001864:	498a      	ldr	r1, [pc, #552]	@ (8001a90 <reloj+0x2e4>)
 8001866:	4886      	ldr	r0, [pc, #536]	@ (8001a80 <reloj+0x2d4>)
 8001868:	f003 fe2d 	bl	80054c6 <HAL_RTC_GetDate>
	sprintf(fecha[3], "%02d", changeDate.Date);
 800186c:	4b88      	ldr	r3, [pc, #544]	@ (8001a90 <reloj+0x2e4>)
 800186e:	789b      	ldrb	r3, [r3, #2]
 8001870:	461a      	mov	r2, r3
 8001872:	463b      	mov	r3, r7
 8001874:	3309      	adds	r3, #9
 8001876:	4983      	ldr	r1, [pc, #524]	@ (8001a84 <reloj+0x2d8>)
 8001878:	4618      	mov	r0, r3
 800187a:	f005 f8df 	bl	8006a3c <siprintf>
	sprintf(fecha[4], "%02d", changeDate.Month);
 800187e:	4b84      	ldr	r3, [pc, #528]	@ (8001a90 <reloj+0x2e4>)
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	461a      	mov	r2, r3
 8001884:	463b      	mov	r3, r7
 8001886:	330c      	adds	r3, #12
 8001888:	497e      	ldr	r1, [pc, #504]	@ (8001a84 <reloj+0x2d8>)
 800188a:	4618      	mov	r0, r3
 800188c:	f005 f8d6 	bl	8006a3c <siprintf>
	sprintf(fecha[5], "%02d", changeDate.Year);
 8001890:	4b7f      	ldr	r3, [pc, #508]	@ (8001a90 <reloj+0x2e4>)
 8001892:	78db      	ldrb	r3, [r3, #3]
 8001894:	461a      	mov	r2, r3
 8001896:	463b      	mov	r3, r7
 8001898:	330f      	adds	r3, #15
 800189a:	497a      	ldr	r1, [pc, #488]	@ (8001a84 <reloj+0x2d8>)
 800189c:	4618      	mov	r0, r3
 800189e:	f005 f8cd 	bl	8006a3c <siprintf>
	sprintf(date, " %s-%s-%0s  ", fecha[3], fecha[4], fecha[5]);
 80018a2:	463b      	mov	r3, r7
 80018a4:	f103 010c 	add.w	r1, r3, #12
 80018a8:	463b      	mov	r3, r7
 80018aa:	f103 0209 	add.w	r2, r3, #9
 80018ae:	463b      	mov	r3, r7
 80018b0:	330f      	adds	r3, #15
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	460b      	mov	r3, r1
 80018b6:	4974      	ldr	r1, [pc, #464]	@ (8001a88 <reloj+0x2dc>)
 80018b8:	4876      	ldr	r0, [pc, #472]	@ (8001a94 <reloj+0x2e8>)
 80018ba:	f005 f8bf 	bl	8006a3c <siprintf>
	SSD1306_GotoXY (0,45);
 80018be:	212d      	movs	r1, #45	@ 0x2d
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 fe75 	bl	80025b0 <SSD1306_GotoXY>
	SSD1306_Puts (date, &Font_11x18, 1);
 80018c6:	2201      	movs	r2, #1
 80018c8:	496a      	ldr	r1, [pc, #424]	@ (8001a74 <reloj+0x2c8>)
 80018ca:	4872      	ldr	r0, [pc, #456]	@ (8001a94 <reloj+0x2e8>)
 80018cc:	f000 ff04 	bl	80026d8 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 80018d0:	f000 fdc8 	bl	8002464 <SSD1306_UpdateScreen>
	while(salida){
 80018d4:	e110      	b.n	8001af8 <reloj+0x34c>

		key = detectNumPad();
 80018d6:	f7ff fb91 	bl	8000ffc <detectNumPad>
 80018da:	4603      	mov	r3, r0
 80018dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		switch(key){
 80018e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018e4:	2b44      	cmp	r3, #68	@ 0x44
 80018e6:	d021      	beq.n	800192c <reloj+0x180>
 80018e8:	2b44      	cmp	r3, #68	@ 0x44
 80018ea:	f300 80bc 	bgt.w	8001a66 <reloj+0x2ba>
 80018ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80018f0:	f000 80b4 	beq.w	8001a5c <reloj+0x2b0>
 80018f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80018f6:	f2c0 80b6 	blt.w	8001a66 <reloj+0x2ba>
 80018fa:	3b30      	subs	r3, #48	@ 0x30
 80018fc:	2b09      	cmp	r3, #9
 80018fe:	f200 80b2 	bhi.w	8001a66 <reloj+0x2ba>
			case '6':
			case '7':
			case '8':
			case '9':
			case '0':
				sprintf(fecha[opcion], "%c%c", fecha[opcion][1], key);
 8001902:	4639      	mov	r1, r7
 8001904:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	18c8      	adds	r0, r1, r3
 800190e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	3350      	adds	r3, #80	@ 0x50
 8001918:	443b      	add	r3, r7
 800191a:	3b4f      	subs	r3, #79	@ 0x4f
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001924:	495c      	ldr	r1, [pc, #368]	@ (8001a98 <reloj+0x2ec>)
 8001926:	f005 f889 	bl	8006a3c <siprintf>
				break;
 800192a:	e0b8      	b.n	8001a9e <reloj+0x2f2>
			case 'D':
				valor = atoi(fecha[opcion]);
 800192c:	4639      	mov	r1, r7
 800192e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	440b      	add	r3, r1
 8001938:	4618      	mov	r0, r3
 800193a:	f004 fff6 	bl	800692a <atoi>
 800193e:	6338      	str	r0, [r7, #48]	@ 0x30
				if(opcion == 0){
 8001940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <reloj+0x1ae>
					if(valor > 0 && valor <= 24)	opcion++;
 8001946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001948:	2b00      	cmp	r3, #0
 800194a:	dd40      	ble.n	80019ce <reloj+0x222>
 800194c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800194e:	2b18      	cmp	r3, #24
 8001950:	dc3d      	bgt.n	80019ce <reloj+0x222>
 8001952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001954:	3301      	adds	r3, #1
 8001956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001958:	e039      	b.n	80019ce <reloj+0x222>
				}else if(opcion == 1){
 800195a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800195c:	2b01      	cmp	r3, #1
 800195e:	d109      	bne.n	8001974 <reloj+0x1c8>
					if(valor > 0 && valor <= 60)	opcion++;
 8001960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001962:	2b00      	cmp	r3, #0
 8001964:	dd33      	ble.n	80019ce <reloj+0x222>
 8001966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001968:	2b3c      	cmp	r3, #60	@ 0x3c
 800196a:	dc30      	bgt.n	80019ce <reloj+0x222>
 800196c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800196e:	3301      	adds	r3, #1
 8001970:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001972:	e02c      	b.n	80019ce <reloj+0x222>
				}else if(opcion == 2){
 8001974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001976:	2b02      	cmp	r3, #2
 8001978:	d109      	bne.n	800198e <reloj+0x1e2>
					if(valor > 0 && valor <= 60)	opcion++;
 800197a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800197c:	2b00      	cmp	r3, #0
 800197e:	dd26      	ble.n	80019ce <reloj+0x222>
 8001980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001982:	2b3c      	cmp	r3, #60	@ 0x3c
 8001984:	dc23      	bgt.n	80019ce <reloj+0x222>
 8001986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001988:	3301      	adds	r3, #1
 800198a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800198c:	e01f      	b.n	80019ce <reloj+0x222>
				}else if(opcion == 3){
 800198e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001990:	2b03      	cmp	r3, #3
 8001992:	d109      	bne.n	80019a8 <reloj+0x1fc>
					if(valor > 0 && valor <= 31)	opcion++;
 8001994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001996:	2b00      	cmp	r3, #0
 8001998:	dd19      	ble.n	80019ce <reloj+0x222>
 800199a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800199c:	2b1f      	cmp	r3, #31
 800199e:	dc16      	bgt.n	80019ce <reloj+0x222>
 80019a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019a2:	3301      	adds	r3, #1
 80019a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019a6:	e012      	b.n	80019ce <reloj+0x222>
				}else if(opcion == 4){
 80019a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d109      	bne.n	80019c2 <reloj+0x216>
					if(valor > 0 && valor <= 12)	opcion++;
 80019ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	dd0c      	ble.n	80019ce <reloj+0x222>
 80019b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	dc09      	bgt.n	80019ce <reloj+0x222>
 80019ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019bc:	3301      	adds	r3, #1
 80019be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019c0:	e005      	b.n	80019ce <reloj+0x222>
				}else if(opcion == 5){
 80019c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d102      	bne.n	80019ce <reloj+0x222>
					opcion++;
 80019c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019ca:	3301      	adds	r3, #1
 80019cc:	64bb      	str	r3, [r7, #72]	@ 0x48
				}

				if(opcion == 6){
 80019ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019d0:	2b06      	cmp	r3, #6
 80019d2:	d163      	bne.n	8001a9c <reloj+0x2f0>
					changeTime.Hours = atoi(fecha[0]);
 80019d4:	463b      	mov	r3, r7
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 ffa7 	bl	800692a <atoi>
 80019dc:	4603      	mov	r3, r0
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b26      	ldr	r3, [pc, #152]	@ (8001a7c <reloj+0x2d0>)
 80019e2:	701a      	strb	r2, [r3, #0]
					changeTime.Minutes = atoi(fecha[1]);
 80019e4:	463b      	mov	r3, r7
 80019e6:	3303      	adds	r3, #3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f004 ff9e 	bl	800692a <atoi>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <reloj+0x2d0>)
 80019f4:	705a      	strb	r2, [r3, #1]
					changeTime.Seconds = atoi(fecha[2]);
 80019f6:	463b      	mov	r3, r7
 80019f8:	3306      	adds	r3, #6
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 ff95 	bl	800692a <atoi>
 8001a00:	4603      	mov	r3, r0
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <reloj+0x2d0>)
 8001a06:	709a      	strb	r2, [r3, #2]
					HAL_RTC_SetTime(&hrtc, &changeTime, RTC_FORMAT_BIN);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	491c      	ldr	r1, [pc, #112]	@ (8001a7c <reloj+0x2d0>)
 8001a0c:	481c      	ldr	r0, [pc, #112]	@ (8001a80 <reloj+0x2d4>)
 8001a0e:	f003 fbde 	bl	80051ce <HAL_RTC_SetTime>

					changeDate.Date = atoi(fecha[3]);
 8001a12:	463b      	mov	r3, r7
 8001a14:	3309      	adds	r3, #9
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 ff87 	bl	800692a <atoi>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <reloj+0x2e4>)
 8001a22:	709a      	strb	r2, [r3, #2]
					changeDate.Month = atoi(fecha[4]);
 8001a24:	463b      	mov	r3, r7
 8001a26:	330c      	adds	r3, #12
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 ff7e 	bl	800692a <atoi>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <reloj+0x2e4>)
 8001a34:	705a      	strb	r2, [r3, #1]
					changeDate.Year = atoi(fecha[5]);
 8001a36:	463b      	mov	r3, r7
 8001a38:	330f      	adds	r3, #15
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f004 ff75 	bl	800692a <atoi>
 8001a40:	4603      	mov	r3, r0
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <reloj+0x2e4>)
 8001a46:	70da      	strb	r2, [r3, #3]
					HAL_RTC_SetDate(&hrtc, &changeDate, RTC_FORMAT_BIN);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4911      	ldr	r1, [pc, #68]	@ (8001a90 <reloj+0x2e4>)
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <reloj+0x2d4>)
 8001a4e:	f003 fcb6 	bl	80053be <HAL_RTC_SetDate>

					salida = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
					SSD1306_Clear();
 8001a56:	f000 fe64 	bl	8002722 <SSD1306_Clear>
				}

				break;
 8001a5a:	e01f      	b.n	8001a9c <reloj+0x2f0>
			case '*':
				salida = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
				SSD1306_Clear();
 8001a60:	f000 fe5f 	bl	8002722 <SSD1306_Clear>
				break;
 8001a64:	e01b      	b.n	8001a9e <reloj+0x2f2>
			default: break; // nunca llegar aqui
 8001a66:	bf00      	nop
 8001a68:	e019      	b.n	8001a9e <reloj+0x2f2>
 8001a6a:	bf00      	nop
 8001a6c:	08007418 	.word	0x08007418
 8001a70:	0800743c 	.word	0x0800743c
 8001a74:	20000004 	.word	0x20000004
 8001a78:	080073c8 	.word	0x080073c8
 8001a7c:	2000096c 	.word	0x2000096c
 8001a80:	20000368 	.word	0x20000368
 8001a84:	0800741c 	.word	0x0800741c
 8001a88:	08007424 	.word	0x08007424
 8001a8c:	20000080 	.word	0x20000080
 8001a90:	20000980 	.word	0x20000980
 8001a94:	2000008c 	.word	0x2000008c
 8001a98:	08007434 	.word	0x08007434
				break;
 8001a9c:	bf00      	nop
		}
		sprintf(firstTime, " %s-%s-%0s  ", fecha[0], fecha[1], fecha[2]);
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	1cd9      	adds	r1, r3, #3
 8001aa2:	463a      	mov	r2, r7
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	3306      	adds	r3, #6
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4917      	ldr	r1, [pc, #92]	@ (8001b0c <reloj+0x360>)
 8001aae:	4818      	ldr	r0, [pc, #96]	@ (8001b10 <reloj+0x364>)
 8001ab0:	f004 ffc4 	bl	8006a3c <siprintf>
		SSD1306_GotoXY (0,25);
 8001ab4:	2119      	movs	r1, #25
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f000 fd7a 	bl	80025b0 <SSD1306_GotoXY>
		SSD1306_Puts (firstTime, &Font_11x18, 1);
 8001abc:	2201      	movs	r2, #1
 8001abe:	4915      	ldr	r1, [pc, #84]	@ (8001b14 <reloj+0x368>)
 8001ac0:	4813      	ldr	r0, [pc, #76]	@ (8001b10 <reloj+0x364>)
 8001ac2:	f000 fe09 	bl	80026d8 <SSD1306_Puts>
		sprintf(date, " %s-%s-%0s  ", fecha[3], fecha[4], fecha[5]);
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	f103 010c 	add.w	r1, r3, #12
 8001acc:	463b      	mov	r3, r7
 8001ace:	f103 0209 	add.w	r2, r3, #9
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	330f      	adds	r3, #15
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	490c      	ldr	r1, [pc, #48]	@ (8001b0c <reloj+0x360>)
 8001adc:	480e      	ldr	r0, [pc, #56]	@ (8001b18 <reloj+0x36c>)
 8001ade:	f004 ffad 	bl	8006a3c <siprintf>
		SSD1306_GotoXY (0,45);
 8001ae2:	212d      	movs	r1, #45	@ 0x2d
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f000 fd63 	bl	80025b0 <SSD1306_GotoXY>
		SSD1306_Puts (date, &Font_11x18, 1);
 8001aea:	2201      	movs	r2, #1
 8001aec:	4909      	ldr	r1, [pc, #36]	@ (8001b14 <reloj+0x368>)
 8001aee:	480a      	ldr	r0, [pc, #40]	@ (8001b18 <reloj+0x36c>)
 8001af0:	f000 fdf2 	bl	80026d8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001af4:	f000 fcb6 	bl	8002464 <SSD1306_UpdateScreen>
	while(salida){
 8001af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f47f aeeb 	bne.w	80018d6 <reloj+0x12a>
	}
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3750      	adds	r7, #80	@ 0x50
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	08007424 	.word	0x08007424
 8001b10:	20000080 	.word	0x20000080
 8001b14:	20000004 	.word	0x20000004
 8001b18:	2000008c 	.word	0x2000008c

08001b1c <menuOpciones>:




void menuOpciones(){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af00      	add	r7, sp, #0
	int salida = 1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
	int opcion = 1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	623b      	str	r3, [r7, #32]
	char contenido[30];
	char key;

	while(salida){
 8001b2a:	e05d      	b.n	8001be8 <menuOpciones+0xcc>
		SSD1306_GotoXY (0,0);
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f000 fd3e 	bl	80025b0 <SSD1306_GotoXY>
		SSD1306_Puts ("Menu", &Font_11x18, 1);
 8001b34:	2201      	movs	r2, #1
 8001b36:	4930      	ldr	r1, [pc, #192]	@ (8001bf8 <menuOpciones+0xdc>)
 8001b38:	4830      	ldr	r0, [pc, #192]	@ (8001bfc <menuOpciones+0xe0>)
 8001b3a:	f000 fdcd 	bl	80026d8 <SSD1306_Puts>
		SSD1306_GotoXY (10,25);
 8001b3e:	2119      	movs	r1, #25
 8001b40:	200a      	movs	r0, #10
 8001b42:	f000 fd35 	bl	80025b0 <SSD1306_GotoXY>
		if(opcion == 1) SSD1306_Puts ("->Hora,Fecha", &Font_11x18, 1);
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d104      	bne.n	8001b56 <menuOpciones+0x3a>
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	492a      	ldr	r1, [pc, #168]	@ (8001bf8 <menuOpciones+0xdc>)
 8001b50:	482b      	ldr	r0, [pc, #172]	@ (8001c00 <menuOpciones+0xe4>)
 8001b52:	f000 fdc1 	bl	80026d8 <SSD1306_Puts>
		if(opcion == 2) SSD1306_Puts ("->Calculadora", &Font_11x18, 1);
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d104      	bne.n	8001b66 <menuOpciones+0x4a>
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4926      	ldr	r1, [pc, #152]	@ (8001bf8 <menuOpciones+0xdc>)
 8001b60:	4828      	ldr	r0, [pc, #160]	@ (8001c04 <menuOpciones+0xe8>)
 8001b62:	f000 fdb9 	bl	80026d8 <SSD1306_Puts>
		if(opcion == 3) SSD1306_Puts ("->Salir   ", &Font_11x18, 1);
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d104      	bne.n	8001b76 <menuOpciones+0x5a>
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4922      	ldr	r1, [pc, #136]	@ (8001bf8 <menuOpciones+0xdc>)
 8001b70:	4825      	ldr	r0, [pc, #148]	@ (8001c08 <menuOpciones+0xec>)
 8001b72:	f000 fdb1 	bl	80026d8 <SSD1306_Puts>

		SSD1306_UpdateScreen();
 8001b76:	f000 fc75 	bl	8002464 <SSD1306_UpdateScreen>
		//if(opcion == 3) SSD1306_Puts ("->Salir", &Font_11x18, 1);
		//if(opcion = 3) SSD1306_Puts ("->Salir", &Font_11x18, 1);
		key = keyMenuOpciones();
 8001b7a:	f7ff f99b 	bl	8000eb4 <keyMenuOpciones>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	77fb      	strb	r3, [r7, #31]
		switch(key){
 8001b82:	7ffb      	ldrb	r3, [r7, #31]
 8001b84:	2b44      	cmp	r3, #68	@ 0x44
 8001b86:	d014      	beq.n	8001bb2 <menuOpciones+0x96>
 8001b88:	2b44      	cmp	r3, #68	@ 0x44
 8001b8a:	dc26      	bgt.n	8001bda <menuOpciones+0xbe>
 8001b8c:	2b41      	cmp	r3, #65	@ 0x41
 8001b8e:	d002      	beq.n	8001b96 <menuOpciones+0x7a>
 8001b90:	2b42      	cmp	r3, #66	@ 0x42
 8001b92:	d007      	beq.n	8001ba4 <menuOpciones+0x88>
						if(opcion == 3){ salida = 0; }
				//		sprintf(contenido,"%s: %d, %d", "valor", key, opcion);
				//		strcpy((char*)tx_buffer, contenido);
				//		HAL_UART_Transmit(&huart3, tx_buffer, 30, 10);
					    break;
			default: break; // nunca llegar aqui
 8001b94:	e021      	b.n	8001bda <menuOpciones+0xbe>
			case 'A': if(opcion > 0) opcion--;
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	dd20      	ble.n	8001bde <menuOpciones+0xc2>
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	623b      	str	r3, [r7, #32]
						break;
 8001ba2:	e01c      	b.n	8001bde <menuOpciones+0xc2>
			case 'B': if(opcion < 3) opcion++;
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	dc1b      	bgt.n	8001be2 <menuOpciones+0xc6>
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	3301      	adds	r3, #1
 8001bae:	623b      	str	r3, [r7, #32]
						break;
 8001bb0:	e017      	b.n	8001be2 <menuOpciones+0xc6>
						if(opcion == 1){
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d103      	bne.n	8001bc0 <menuOpciones+0xa4>
							reloj();
 8001bb8:	f7ff fdf8 	bl	80017ac <reloj>
							SSD1306_Clear();
 8001bbc:	f000 fdb1 	bl	8002722 <SSD1306_Clear>
						if(opcion == 2){
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d103      	bne.n	8001bce <menuOpciones+0xb2>
							calculadora();
 8001bc6:	f7ff fbd3 	bl	8001370 <calculadora>
							SSD1306_Clear();
 8001bca:	f000 fdaa 	bl	8002722 <SSD1306_Clear>
						if(opcion == 3){ salida = 0; }
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d108      	bne.n	8001be6 <menuOpciones+0xca>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
					    break;
 8001bd8:	e005      	b.n	8001be6 <menuOpciones+0xca>
			default: break; // nunca llegar aqui
 8001bda:	bf00      	nop
 8001bdc:	e004      	b.n	8001be8 <menuOpciones+0xcc>
						break;
 8001bde:	bf00      	nop
 8001be0:	e002      	b.n	8001be8 <menuOpciones+0xcc>
						break;
 8001be2:	bf00      	nop
 8001be4:	e000      	b.n	8001be8 <menuOpciones+0xcc>
					    break;
 8001be6:	bf00      	nop
	while(salida){
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d19e      	bne.n	8001b2c <menuOpciones+0x10>
		}
	}
}
 8001bee:	bf00      	nop
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	@ 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	08007440 	.word	0x08007440
 8001c00:	08007448 	.word	0x08007448
 8001c04:	08007458 	.word	0x08007458
 8001c08:	08007468 	.word	0x08007468

08001c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c10:	b672      	cpsid	i
}
 8001c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <Error_Handler+0x8>

08001c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	4a0f      	ldr	r2, [pc, #60]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a08      	ldr	r2, [pc, #32]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800

08001c68 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08e      	sub	sp, #56	@ 0x38
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a55      	ldr	r2, [pc, #340]	@ (8001ddc <HAL_ETH_MspInit+0x174>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	f040 80a4 	bne.w	8001dd4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
 8001c90:	4b53      	ldr	r3, [pc, #332]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	4a52      	ldr	r2, [pc, #328]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001c96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9c:	4b50      	ldr	r3, [pc, #320]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	4b4c      	ldr	r3, [pc, #304]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001cb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb8:	4b49      	ldr	r3, [pc, #292]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	4b45      	ldr	r3, [pc, #276]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ccc:	4a44      	ldr	r2, [pc, #272]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001cce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001cd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd4:	4b42      	ldr	r3, [pc, #264]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	4a3d      	ldr	r2, [pc, #244]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	4b37      	ldr	r3, [pc, #220]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d04:	4a36      	ldr	r2, [pc, #216]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0c:	4b34      	ldr	r3, [pc, #208]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	4b30      	ldr	r3, [pc, #192]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d20:	4a2f      	ldr	r2, [pc, #188]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001d22:	f043 0302 	orr.w	r3, r3, #2
 8001d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d28:	4b2d      	ldr	r3, [pc, #180]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	4a28      	ldr	r2, [pc, #160]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d44:	4b26      	ldr	r3, [pc, #152]	@ (8001de0 <HAL_ETH_MspInit+0x178>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d50:	2332      	movs	r3, #50	@ 0x32
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d60:	230b      	movs	r3, #11
 8001d62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	481e      	ldr	r0, [pc, #120]	@ (8001de4 <HAL_ETH_MspInit+0x17c>)
 8001d6c:	f001 fa20 	bl	80031b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d70:	2386      	movs	r3, #134	@ 0x86
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d80:	230b      	movs	r3, #11
 8001d82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4817      	ldr	r0, [pc, #92]	@ (8001de8 <HAL_ETH_MspInit+0x180>)
 8001d8c:	f001 fa10 	bl	80031b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001d90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001da2:	230b      	movs	r3, #11
 8001da4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001daa:	4619      	mov	r1, r3
 8001dac:	480f      	ldr	r0, [pc, #60]	@ (8001dec <HAL_ETH_MspInit+0x184>)
 8001dae:	f001 f9ff 	bl	80031b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001db2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dc4:	230b      	movs	r3, #11
 8001dc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4808      	ldr	r0, [pc, #32]	@ (8001df0 <HAL_ETH_MspInit+0x188>)
 8001dd0:	f001 f9ee 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3738      	adds	r7, #56	@ 0x38
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40028000 	.word	0x40028000
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40020400 	.word	0x40020400
 8001df0:	40021800 	.word	0x40021800

08001df4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	@ 0x30
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a32      	ldr	r2, [pc, #200]	@ (8001edc <HAL_I2C_MspInit+0xe8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d12d      	bne.n	8001e72 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ee0 <HAL_I2C_MspInit+0xec>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	4a30      	ldr	r2, [pc, #192]	@ (8001ee0 <HAL_I2C_MspInit+0xec>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e26:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee0 <HAL_I2C_MspInit+0xec>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e38:	2312      	movs	r3, #18
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e44:	2304      	movs	r3, #4
 8001e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4825      	ldr	r0, [pc, #148]	@ (8001ee4 <HAL_I2C_MspInit+0xf0>)
 8001e50:	f001 f9ae 	bl	80031b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <HAL_I2C_MspInit+0xec>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	4a20      	ldr	r2, [pc, #128]	@ (8001ee0 <HAL_I2C_MspInit+0xec>)
 8001e5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <HAL_I2C_MspInit+0xec>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e70:	e030      	b.n	8001ed4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee8 <HAL_I2C_MspInit+0xf4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d12b      	bne.n	8001ed4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <HAL_I2C_MspInit+0xec>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	4a16      	ldr	r2, [pc, #88]	@ (8001ee0 <HAL_I2C_MspInit+0xec>)
 8001e86:	f043 0320 	orr.w	r3, r3, #32
 8001e8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <HAL_I2C_MspInit+0xec>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9c:	2312      	movs	r3, #18
 8001e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	480e      	ldr	r0, [pc, #56]	@ (8001eec <HAL_I2C_MspInit+0xf8>)
 8001eb4:	f001 f97c 	bl	80031b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <HAL_I2C_MspInit+0xec>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	4a07      	ldr	r2, [pc, #28]	@ (8001ee0 <HAL_I2C_MspInit+0xec>)
 8001ec2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ec6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <HAL_I2C_MspInit+0xec>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3730      	adds	r7, #48	@ 0x30
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40005400 	.word	0x40005400
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40005800 	.word	0x40005800
 8001eec:	40021400 	.word	0x40021400

08001ef0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08e      	sub	sp, #56	@ 0x38
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	2230      	movs	r2, #48	@ 0x30
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f004 fdbb 	bl	8006a7c <memset>
  if(hrtc->Instance==RTC)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f3c <HAL_RTC_MspInit+0x4c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d111      	bne.n	8001f34 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f10:	2320      	movs	r3, #32
 8001f12:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f18:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1a:	f107 0308 	add.w	r3, r7, #8
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 ff12 	bl	8004d48 <HAL_RCCEx_PeriphCLKConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001f2a:	f7ff fe6f 	bl	8001c0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f2e:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <HAL_RTC_MspInit+0x50>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	3738      	adds	r7, #56	@ 0x38
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40002800 	.word	0x40002800
 8001f40:	42470e3c 	.word	0x42470e3c

08001f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a28      	ldr	r2, [pc, #160]	@ (8002004 <HAL_SPI_MspInit+0xc0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d149      	bne.n	8001ffa <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	4b27      	ldr	r3, [pc, #156]	@ (8002008 <HAL_SPI_MspInit+0xc4>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	4a26      	ldr	r2, [pc, #152]	@ (8002008 <HAL_SPI_MspInit+0xc4>)
 8001f70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f76:	4b24      	ldr	r3, [pc, #144]	@ (8002008 <HAL_SPI_MspInit+0xc4>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b20      	ldr	r3, [pc, #128]	@ (8002008 <HAL_SPI_MspInit+0xc4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002008 <HAL_SPI_MspInit+0xc4>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b1d      	ldr	r3, [pc, #116]	@ (8002008 <HAL_SPI_MspInit+0xc4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <HAL_SPI_MspInit+0xc4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a18      	ldr	r2, [pc, #96]	@ (8002008 <HAL_SPI_MspInit+0xc4>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <HAL_SPI_MspInit+0xc4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fba:	2360      	movs	r3, #96	@ 0x60
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fca:	2305      	movs	r3, #5
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480d      	ldr	r0, [pc, #52]	@ (800200c <HAL_SPI_MspInit+0xc8>)
 8001fd6:	f001 f8eb 	bl	80031b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fea:	2305      	movs	r3, #5
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4806      	ldr	r0, [pc, #24]	@ (8002010 <HAL_SPI_MspInit+0xcc>)
 8001ff6:	f001 f8db 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3728      	adds	r7, #40	@ 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40013000 	.word	0x40013000
 8002008:	40023800 	.word	0x40023800
 800200c:	40020000 	.word	0x40020000
 8002010:	40020400 	.word	0x40020400

08002014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002024:	d10d      	bne.n	8002042 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <HAL_TIM_Base_MspInit+0x3c>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	4a08      	ldr	r2, [pc, #32]	@ (8002050 <HAL_TIM_Base_MspInit+0x3c>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6413      	str	r3, [r2, #64]	@ 0x40
 8002036:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <HAL_TIM_Base_MspInit+0x3c>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800

08002054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	@ 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a19      	ldr	r2, [pc, #100]	@ (80020d8 <HAL_UART_MspInit+0x84>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d12c      	bne.n	80020d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <HAL_UART_MspInit+0x88>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	4a17      	ldr	r2, [pc, #92]	@ (80020dc <HAL_UART_MspInit+0x88>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002084:	6413      	str	r3, [r2, #64]	@ 0x40
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <HAL_UART_MspInit+0x88>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_UART_MspInit+0x88>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	4a10      	ldr	r2, [pc, #64]	@ (80020dc <HAL_UART_MspInit+0x88>)
 800209c:	f043 0308 	orr.w	r3, r3, #8
 80020a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_UART_MspInit+0x88>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020c0:	2307      	movs	r3, #7
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4619      	mov	r1, r3
 80020ca:	4805      	ldr	r0, [pc, #20]	@ (80020e0 <HAL_UART_MspInit+0x8c>)
 80020cc:	f001 f870 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020d0:	bf00      	nop
 80020d2:	3728      	adds	r7, #40	@ 0x28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40004800 	.word	0x40004800
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020c00 	.word	0x40020c00

080020e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	@ 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002104:	d13f      	bne.n	8002186 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <HAL_PCD_MspInit+0xac>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4a20      	ldr	r2, [pc, #128]	@ (8002190 <HAL_PCD_MspInit+0xac>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <HAL_PCD_MspInit+0xac>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002122:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002134:	230a      	movs	r3, #10
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4619      	mov	r1, r3
 800213e:	4815      	ldr	r0, [pc, #84]	@ (8002194 <HAL_PCD_MspInit+0xb0>)
 8002140:	f001 f836 	bl	80031b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002144:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	480e      	ldr	r0, [pc, #56]	@ (8002194 <HAL_PCD_MspInit+0xb0>)
 800215a:	f001 f829 	bl	80031b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800215e:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <HAL_PCD_MspInit+0xac>)
 8002160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002162:	4a0b      	ldr	r2, [pc, #44]	@ (8002190 <HAL_PCD_MspInit+0xac>)
 8002164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002168:	6353      	str	r3, [r2, #52]	@ 0x34
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <HAL_PCD_MspInit+0xac>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	4a07      	ldr	r2, [pc, #28]	@ (8002190 <HAL_PCD_MspInit+0xac>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002178:	6453      	str	r3, [r2, #68]	@ 0x44
 800217a:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_PCD_MspInit+0xac>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002186:	bf00      	nop
 8002188:	3728      	adds	r7, #40	@ 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	40020000 	.word	0x40020000

08002198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <NMI_Handler+0x4>

080021a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <HardFault_Handler+0x4>

080021a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <MemManage_Handler+0x4>

080021b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <BusFault_Handler+0x4>

080021b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <UsageFault_Handler+0x4>

080021c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ee:	f000 fb8d 	bl	800290c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	@ (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	@ (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	@ (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f004 fc44 	bl	8006ab4 <__errno>
 800222c:	4603      	mov	r3, r0
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	@ (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	@ (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	@ (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20030000 	.word	0x20030000
 8002258:	00000400 	.word	0x00000400
 800225c:	2000098c 	.word	0x2000098c
 8002260:	20000ee8 	.word	0x20000ee8

08002264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <SystemInit+0x20>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226e:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <SystemInit+0x20>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800228c:	f7ff ffea 	bl	8002264 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002290:	480c      	ldr	r0, [pc, #48]	@ (80022c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002292:	490d      	ldr	r1, [pc, #52]	@ (80022c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002294:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a6:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022a8:	4c0a      	ldr	r4, [pc, #40]	@ (80022d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022b6:	f004 fc03 	bl	8006ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ba:	f7fe f969 	bl	8000590 <main>
  bx  lr    
 80022be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80022cc:	0800832c 	.word	0x0800832c
  ldr r2, =_sbss
 80022d0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80022d4:	20000ee4 	.word	0x20000ee4

080022d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d8:	e7fe      	b.n	80022d8 <ADC_IRQHandler>
	...

080022dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80022e2:	f000 fa27 	bl	8002734 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80022e6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80022ea:	2201      	movs	r2, #1
 80022ec:	2178      	movs	r1, #120	@ 0x78
 80022ee:	485b      	ldr	r0, [pc, #364]	@ (800245c <SSD1306_Init+0x180>)
 80022f0:	f001 fb7e 	bl	80039f0 <HAL_I2C_IsDeviceReady>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e0a9      	b.n	8002452 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80022fe:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002302:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002304:	e002      	b.n	800230c <SSD1306_Init+0x30>
		p--;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3b01      	subs	r3, #1
 800230a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f9      	bne.n	8002306 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002312:	22ae      	movs	r2, #174	@ 0xae
 8002314:	2100      	movs	r1, #0
 8002316:	2078      	movs	r0, #120	@ 0x78
 8002318:	f000 fa88 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800231c:	2220      	movs	r2, #32
 800231e:	2100      	movs	r1, #0
 8002320:	2078      	movs	r0, #120	@ 0x78
 8002322:	f000 fa83 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002326:	2210      	movs	r2, #16
 8002328:	2100      	movs	r1, #0
 800232a:	2078      	movs	r0, #120	@ 0x78
 800232c:	f000 fa7e 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002330:	22b0      	movs	r2, #176	@ 0xb0
 8002332:	2100      	movs	r1, #0
 8002334:	2078      	movs	r0, #120	@ 0x78
 8002336:	f000 fa79 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800233a:	22c8      	movs	r2, #200	@ 0xc8
 800233c:	2100      	movs	r1, #0
 800233e:	2078      	movs	r0, #120	@ 0x78
 8002340:	f000 fa74 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	2078      	movs	r0, #120	@ 0x78
 800234a:	f000 fa6f 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800234e:	2210      	movs	r2, #16
 8002350:	2100      	movs	r1, #0
 8002352:	2078      	movs	r0, #120	@ 0x78
 8002354:	f000 fa6a 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002358:	2240      	movs	r2, #64	@ 0x40
 800235a:	2100      	movs	r1, #0
 800235c:	2078      	movs	r0, #120	@ 0x78
 800235e:	f000 fa65 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002362:	2281      	movs	r2, #129	@ 0x81
 8002364:	2100      	movs	r1, #0
 8002366:	2078      	movs	r0, #120	@ 0x78
 8002368:	f000 fa60 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800236c:	22ff      	movs	r2, #255	@ 0xff
 800236e:	2100      	movs	r1, #0
 8002370:	2078      	movs	r0, #120	@ 0x78
 8002372:	f000 fa5b 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002376:	22a1      	movs	r2, #161	@ 0xa1
 8002378:	2100      	movs	r1, #0
 800237a:	2078      	movs	r0, #120	@ 0x78
 800237c:	f000 fa56 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002380:	22a6      	movs	r2, #166	@ 0xa6
 8002382:	2100      	movs	r1, #0
 8002384:	2078      	movs	r0, #120	@ 0x78
 8002386:	f000 fa51 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800238a:	22a8      	movs	r2, #168	@ 0xa8
 800238c:	2100      	movs	r1, #0
 800238e:	2078      	movs	r0, #120	@ 0x78
 8002390:	f000 fa4c 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002394:	223f      	movs	r2, #63	@ 0x3f
 8002396:	2100      	movs	r1, #0
 8002398:	2078      	movs	r0, #120	@ 0x78
 800239a:	f000 fa47 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800239e:	22a4      	movs	r2, #164	@ 0xa4
 80023a0:	2100      	movs	r1, #0
 80023a2:	2078      	movs	r0, #120	@ 0x78
 80023a4:	f000 fa42 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80023a8:	22d3      	movs	r2, #211	@ 0xd3
 80023aa:	2100      	movs	r1, #0
 80023ac:	2078      	movs	r0, #120	@ 0x78
 80023ae:	f000 fa3d 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80023b2:	2200      	movs	r2, #0
 80023b4:	2100      	movs	r1, #0
 80023b6:	2078      	movs	r0, #120	@ 0x78
 80023b8:	f000 fa38 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80023bc:	22d5      	movs	r2, #213	@ 0xd5
 80023be:	2100      	movs	r1, #0
 80023c0:	2078      	movs	r0, #120	@ 0x78
 80023c2:	f000 fa33 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80023c6:	22f0      	movs	r2, #240	@ 0xf0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2078      	movs	r0, #120	@ 0x78
 80023cc:	f000 fa2e 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80023d0:	22d9      	movs	r2, #217	@ 0xd9
 80023d2:	2100      	movs	r1, #0
 80023d4:	2078      	movs	r0, #120	@ 0x78
 80023d6:	f000 fa29 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80023da:	2222      	movs	r2, #34	@ 0x22
 80023dc:	2100      	movs	r1, #0
 80023de:	2078      	movs	r0, #120	@ 0x78
 80023e0:	f000 fa24 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80023e4:	22da      	movs	r2, #218	@ 0xda
 80023e6:	2100      	movs	r1, #0
 80023e8:	2078      	movs	r0, #120	@ 0x78
 80023ea:	f000 fa1f 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80023ee:	2212      	movs	r2, #18
 80023f0:	2100      	movs	r1, #0
 80023f2:	2078      	movs	r0, #120	@ 0x78
 80023f4:	f000 fa1a 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80023f8:	22db      	movs	r2, #219	@ 0xdb
 80023fa:	2100      	movs	r1, #0
 80023fc:	2078      	movs	r0, #120	@ 0x78
 80023fe:	f000 fa15 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002402:	2220      	movs	r2, #32
 8002404:	2100      	movs	r1, #0
 8002406:	2078      	movs	r0, #120	@ 0x78
 8002408:	f000 fa10 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800240c:	228d      	movs	r2, #141	@ 0x8d
 800240e:	2100      	movs	r1, #0
 8002410:	2078      	movs	r0, #120	@ 0x78
 8002412:	f000 fa0b 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002416:	2214      	movs	r2, #20
 8002418:	2100      	movs	r1, #0
 800241a:	2078      	movs	r0, #120	@ 0x78
 800241c:	f000 fa06 	bl	800282c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002420:	22af      	movs	r2, #175	@ 0xaf
 8002422:	2100      	movs	r1, #0
 8002424:	2078      	movs	r0, #120	@ 0x78
 8002426:	f000 fa01 	bl	800282c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800242a:	222e      	movs	r2, #46	@ 0x2e
 800242c:	2100      	movs	r1, #0
 800242e:	2078      	movs	r0, #120	@ 0x78
 8002430:	f000 f9fc 	bl	800282c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002434:	2000      	movs	r0, #0
 8002436:	f000 f843 	bl	80024c0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800243a:	f000 f813 	bl	8002464 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800243e:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <SSD1306_Init+0x184>)
 8002440:	2200      	movs	r2, #0
 8002442:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <SSD1306_Init+0x184>)
 8002446:	2200      	movs	r2, #0
 8002448:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <SSD1306_Init+0x184>)
 800244c:	2201      	movs	r2, #1
 800244e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002450:	2301      	movs	r3, #1
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200002c0 	.word	0x200002c0
 8002460:	20000d90 	.word	0x20000d90

08002464 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800246a:	2300      	movs	r3, #0
 800246c:	71fb      	strb	r3, [r7, #7]
 800246e:	e01d      	b.n	80024ac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	3b50      	subs	r3, #80	@ 0x50
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	2100      	movs	r1, #0
 800247a:	2078      	movs	r0, #120	@ 0x78
 800247c:	f000 f9d6 	bl	800282c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	2078      	movs	r0, #120	@ 0x78
 8002486:	f000 f9d1 	bl	800282c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800248a:	2210      	movs	r2, #16
 800248c:	2100      	movs	r1, #0
 800248e:	2078      	movs	r0, #120	@ 0x78
 8002490:	f000 f9cc 	bl	800282c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	01db      	lsls	r3, r3, #7
 8002498:	4a08      	ldr	r2, [pc, #32]	@ (80024bc <SSD1306_UpdateScreen+0x58>)
 800249a:	441a      	add	r2, r3
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	2140      	movs	r1, #64	@ 0x40
 80024a0:	2078      	movs	r0, #120	@ 0x78
 80024a2:	f000 f95d 	bl	8002760 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	3301      	adds	r3, #1
 80024aa:	71fb      	strb	r3, [r7, #7]
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b07      	cmp	r3, #7
 80024b0:	d9de      	bls.n	8002470 <SSD1306_UpdateScreen+0xc>
	}
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000990 	.word	0x20000990

080024c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <SSD1306_Fill+0x14>
 80024d0:	2300      	movs	r3, #0
 80024d2:	e000      	b.n	80024d6 <SSD1306_Fill+0x16>
 80024d4:	23ff      	movs	r3, #255	@ 0xff
 80024d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024da:	4619      	mov	r1, r3
 80024dc:	4803      	ldr	r0, [pc, #12]	@ (80024ec <SSD1306_Fill+0x2c>)
 80024de:	f004 facd 	bl	8006a7c <memset>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000990 	.word	0x20000990

080024f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	80fb      	strh	r3, [r7, #6]
 80024fa:	460b      	mov	r3, r1
 80024fc:	80bb      	strh	r3, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	70fb      	strb	r3, [r7, #3]
	if (
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	2b7f      	cmp	r3, #127	@ 0x7f
 8002506:	d848      	bhi.n	800259a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002508:	88bb      	ldrh	r3, [r7, #4]
 800250a:	2b3f      	cmp	r3, #63	@ 0x3f
 800250c:	d845      	bhi.n	800259a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800250e:	4b26      	ldr	r3, [pc, #152]	@ (80025a8 <SSD1306_DrawPixel+0xb8>)
 8002510:	791b      	ldrb	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d11a      	bne.n	8002560 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800252a:	88fa      	ldrh	r2, [r7, #6]
 800252c:	88bb      	ldrh	r3, [r7, #4]
 800252e:	08db      	lsrs	r3, r3, #3
 8002530:	b298      	uxth	r0, r3
 8002532:	4603      	mov	r3, r0
 8002534:	01db      	lsls	r3, r3, #7
 8002536:	4413      	add	r3, r2
 8002538:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <SSD1306_DrawPixel+0xbc>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	b25a      	sxtb	r2, r3
 800253e:	88bb      	ldrh	r3, [r7, #4]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	2101      	movs	r1, #1
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	b25b      	sxtb	r3, r3
 800254c:	4313      	orrs	r3, r2
 800254e:	b259      	sxtb	r1, r3
 8002550:	88fa      	ldrh	r2, [r7, #6]
 8002552:	4603      	mov	r3, r0
 8002554:	01db      	lsls	r3, r3, #7
 8002556:	4413      	add	r3, r2
 8002558:	b2c9      	uxtb	r1, r1
 800255a:	4a14      	ldr	r2, [pc, #80]	@ (80025ac <SSD1306_DrawPixel+0xbc>)
 800255c:	54d1      	strb	r1, [r2, r3]
 800255e:	e01d      	b.n	800259c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002560:	88fa      	ldrh	r2, [r7, #6]
 8002562:	88bb      	ldrh	r3, [r7, #4]
 8002564:	08db      	lsrs	r3, r3, #3
 8002566:	b298      	uxth	r0, r3
 8002568:	4603      	mov	r3, r0
 800256a:	01db      	lsls	r3, r3, #7
 800256c:	4413      	add	r3, r2
 800256e:	4a0f      	ldr	r2, [pc, #60]	@ (80025ac <SSD1306_DrawPixel+0xbc>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	b25a      	sxtb	r2, r3
 8002574:	88bb      	ldrh	r3, [r7, #4]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	b25b      	sxtb	r3, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	b25b      	sxtb	r3, r3
 8002586:	4013      	ands	r3, r2
 8002588:	b259      	sxtb	r1, r3
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	4603      	mov	r3, r0
 800258e:	01db      	lsls	r3, r3, #7
 8002590:	4413      	add	r3, r2
 8002592:	b2c9      	uxtb	r1, r1
 8002594:	4a05      	ldr	r2, [pc, #20]	@ (80025ac <SSD1306_DrawPixel+0xbc>)
 8002596:	54d1      	strb	r1, [r2, r3]
 8002598:	e000      	b.n	800259c <SSD1306_DrawPixel+0xac>
		return;
 800259a:	bf00      	nop
	}
}
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000d90 	.word	0x20000d90
 80025ac:	20000990 	.word	0x20000990

080025b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	460a      	mov	r2, r1
 80025ba:	80fb      	strh	r3, [r7, #6]
 80025bc:	4613      	mov	r3, r2
 80025be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80025c0:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <SSD1306_GotoXY+0x28>)
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80025c6:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <SSD1306_GotoXY+0x28>)
 80025c8:	88bb      	ldrh	r3, [r7, #4]
 80025ca:	8053      	strh	r3, [r2, #2]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	20000d90 	.word	0x20000d90

080025dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	4613      	mov	r3, r2
 80025ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80025ec:	4b39      	ldr	r3, [pc, #228]	@ (80026d4 <SSD1306_Putc+0xf8>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	4413      	add	r3, r2
	if (
 80025f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80025fa:	dc07      	bgt.n	800260c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80025fc:	4b35      	ldr	r3, [pc, #212]	@ (80026d4 <SSD1306_Putc+0xf8>)
 80025fe:	885b      	ldrh	r3, [r3, #2]
 8002600:	461a      	mov	r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002608:	2b3f      	cmp	r3, #63	@ 0x3f
 800260a:	dd01      	ble.n	8002610 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800260c:	2300      	movs	r3, #0
 800260e:	e05d      	b.n	80026cc <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e04b      	b.n	80026ae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	3b20      	subs	r3, #32
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	7849      	ldrb	r1, [r1, #1]
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4619      	mov	r1, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	440b      	add	r3, r1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	e030      	b.n	800269c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d010      	beq.n	800266c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800264a:	4b22      	ldr	r3, [pc, #136]	@ (80026d4 <SSD1306_Putc+0xf8>)
 800264c:	881a      	ldrh	r2, [r3, #0]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	b29b      	uxth	r3, r3
 8002652:	4413      	add	r3, r2
 8002654:	b298      	uxth	r0, r3
 8002656:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <SSD1306_Putc+0xf8>)
 8002658:	885a      	ldrh	r2, [r3, #2]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	b29b      	uxth	r3, r3
 800265e:	4413      	add	r3, r2
 8002660:	b29b      	uxth	r3, r3
 8002662:	79ba      	ldrb	r2, [r7, #6]
 8002664:	4619      	mov	r1, r3
 8002666:	f7ff ff43 	bl	80024f0 <SSD1306_DrawPixel>
 800266a:	e014      	b.n	8002696 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800266c:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <SSD1306_Putc+0xf8>)
 800266e:	881a      	ldrh	r2, [r3, #0]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	b29b      	uxth	r3, r3
 8002674:	4413      	add	r3, r2
 8002676:	b298      	uxth	r0, r3
 8002678:	4b16      	ldr	r3, [pc, #88]	@ (80026d4 <SSD1306_Putc+0xf8>)
 800267a:	885a      	ldrh	r2, [r3, #2]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	b29b      	uxth	r3, r3
 8002680:	4413      	add	r3, r2
 8002682:	b299      	uxth	r1, r3
 8002684:	79bb      	ldrb	r3, [r7, #6]
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf0c      	ite	eq
 800268a:	2301      	moveq	r3, #1
 800268c:	2300      	movne	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	f7ff ff2d 	bl	80024f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	3301      	adds	r3, #1
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d3c8      	bcc.n	800263a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	785b      	ldrb	r3, [r3, #1]
 80026b2:	461a      	mov	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d3ad      	bcc.n	8002616 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <SSD1306_Putc+0xf8>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	7812      	ldrb	r2, [r2, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	4b03      	ldr	r3, [pc, #12]	@ (80026d4 <SSD1306_Putc+0xf8>)
 80026c8:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80026ca:	79fb      	ldrb	r3, [r7, #7]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000d90 	.word	0x20000d90

080026d8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80026e6:	e012      	b.n	800270e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	79fa      	ldrb	r2, [r7, #7]
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff73 	bl	80025dc <SSD1306_Putc>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461a      	mov	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d002      	beq.n	8002708 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	e008      	b.n	800271a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3301      	adds	r3, #1
 800270c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1e8      	bne.n	80026e8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	781b      	ldrb	r3, [r3, #0]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <SSD1306_Clear>:


void SSD1306_Clear (void)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002726:	2000      	movs	r0, #0
 8002728:	f7ff feca 	bl	80024c0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800272c:	f7ff fe9a 	bl	8002464 <SSD1306_UpdateScreen>
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}

08002734 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800273a:	4b08      	ldr	r3, [pc, #32]	@ (800275c <ssd1306_I2C_Init+0x28>)
 800273c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800273e:	e002      	b.n	8002746 <ssd1306_I2C_Init+0x12>
		p--;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f9      	bne.n	8002740 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	0003d090 	.word	0x0003d090

08002760 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b0c7      	sub	sp, #284	@ 0x11c
 8002764:	af02      	add	r7, sp, #8
 8002766:	4604      	mov	r4, r0
 8002768:	4608      	mov	r0, r1
 800276a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800276e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002772:	600a      	str	r2, [r1, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800277a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800277e:	4622      	mov	r2, r4
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002786:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800278a:	4602      	mov	r2, r0
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002792:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002796:	460a      	mov	r2, r1
 8002798:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 800279a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800279e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80027a2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80027a6:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80027aa:	7812      	ldrb	r2, [r2, #0]
 80027ac:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80027b4:	e015      	b.n	80027e2 <ssd1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 80027b6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80027ba:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80027be:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	441a      	add	r2, r3
 80027c6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80027ca:	3301      	adds	r3, #1
 80027cc:	7811      	ldrb	r1, [r2, #0]
 80027ce:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80027d2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80027d6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 80027d8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80027dc:	3301      	adds	r3, #1
 80027de:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80027e2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80027ec:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80027f0:	8812      	ldrh	r2, [r2, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d8df      	bhi.n	80027b6 <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80027f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80027fa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b299      	uxth	r1, r3
 8002802:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002806:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	b29b      	uxth	r3, r3
 8002810:	f107 020c 	add.w	r2, r7, #12
 8002814:	200a      	movs	r0, #10
 8002816:	9000      	str	r0, [sp, #0]
 8002818:	4803      	ldr	r0, [pc, #12]	@ (8002828 <ssd1306_I2C_WriteMulti+0xc8>)
 800281a:	f000 ffeb 	bl	80037f4 <HAL_I2C_Master_Transmit>
}
 800281e:	bf00      	nop
 8002820:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002824:	46bd      	mov	sp, r7
 8002826:	bd90      	pop	{r4, r7, pc}
 8002828:	200002c0 	.word	0x200002c0

0800282c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
 8002836:	460b      	mov	r3, r1
 8002838:	71bb      	strb	r3, [r7, #6]
 800283a:	4613      	mov	r3, r2
 800283c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800283e:	79bb      	ldrb	r3, [r7, #6]
 8002840:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002842:	797b      	ldrb	r3, [r7, #5]
 8002844:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	b299      	uxth	r1, r3
 800284a:	f107 020c 	add.w	r2, r7, #12
 800284e:	230a      	movs	r3, #10
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	2302      	movs	r3, #2
 8002854:	4803      	ldr	r0, [pc, #12]	@ (8002864 <ssd1306_I2C_Write+0x38>)
 8002856:	f000 ffcd 	bl	80037f4 <HAL_I2C_Master_Transmit>
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200002c0 	.word	0x200002c0

08002868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800286c:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <HAL_Init+0x40>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0d      	ldr	r2, [pc, #52]	@ (80028a8 <HAL_Init+0x40>)
 8002872:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <HAL_Init+0x40>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0a      	ldr	r2, [pc, #40]	@ (80028a8 <HAL_Init+0x40>)
 800287e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002884:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <HAL_Init+0x40>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a07      	ldr	r2, [pc, #28]	@ (80028a8 <HAL_Init+0x40>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002890:	2003      	movs	r0, #3
 8002892:	f000 f931 	bl	8002af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002896:	2000      	movs	r0, #0
 8002898:	f000 f808 	bl	80028ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800289c:	f7ff f9bc 	bl	8001c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00

080028ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b4:	4b12      	ldr	r3, [pc, #72]	@ (8002900 <HAL_InitTick+0x54>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <HAL_InitTick+0x58>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f93b 	bl	8002b46 <HAL_SYSTICK_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00e      	b.n	80028f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b0f      	cmp	r3, #15
 80028de:	d80a      	bhi.n	80028f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e0:	2200      	movs	r2, #0
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	f000 f911 	bl	8002b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028ec:	4a06      	ldr	r2, [pc, #24]	@ (8002908 <HAL_InitTick+0x5c>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000000 	.word	0x20000000
 8002904:	20000010 	.word	0x20000010
 8002908:	2000000c 	.word	0x2000000c

0800290c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002910:	4b06      	ldr	r3, [pc, #24]	@ (800292c <HAL_IncTick+0x20>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <HAL_IncTick+0x24>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4413      	add	r3, r2
 800291c:	4a04      	ldr	r2, [pc, #16]	@ (8002930 <HAL_IncTick+0x24>)
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000010 	.word	0x20000010
 8002930:	20000d98 	.word	0x20000d98

08002934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return uwTick;
 8002938:	4b03      	ldr	r3, [pc, #12]	@ (8002948 <HAL_GetTick+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000d98 	.word	0x20000d98

0800294c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff ffee 	bl	8002934 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d005      	beq.n	8002972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002966:	4b0a      	ldr	r3, [pc, #40]	@ (8002990 <HAL_Delay+0x44>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002972:	bf00      	nop
 8002974:	f7ff ffde 	bl	8002934 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d8f7      	bhi.n	8002974 <HAL_Delay+0x28>
  {
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000010 	.word	0x20000010

08002994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a4:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029b0:	4013      	ands	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c6:	4a04      	ldr	r2, [pc, #16]	@ (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	60d3      	str	r3, [r2, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e0:	4b04      	ldr	r3, [pc, #16]	@ (80029f4 <__NVIC_GetPriorityGrouping+0x18>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	f003 0307 	and.w	r3, r3, #7
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	db0a      	blt.n	8002a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	490c      	ldr	r1, [pc, #48]	@ (8002a44 <__NVIC_SetPriority+0x4c>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a20:	e00a      	b.n	8002a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4908      	ldr	r1, [pc, #32]	@ (8002a48 <__NVIC_SetPriority+0x50>)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	3b04      	subs	r3, #4
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	440b      	add	r3, r1
 8002a36:	761a      	strb	r2, [r3, #24]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000e100 	.word	0xe000e100
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	@ 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f1c3 0307 	rsb	r3, r3, #7
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	bf28      	it	cs
 8002a6a:	2304      	movcs	r3, #4
 8002a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d902      	bls.n	8002a7c <NVIC_EncodePriority+0x30>
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3b03      	subs	r3, #3
 8002a7a:	e000      	b.n	8002a7e <NVIC_EncodePriority+0x32>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	f04f 32ff 	mov.w	r2, #4294967295
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	401a      	ands	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a94:	f04f 31ff 	mov.w	r1, #4294967295
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	43d9      	mvns	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	4313      	orrs	r3, r2
         );
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	@ 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ac4:	d301      	bcc.n	8002aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00f      	b.n	8002aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aca:	4a0a      	ldr	r2, [pc, #40]	@ (8002af4 <SysTick_Config+0x40>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ad2:	210f      	movs	r1, #15
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad8:	f7ff ff8e 	bl	80029f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002adc:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <SysTick_Config+0x40>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ae2:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <SysTick_Config+0x40>)
 8002ae4:	2207      	movs	r2, #7
 8002ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	e000e010 	.word	0xe000e010

08002af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ff47 	bl	8002994 <__NVIC_SetPriorityGrouping>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b086      	sub	sp, #24
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b20:	f7ff ff5c 	bl	80029dc <__NVIC_GetPriorityGrouping>
 8002b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	6978      	ldr	r0, [r7, #20]
 8002b2c:	f7ff ff8e 	bl	8002a4c <NVIC_EncodePriority>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff5d 	bl	80029f8 <__NVIC_SetPriority>
}
 8002b3e:	bf00      	nop
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffb0 	bl	8002ab4 <SysTick_Config>
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e06c      	b.n	8002c4c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2223      	movs	r2, #35	@ 0x23
 8002b80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff f86f 	bl	8001c68 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b31      	ldr	r3, [pc, #196]	@ (8002c54 <HAL_ETH_Init+0xf4>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	4a30      	ldr	r2, [pc, #192]	@ (8002c54 <HAL_ETH_Init+0xf4>)
 8002b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c54 <HAL_ETH_Init+0xf4>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8002c58 <HAL_ETH_Init+0xf8>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4a2b      	ldr	r2, [pc, #172]	@ (8002c58 <HAL_ETH_Init+0xf8>)
 8002bac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002bb0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002bb2:	4b29      	ldr	r3, [pc, #164]	@ (8002c58 <HAL_ETH_Init+0xf8>)
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4927      	ldr	r1, [pc, #156]	@ (8002c58 <HAL_ETH_Init+0xf8>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002bc0:	4b25      	ldr	r3, [pc, #148]	@ (8002c58 <HAL_ETH_Init+0xf8>)
 8002bc2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bdc:	f7ff feaa 	bl	8002934 <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002be2:	e011      	b.n	8002c08 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002be4:	f7ff fea6 	bl	8002934 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002bf2:	d909      	bls.n	8002c08 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	22e0      	movs	r2, #224	@ 0xe0
 8002c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e021      	b.n	8002c4c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1e4      	bne.n	8002be4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f958 	bl	8002ed0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f9ff 	bl	8003024 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fa55 	bl	80030d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	461a      	mov	r2, r3
 8002c32:	2100      	movs	r1, #0
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f9bd 	bl	8002fb4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2210      	movs	r2, #16
 8002c46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40013800 	.word	0x40013800

08002c5c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4b51      	ldr	r3, [pc, #324]	@ (8002db8 <ETH_SetMACConfig+0x15c>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	7c1b      	ldrb	r3, [r3, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <ETH_SetMACConfig+0x28>
 8002c7e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c82:	e000      	b.n	8002c86 <ETH_SetMACConfig+0x2a>
 8002c84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	7c5b      	ldrb	r3, [r3, #17]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <ETH_SetMACConfig+0x38>
 8002c8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c92:	e000      	b.n	8002c96 <ETH_SetMACConfig+0x3a>
 8002c94:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c96:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	7fdb      	ldrb	r3, [r3, #31]
 8002ca2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ca4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002caa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	7f92      	ldrb	r2, [r2, #30]
 8002cb0:	2a00      	cmp	r2, #0
 8002cb2:	d102      	bne.n	8002cba <ETH_SetMACConfig+0x5e>
 8002cb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cb8:	e000      	b.n	8002cbc <ETH_SetMACConfig+0x60>
 8002cba:	2200      	movs	r2, #0
                        macconf->Speed |
 8002cbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	7f1b      	ldrb	r3, [r3, #28]
 8002cc2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002cc4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002cca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	791b      	ldrb	r3, [r3, #4]
 8002cd0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002cd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002cda:	2a00      	cmp	r2, #0
 8002cdc:	d102      	bne.n	8002ce4 <ETH_SetMACConfig+0x88>
 8002cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce2:	e000      	b.n	8002ce6 <ETH_SetMACConfig+0x8a>
 8002ce4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ce6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	7bdb      	ldrb	r3, [r3, #15]
 8002cec:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002cee:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002cf4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002cfc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d16:	2001      	movs	r0, #1
 8002d18:	f7ff fe18 	bl	800294c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002d32:	4013      	ands	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d101      	bne.n	8002d4a <ETH_SetMACConfig+0xee>
 8002d46:	2280      	movs	r2, #128	@ 0x80
 8002d48:	e000      	b.n	8002d4c <ETH_SetMACConfig+0xf0>
 8002d4a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d4c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002d5a:	2a01      	cmp	r2, #1
 8002d5c:	d101      	bne.n	8002d62 <ETH_SetMACConfig+0x106>
 8002d5e:	2208      	movs	r2, #8
 8002d60:	e000      	b.n	8002d64 <ETH_SetMACConfig+0x108>
 8002d62:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002d64:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002d6c:	2a01      	cmp	r2, #1
 8002d6e:	d101      	bne.n	8002d74 <ETH_SetMACConfig+0x118>
 8002d70:	2204      	movs	r2, #4
 8002d72:	e000      	b.n	8002d76 <ETH_SetMACConfig+0x11a>
 8002d74:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002d7e:	2a01      	cmp	r2, #1
 8002d80:	d101      	bne.n	8002d86 <ETH_SetMACConfig+0x12a>
 8002d82:	2202      	movs	r2, #2
 8002d84:	e000      	b.n	8002d88 <ETH_SetMACConfig+0x12c>
 8002d86:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002da0:	2001      	movs	r0, #1
 8002da2:	f7ff fdd3 	bl	800294c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	619a      	str	r2, [r3, #24]
}
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	ff20810f 	.word	0xff20810f

08002dbc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8002ecc <ETH_SetDMAConfig+0x110>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	7b1b      	ldrb	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <ETH_SetDMAConfig+0x2c>
 8002de2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002de6:	e000      	b.n	8002dea <ETH_SetDMAConfig+0x2e>
 8002de8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	7b5b      	ldrb	r3, [r3, #13]
 8002dee:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002df0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	7f52      	ldrb	r2, [r2, #29]
 8002df6:	2a00      	cmp	r2, #0
 8002df8:	d102      	bne.n	8002e00 <ETH_SetDMAConfig+0x44>
 8002dfa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002dfe:	e000      	b.n	8002e02 <ETH_SetDMAConfig+0x46>
 8002e00:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e02:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	7b9b      	ldrb	r3, [r3, #14]
 8002e08:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e0a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e10:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	7f1b      	ldrb	r3, [r3, #28]
 8002e16:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002e18:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	7f9b      	ldrb	r3, [r3, #30]
 8002e1e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e20:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e2e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e30:	4313      	orrs	r3, r2
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e40:	461a      	mov	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e52:	2001      	movs	r0, #1
 8002e54:	f7ff fd7a 	bl	800294c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e60:	461a      	mov	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	791b      	ldrb	r3, [r3, #4]
 8002e6a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e70:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002e76:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e7c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e84:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002e86:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e8e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e94:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ea2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f7ff fd4b 	bl	800294c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6013      	str	r3, [r2, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	f8de3f23 	.word	0xf8de3f23

08002ed0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b0a6      	sub	sp, #152	@ 0x98
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f36:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002f44:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f48:	4619      	mov	r1, r3
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff fe86 	bl	8002c5c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002f54:	2301      	movs	r3, #1
 8002f56:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002f72:	2300      	movs	r3, #0
 8002f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002f80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f84:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002f86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f8a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f90:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002fa0:	f107 0308 	add.w	r3, r7, #8
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ff08 	bl	8002dbc <ETH_SetDMAConfig>
}
 8002fac:	bf00      	nop
 8002fae:	3798      	adds	r7, #152	@ 0x98
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3305      	adds	r3, #5
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	3204      	adds	r2, #4
 8002fcc:	7812      	ldrb	r2, [r2, #0]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	4b11      	ldr	r3, [pc, #68]	@ (800301c <ETH_MACAddressConfig+0x68>)
 8002fd6:	4413      	add	r3, r2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3303      	adds	r3, #3
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	061a      	lsls	r2, r3, #24
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3302      	adds	r3, #2
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	7812      	ldrb	r2, [r2, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <ETH_MACAddressConfig+0x6c>)
 8003006:	4413      	add	r3, r2
 8003008:	461a      	mov	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	6013      	str	r3, [r2, #0]
}
 800300e:	bf00      	nop
 8003010:	371c      	adds	r7, #28
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40028040 	.word	0x40028040
 8003020:	40028044 	.word	0x40028044

08003024 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e03e      	b.n	80030b0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68d9      	ldr	r1, [r3, #12]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	440b      	add	r3, r1
 8003042:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2200      	movs	r2, #0
 800304e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2200      	movs	r2, #0
 800305a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	3206      	adds	r2, #6
 8003064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d80c      	bhi.n	8003094 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68d9      	ldr	r1, [r3, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	440b      	add	r3, r1
 800308c:	461a      	mov	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	e004      	b.n	800309e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	461a      	mov	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3301      	adds	r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d9bd      	bls.n	8003032 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c8:	611a      	str	r2, [r3, #16]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b085      	sub	sp, #20
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e046      	b.n	8003172 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6919      	ldr	r1, [r3, #16]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	440b      	add	r3, r1
 80030f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2200      	movs	r2, #0
 8003112:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003120:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8003128:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	3212      	adds	r2, #18
 800313e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d80c      	bhi.n	8003162 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6919      	ldr	r1, [r3, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	461a      	mov	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	60da      	str	r2, [r3, #12]
 8003160:	e004      	b.n	800316c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	461a      	mov	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	3301      	adds	r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d9b5      	bls.n	80030e4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031a2:	60da      	str	r2, [r3, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	@ 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	e177      	b.n	80034bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031cc:	2201      	movs	r2, #1
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f040 8166 	bne.w	80034b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d005      	beq.n	8003202 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d130      	bne.n	8003264 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b03      	cmp	r3, #3
 800326e:	d017      	beq.n	80032a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d123      	bne.n	80032f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	08da      	lsrs	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3208      	adds	r2, #8
 80032ee:	69b9      	ldr	r1, [r7, #24]
 80032f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0203 	and.w	r2, r3, #3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80c0 	beq.w	80034b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b66      	ldr	r3, [pc, #408]	@ (80034d4 <HAL_GPIO_Init+0x324>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	4a65      	ldr	r2, [pc, #404]	@ (80034d4 <HAL_GPIO_Init+0x324>)
 8003340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003344:	6453      	str	r3, [r2, #68]	@ 0x44
 8003346:	4b63      	ldr	r3, [pc, #396]	@ (80034d4 <HAL_GPIO_Init+0x324>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003352:	4a61      	ldr	r2, [pc, #388]	@ (80034d8 <HAL_GPIO_Init+0x328>)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3302      	adds	r3, #2
 800335a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	220f      	movs	r2, #15
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a58      	ldr	r2, [pc, #352]	@ (80034dc <HAL_GPIO_Init+0x32c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d037      	beq.n	80033ee <HAL_GPIO_Init+0x23e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a57      	ldr	r2, [pc, #348]	@ (80034e0 <HAL_GPIO_Init+0x330>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d031      	beq.n	80033ea <HAL_GPIO_Init+0x23a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a56      	ldr	r2, [pc, #344]	@ (80034e4 <HAL_GPIO_Init+0x334>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d02b      	beq.n	80033e6 <HAL_GPIO_Init+0x236>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a55      	ldr	r2, [pc, #340]	@ (80034e8 <HAL_GPIO_Init+0x338>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d025      	beq.n	80033e2 <HAL_GPIO_Init+0x232>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a54      	ldr	r2, [pc, #336]	@ (80034ec <HAL_GPIO_Init+0x33c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01f      	beq.n	80033de <HAL_GPIO_Init+0x22e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a53      	ldr	r2, [pc, #332]	@ (80034f0 <HAL_GPIO_Init+0x340>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d019      	beq.n	80033da <HAL_GPIO_Init+0x22a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a52      	ldr	r2, [pc, #328]	@ (80034f4 <HAL_GPIO_Init+0x344>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_GPIO_Init+0x226>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a51      	ldr	r2, [pc, #324]	@ (80034f8 <HAL_GPIO_Init+0x348>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00d      	beq.n	80033d2 <HAL_GPIO_Init+0x222>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a50      	ldr	r2, [pc, #320]	@ (80034fc <HAL_GPIO_Init+0x34c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <HAL_GPIO_Init+0x21e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003500 <HAL_GPIO_Init+0x350>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_GPIO_Init+0x21a>
 80033c6:	2309      	movs	r3, #9
 80033c8:	e012      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033ca:	230a      	movs	r3, #10
 80033cc:	e010      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033ce:	2308      	movs	r3, #8
 80033d0:	e00e      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033d2:	2307      	movs	r3, #7
 80033d4:	e00c      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033d6:	2306      	movs	r3, #6
 80033d8:	e00a      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033da:	2305      	movs	r3, #5
 80033dc:	e008      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033de:	2304      	movs	r3, #4
 80033e0:	e006      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033e2:	2303      	movs	r3, #3
 80033e4:	e004      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e002      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033ee:	2300      	movs	r3, #0
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	f002 0203 	and.w	r2, r2, #3
 80033f6:	0092      	lsls	r2, r2, #2
 80033f8:	4093      	lsls	r3, r2
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003400:	4935      	ldr	r1, [pc, #212]	@ (80034d8 <HAL_GPIO_Init+0x328>)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	3302      	adds	r3, #2
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800340e:	4b3d      	ldr	r3, [pc, #244]	@ (8003504 <HAL_GPIO_Init+0x354>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003432:	4a34      	ldr	r2, [pc, #208]	@ (8003504 <HAL_GPIO_Init+0x354>)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003438:	4b32      	ldr	r3, [pc, #200]	@ (8003504 <HAL_GPIO_Init+0x354>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800345c:	4a29      	ldr	r2, [pc, #164]	@ (8003504 <HAL_GPIO_Init+0x354>)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003462:	4b28      	ldr	r3, [pc, #160]	@ (8003504 <HAL_GPIO_Init+0x354>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003486:	4a1f      	ldr	r2, [pc, #124]	@ (8003504 <HAL_GPIO_Init+0x354>)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800348c:	4b1d      	ldr	r3, [pc, #116]	@ (8003504 <HAL_GPIO_Init+0x354>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034b0:	4a14      	ldr	r2, [pc, #80]	@ (8003504 <HAL_GPIO_Init+0x354>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3301      	adds	r3, #1
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b0f      	cmp	r3, #15
 80034c0:	f67f ae84 	bls.w	80031cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop
 80034c8:	3724      	adds	r7, #36	@ 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40013800 	.word	0x40013800
 80034dc:	40020000 	.word	0x40020000
 80034e0:	40020400 	.word	0x40020400
 80034e4:	40020800 	.word	0x40020800
 80034e8:	40020c00 	.word	0x40020c00
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40021400 	.word	0x40021400
 80034f4:	40021800 	.word	0x40021800
 80034f8:	40021c00 	.word	0x40021c00
 80034fc:	40022000 	.word	0x40022000
 8003500:	40022400 	.word	0x40022400
 8003504:	40013c00 	.word	0x40013c00

08003508 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	887b      	ldrh	r3, [r7, #2]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	e001      	b.n	800352a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
 8003544:	4613      	mov	r3, r2
 8003546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003548:	787b      	ldrb	r3, [r7, #1]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003554:	e003      	b.n	800355e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	041a      	lsls	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	619a      	str	r2, [r3, #24]
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e12b      	b.n	80037d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fe fc2e 	bl	8001df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2224      	movs	r2, #36	@ 0x24
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035d0:	f001 fb92 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 80035d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4a81      	ldr	r2, [pc, #516]	@ (80037e0 <HAL_I2C_Init+0x274>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d807      	bhi.n	80035f0 <HAL_I2C_Init+0x84>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4a80      	ldr	r2, [pc, #512]	@ (80037e4 <HAL_I2C_Init+0x278>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	bf94      	ite	ls
 80035e8:	2301      	movls	r3, #1
 80035ea:	2300      	movhi	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e006      	b.n	80035fe <HAL_I2C_Init+0x92>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a7d      	ldr	r2, [pc, #500]	@ (80037e8 <HAL_I2C_Init+0x27c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	bf94      	ite	ls
 80035f8:	2301      	movls	r3, #1
 80035fa:	2300      	movhi	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e0e7      	b.n	80037d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a78      	ldr	r2, [pc, #480]	@ (80037ec <HAL_I2C_Init+0x280>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	0c9b      	lsrs	r3, r3, #18
 8003610:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4a6a      	ldr	r2, [pc, #424]	@ (80037e0 <HAL_I2C_Init+0x274>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d802      	bhi.n	8003640 <HAL_I2C_Init+0xd4>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	3301      	adds	r3, #1
 800363e:	e009      	b.n	8003654 <HAL_I2C_Init+0xe8>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003646:	fb02 f303 	mul.w	r3, r2, r3
 800364a:	4a69      	ldr	r2, [pc, #420]	@ (80037f0 <HAL_I2C_Init+0x284>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	3301      	adds	r3, #1
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	430b      	orrs	r3, r1
 800365a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003666:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	495c      	ldr	r1, [pc, #368]	@ (80037e0 <HAL_I2C_Init+0x274>)
 8003670:	428b      	cmp	r3, r1
 8003672:	d819      	bhi.n	80036a8 <HAL_I2C_Init+0x13c>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1e59      	subs	r1, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003682:	1c59      	adds	r1, r3, #1
 8003684:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003688:	400b      	ands	r3, r1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_I2C_Init+0x138>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1e59      	subs	r1, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fbb1 f3f3 	udiv	r3, r1, r3
 800369c:	3301      	adds	r3, #1
 800369e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a2:	e051      	b.n	8003748 <HAL_I2C_Init+0x1dc>
 80036a4:	2304      	movs	r3, #4
 80036a6:	e04f      	b.n	8003748 <HAL_I2C_Init+0x1dc>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d111      	bne.n	80036d4 <HAL_I2C_Init+0x168>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1e58      	subs	r0, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	440b      	add	r3, r1
 80036be:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e012      	b.n	80036fa <HAL_I2C_Init+0x18e>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1e58      	subs	r0, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	0099      	lsls	r1, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_I2C_Init+0x196>
 80036fe:	2301      	movs	r3, #1
 8003700:	e022      	b.n	8003748 <HAL_I2C_Init+0x1dc>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10e      	bne.n	8003728 <HAL_I2C_Init+0x1bc>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1e58      	subs	r0, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	440b      	add	r3, r1
 8003718:	fbb0 f3f3 	udiv	r3, r0, r3
 800371c:	3301      	adds	r3, #1
 800371e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003726:	e00f      	b.n	8003748 <HAL_I2C_Init+0x1dc>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1e58      	subs	r0, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	0099      	lsls	r1, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	fbb0 f3f3 	udiv	r3, r0, r3
 800373e:	3301      	adds	r3, #1
 8003740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003744:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	6809      	ldr	r1, [r1, #0]
 800374c:	4313      	orrs	r3, r2
 800374e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003776:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6911      	ldr	r1, [r2, #16]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68d2      	ldr	r2, [r2, #12]
 8003782:	4311      	orrs	r1, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	430b      	orrs	r3, r1
 800378a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	000186a0 	.word	0x000186a0
 80037e4:	001e847f 	.word	0x001e847f
 80037e8:	003d08ff 	.word	0x003d08ff
 80037ec:	431bde83 	.word	0x431bde83
 80037f0:	10624dd3 	.word	0x10624dd3

080037f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	461a      	mov	r2, r3
 8003800:	460b      	mov	r3, r1
 8003802:	817b      	strh	r3, [r7, #10]
 8003804:	4613      	mov	r3, r2
 8003806:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003808:	f7ff f894 	bl	8002934 <HAL_GetTick>
 800380c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b20      	cmp	r3, #32
 8003818:	f040 80e0 	bne.w	80039dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	2319      	movs	r3, #25
 8003822:	2201      	movs	r2, #1
 8003824:	4970      	ldr	r1, [pc, #448]	@ (80039e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fa92 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	e0d3      	b.n	80039de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_I2C_Master_Transmit+0x50>
 8003840:	2302      	movs	r3, #2
 8003842:	e0cc      	b.n	80039de <HAL_I2C_Master_Transmit+0x1ea>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d007      	beq.n	800386a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003878:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2221      	movs	r2, #33	@ 0x21
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2210      	movs	r2, #16
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	893a      	ldrh	r2, [r7, #8]
 800389a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a50      	ldr	r2, [pc, #320]	@ (80039ec <HAL_I2C_Master_Transmit+0x1f8>)
 80038aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038ac:	8979      	ldrh	r1, [r7, #10]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	6a3a      	ldr	r2, [r7, #32]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f9ca 	bl	8003c4c <I2C_MasterRequestWrite>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e08d      	b.n	80039de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038d8:	e066      	b.n	80039a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	6a39      	ldr	r1, [r7, #32]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fb50 	bl	8003f84 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d107      	bne.n	8003902 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003900:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e06b      	b.n	80039de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b04      	cmp	r3, #4
 8003942:	d11b      	bne.n	800397c <HAL_I2C_Master_Transmit+0x188>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003948:	2b00      	cmp	r3, #0
 800394a:	d017      	beq.n	800397c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	781a      	ldrb	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	6a39      	ldr	r1, [r7, #32]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fb47 	bl	8004014 <I2C_WaitOnBTFFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00d      	beq.n	80039a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003990:	2b04      	cmp	r3, #4
 8003992:	d107      	bne.n	80039a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e01a      	b.n	80039de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d194      	bne.n	80038da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	e000      	b.n	80039de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
  }
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	00100002 	.word	0x00100002
 80039ec:	ffff0000 	.word	0xffff0000

080039f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	@ 0x28
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	460b      	mov	r3, r1
 80039fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a00:	f7fe ff98 	bl	8002934 <HAL_GetTick>
 8003a04:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	f040 8111 	bne.w	8003c3a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	2319      	movs	r3, #25
 8003a1e:	2201      	movs	r2, #1
 8003a20:	4988      	ldr	r1, [pc, #544]	@ (8003c44 <HAL_I2C_IsDeviceReady+0x254>)
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f994 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e104      	b.n	8003c3c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_I2C_IsDeviceReady+0x50>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e0fd      	b.n	8003c3c <HAL_I2C_IsDeviceReady+0x24c>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d007      	beq.n	8003a66 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2224      	movs	r2, #36	@ 0x24
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a70      	ldr	r2, [pc, #448]	@ (8003c48 <HAL_I2C_IsDeviceReady+0x258>)
 8003a88:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a98:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f952 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00d      	beq.n	8003ace <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac0:	d103      	bne.n	8003aca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ac8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e0b6      	b.n	8003c3c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ace:	897b      	ldrh	r3, [r7, #10]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003adc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ade:	f7fe ff29 	bl	8002934 <HAL_GetTick>
 8003ae2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	bf0c      	ite	eq
 8003af2:	2301      	moveq	r3, #1
 8003af4:	2300      	movne	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b08:	bf0c      	ite	eq
 8003b0a:	2301      	moveq	r3, #1
 8003b0c:	2300      	movne	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b12:	e025      	b.n	8003b60 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b14:	f7fe ff0e 	bl	8002934 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d302      	bcc.n	8003b2a <HAL_I2C_IsDeviceReady+0x13a>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	22a0      	movs	r2, #160	@ 0xa0
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b6a:	d005      	beq.n	8003b78 <HAL_I2C_IsDeviceReady+0x188>
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <HAL_I2C_IsDeviceReady+0x188>
 8003b72:	7dbb      	ldrb	r3, [r7, #22]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0cd      	beq.n	8003b14 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d129      	bne.n	8003be2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2319      	movs	r3, #25
 8003bba:	2201      	movs	r2, #1
 8003bbc:	4921      	ldr	r1, [pc, #132]	@ (8003c44 <HAL_I2C_IsDeviceReady+0x254>)
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f8c6 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e036      	b.n	8003c3c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e02c      	b.n	8003c3c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bfa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2319      	movs	r3, #25
 8003c02:	2201      	movs	r2, #1
 8003c04:	490f      	ldr	r1, [pc, #60]	@ (8003c44 <HAL_I2C_IsDeviceReady+0x254>)
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f8a2 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e012      	b.n	8003c3c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	f4ff af32 	bcc.w	8003a8a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	00100002 	.word	0x00100002
 8003c48:	ffff0000 	.word	0xffff0000

08003c4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d006      	beq.n	8003c76 <I2C_MasterRequestWrite+0x2a>
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d003      	beq.n	8003c76 <I2C_MasterRequestWrite+0x2a>
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c74:	d108      	bne.n	8003c88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e00b      	b.n	8003ca0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	2b12      	cmp	r3, #18
 8003c8e:	d107      	bne.n	8003ca0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f84f 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cc6:	d103      	bne.n	8003cd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e035      	b.n	8003d40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cdc:	d108      	bne.n	8003cf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cde:	897b      	ldrh	r3, [r7, #10]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cec:	611a      	str	r2, [r3, #16]
 8003cee:	e01b      	b.n	8003d28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cf0:	897b      	ldrh	r3, [r7, #10]
 8003cf2:	11db      	asrs	r3, r3, #7
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f003 0306 	and.w	r3, r3, #6
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f063 030f 	orn	r3, r3, #15
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	490e      	ldr	r1, [pc, #56]	@ (8003d48 <I2C_MasterRequestWrite+0xfc>)
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f898 	bl	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e010      	b.n	8003d40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d1e:	897b      	ldrh	r3, [r7, #10]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	4907      	ldr	r1, [pc, #28]	@ (8003d4c <I2C_MasterRequestWrite+0x100>)
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f888 	bl	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	00010008 	.word	0x00010008
 8003d4c:	00010002 	.word	0x00010002

08003d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d60:	e048      	b.n	8003df4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d044      	beq.n	8003df4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6a:	f7fe fde3 	bl	8002934 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d302      	bcc.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d139      	bne.n	8003df4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	0c1b      	lsrs	r3, r3, #16
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d10d      	bne.n	8003da6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	43da      	mvns	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4013      	ands	r3, r2
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	e00c      	b.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	43da      	mvns	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d116      	bne.n	8003df4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e023      	b.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	0c1b      	lsrs	r3, r3, #16
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d10d      	bne.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	43da      	mvns	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	e00c      	b.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	43da      	mvns	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	4013      	ands	r3, r2
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d093      	beq.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e52:	e071      	b.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e62:	d123      	bne.n	8003eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e98:	f043 0204 	orr.w	r2, r3, #4
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e067      	b.n	8003f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d041      	beq.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb4:	f7fe fd3e 	bl	8002934 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d136      	bne.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	0c1b      	lsrs	r3, r3, #16
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d10c      	bne.n	8003eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	43da      	mvns	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	bf14      	ite	ne
 8003ee6:	2301      	movne	r3, #1
 8003ee8:	2300      	moveq	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	e00b      	b.n	8003f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	43da      	mvns	r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d016      	beq.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	f043 0220 	orr.w	r2, r3, #32
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e021      	b.n	8003f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	0c1b      	lsrs	r3, r3, #16
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d10c      	bne.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	43da      	mvns	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e00b      	b.n	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	43da      	mvns	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bf14      	ite	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	2300      	moveq	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f47f af6d 	bne.w	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f90:	e034      	b.n	8003ffc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f886 	bl	80040a4 <I2C_IsAcknowledgeFailed>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e034      	b.n	800400c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d028      	beq.n	8003ffc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003faa:	f7fe fcc3 	bl	8002934 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d302      	bcc.n	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d11d      	bne.n	8003ffc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fca:	2b80      	cmp	r3, #128	@ 0x80
 8003fcc:	d016      	beq.n	8003ffc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e007      	b.n	800400c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004006:	2b80      	cmp	r3, #128	@ 0x80
 8004008:	d1c3      	bne.n	8003f92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004020:	e034      	b.n	800408c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f83e 	bl	80040a4 <I2C_IsAcknowledgeFailed>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e034      	b.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d028      	beq.n	800408c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403a:	f7fe fc7b 	bl	8002934 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d11d      	bne.n	800408c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b04      	cmp	r3, #4
 800405c:	d016      	beq.n	800408c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	f043 0220 	orr.w	r2, r3, #32
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e007      	b.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b04      	cmp	r3, #4
 8004098:	d1c3      	bne.n	8004022 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ba:	d11b      	bne.n	80040f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e0:	f043 0204 	orr.w	r2, r3, #4
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b20      	cmp	r3, #32
 8004116:	d129      	bne.n	800416c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2224      	movs	r2, #36	@ 0x24
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0210 	bic.w	r2, r2, #16
 800413e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800416c:	2302      	movs	r3, #2
  }
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b20      	cmp	r3, #32
 8004192:	d12a      	bne.n	80041ea <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2224      	movs	r2, #36	@ 0x24
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80041b4:	89fb      	ldrh	r3, [r7, #14]
 80041b6:	f023 030f 	bic.w	r3, r3, #15
 80041ba:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	b29a      	uxth	r2, r3
 80041c0:	89fb      	ldrh	r3, [r7, #14]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	89fa      	ldrh	r2, [r7, #14]
 80041cc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80041ea:	2302      	movs	r3, #2
  }
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e101      	b.n	800440e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7fd ff5d 	bl	80020e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2203      	movs	r2, #3
 800422e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004238:	d102      	bne.n	8004240 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f002 f8d5 	bl	80063f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	7c1a      	ldrb	r2, [r3, #16]
 8004252:	f88d 2000 	strb.w	r2, [sp]
 8004256:	3304      	adds	r3, #4
 8004258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800425a:	f002 f867 	bl	800632c <USB_CoreInit>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0ce      	b.n	800440e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2100      	movs	r1, #0
 8004276:	4618      	mov	r0, r3
 8004278:	f002 f8cd 	bl	8006416 <USB_SetCurrentMode>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0bf      	b.n	800440e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]
 8004292:	e04a      	b.n	800432a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	3315      	adds	r3, #21
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042a8:	7bfa      	ldrb	r2, [r7, #15]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	3314      	adds	r3, #20
 80042b8:	7bfa      	ldrb	r2, [r7, #15]
 80042ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	b298      	uxth	r0, r3
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	332e      	adds	r3, #46	@ 0x2e
 80042d0:	4602      	mov	r2, r0
 80042d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042d4:	7bfa      	ldrb	r2, [r7, #15]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	3318      	adds	r3, #24
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	331c      	adds	r3, #28
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042fc:	7bfa      	ldrb	r2, [r7, #15]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	3320      	adds	r3, #32
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	3324      	adds	r3, #36	@ 0x24
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	3301      	adds	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	791b      	ldrb	r3, [r3, #4]
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	429a      	cmp	r2, r3
 8004332:	d3af      	bcc.n	8004294 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
 8004338:	e044      	b.n	80043c4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800433a:	7bfa      	ldrb	r2, [r7, #15]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004350:	7bfa      	ldrb	r2, [r7, #15]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004362:	7bfa      	ldrb	r2, [r7, #15]
 8004364:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004378:	2200      	movs	r2, #0
 800437a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800437c:	7bfa      	ldrb	r2, [r7, #15]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043a8:	7bfa      	ldrb	r2, [r7, #15]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	3301      	adds	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	791b      	ldrb	r3, [r3, #4]
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d3b5      	bcc.n	800433a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	7c1a      	ldrb	r2, [r3, #16]
 80043d6:	f88d 2000 	strb.w	r2, [sp]
 80043da:	3304      	adds	r3, #4
 80043dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043de:	f002 f867 	bl	80064b0 <USB_DevInit>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e00c      	b.n	800440e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f002 fa2f 	bl	800686a <USB_DevDisconnect>

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e267      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d075      	beq.n	8004522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004436:	4b88      	ldr	r3, [pc, #544]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b04      	cmp	r3, #4
 8004440:	d00c      	beq.n	800445c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004442:	4b85      	ldr	r3, [pc, #532]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444a:	2b08      	cmp	r3, #8
 800444c:	d112      	bne.n	8004474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800444e:	4b82      	ldr	r3, [pc, #520]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800445a:	d10b      	bne.n	8004474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445c:	4b7e      	ldr	r3, [pc, #504]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d05b      	beq.n	8004520 <HAL_RCC_OscConfig+0x108>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d157      	bne.n	8004520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e242      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800447c:	d106      	bne.n	800448c <HAL_RCC_OscConfig+0x74>
 800447e:	4b76      	ldr	r3, [pc, #472]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a75      	ldr	r2, [pc, #468]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	e01d      	b.n	80044c8 <HAL_RCC_OscConfig+0xb0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004494:	d10c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x98>
 8004496:	4b70      	ldr	r3, [pc, #448]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a6f      	ldr	r2, [pc, #444]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 800449c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e00b      	b.n	80044c8 <HAL_RCC_OscConfig+0xb0>
 80044b0:	4b69      	ldr	r3, [pc, #420]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a68      	ldr	r2, [pc, #416]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	4b66      	ldr	r3, [pc, #408]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a65      	ldr	r2, [pc, #404]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d013      	beq.n	80044f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fe fa30 	bl	8002934 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fe fa2c 	bl	8002934 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	@ 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e207      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0xc0>
 80044f6:	e014      	b.n	8004522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fe fa1c 	bl	8002934 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004500:	f7fe fa18 	bl	8002934 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	@ 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e1f3      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	4b51      	ldr	r3, [pc, #324]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0xe8>
 800451e:	e000      	b.n	8004522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d063      	beq.n	80045f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800452e:	4b4a      	ldr	r3, [pc, #296]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453a:	4b47      	ldr	r3, [pc, #284]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004542:	2b08      	cmp	r3, #8
 8004544:	d11c      	bne.n	8004580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004546:	4b44      	ldr	r3, [pc, #272]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d116      	bne.n	8004580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004552:	4b41      	ldr	r3, [pc, #260]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_RCC_OscConfig+0x152>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d001      	beq.n	800456a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e1c7      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456a:	4b3b      	ldr	r3, [pc, #236]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4937      	ldr	r1, [pc, #220]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 800457a:	4313      	orrs	r3, r2
 800457c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457e:	e03a      	b.n	80045f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d020      	beq.n	80045ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004588:	4b34      	ldr	r3, [pc, #208]	@ (800465c <HAL_RCC_OscConfig+0x244>)
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458e:	f7fe f9d1 	bl	8002934 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004596:	f7fe f9cd 	bl	8002934 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e1a8      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b4:	4b28      	ldr	r3, [pc, #160]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4925      	ldr	r1, [pc, #148]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	600b      	str	r3, [r1, #0]
 80045c8:	e015      	b.n	80045f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ca:	4b24      	ldr	r3, [pc, #144]	@ (800465c <HAL_RCC_OscConfig+0x244>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fe f9b0 	bl	8002934 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d8:	f7fe f9ac 	bl	8002934 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e187      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d036      	beq.n	8004670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d016      	beq.n	8004638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800460a:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <HAL_RCC_OscConfig+0x248>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fe f990 	bl	8002934 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004618:	f7fe f98c 	bl	8002934 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e167      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 800462c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x200>
 8004636:	e01b      	b.n	8004670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004638:	4b09      	ldr	r3, [pc, #36]	@ (8004660 <HAL_RCC_OscConfig+0x248>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463e:	f7fe f979 	bl	8002934 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004644:	e00e      	b.n	8004664 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004646:	f7fe f975 	bl	8002934 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d907      	bls.n	8004664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e150      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
 8004658:	40023800 	.word	0x40023800
 800465c:	42470000 	.word	0x42470000
 8004660:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004664:	4b88      	ldr	r3, [pc, #544]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ea      	bne.n	8004646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8097 	beq.w	80047ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800467e:	2300      	movs	r3, #0
 8004680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004682:	4b81      	ldr	r3, [pc, #516]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10f      	bne.n	80046ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	4b7d      	ldr	r3, [pc, #500]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	4a7c      	ldr	r2, [pc, #496]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800469c:	6413      	str	r3, [r2, #64]	@ 0x40
 800469e:	4b7a      	ldr	r3, [pc, #488]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046aa:	2301      	movs	r3, #1
 80046ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ae:	4b77      	ldr	r3, [pc, #476]	@ (800488c <HAL_RCC_OscConfig+0x474>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d118      	bne.n	80046ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ba:	4b74      	ldr	r3, [pc, #464]	@ (800488c <HAL_RCC_OscConfig+0x474>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a73      	ldr	r2, [pc, #460]	@ (800488c <HAL_RCC_OscConfig+0x474>)
 80046c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c6:	f7fe f935 	bl	8002934 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ce:	f7fe f931 	bl	8002934 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e10c      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e0:	4b6a      	ldr	r3, [pc, #424]	@ (800488c <HAL_RCC_OscConfig+0x474>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d106      	bne.n	8004702 <HAL_RCC_OscConfig+0x2ea>
 80046f4:	4b64      	ldr	r3, [pc, #400]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f8:	4a63      	ldr	r2, [pc, #396]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004700:	e01c      	b.n	800473c <HAL_RCC_OscConfig+0x324>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b05      	cmp	r3, #5
 8004708:	d10c      	bne.n	8004724 <HAL_RCC_OscConfig+0x30c>
 800470a:	4b5f      	ldr	r3, [pc, #380]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470e:	4a5e      	ldr	r2, [pc, #376]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004710:	f043 0304 	orr.w	r3, r3, #4
 8004714:	6713      	str	r3, [r2, #112]	@ 0x70
 8004716:	4b5c      	ldr	r3, [pc, #368]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	4a5b      	ldr	r2, [pc, #364]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6713      	str	r3, [r2, #112]	@ 0x70
 8004722:	e00b      	b.n	800473c <HAL_RCC_OscConfig+0x324>
 8004724:	4b58      	ldr	r3, [pc, #352]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004728:	4a57      	ldr	r2, [pc, #348]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004730:	4b55      	ldr	r3, [pc, #340]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004734:	4a54      	ldr	r2, [pc, #336]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004736:	f023 0304 	bic.w	r3, r3, #4
 800473a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d015      	beq.n	8004770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fe f8f6 	bl	8002934 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474a:	e00a      	b.n	8004762 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800474c:	f7fe f8f2 	bl	8002934 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e0cb      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004762:	4b49      	ldr	r3, [pc, #292]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0ee      	beq.n	800474c <HAL_RCC_OscConfig+0x334>
 800476e:	e014      	b.n	800479a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004770:	f7fe f8e0 	bl	8002934 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004776:	e00a      	b.n	800478e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fe f8dc 	bl	8002934 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e0b5      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478e:	4b3e      	ldr	r3, [pc, #248]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1ee      	bne.n	8004778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800479a:	7dfb      	ldrb	r3, [r7, #23]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d105      	bne.n	80047ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a0:	4b39      	ldr	r3, [pc, #228]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80047a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a4:	4a38      	ldr	r2, [pc, #224]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80047a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80a1 	beq.w	80048f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047b6:	4b34      	ldr	r3, [pc, #208]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d05c      	beq.n	800487c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d141      	bne.n	800484e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ca:	4b31      	ldr	r3, [pc, #196]	@ (8004890 <HAL_RCC_OscConfig+0x478>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fe f8b0 	bl	8002934 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d8:	f7fe f8ac 	bl	8002934 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e087      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	4b27      	ldr	r3, [pc, #156]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69da      	ldr	r2, [r3, #28]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	019b      	lsls	r3, r3, #6
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	3b01      	subs	r3, #1
 8004810:	041b      	lsls	r3, r3, #16
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004818:	061b      	lsls	r3, r3, #24
 800481a:	491b      	ldr	r1, [pc, #108]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004820:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <HAL_RCC_OscConfig+0x478>)
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004826:	f7fe f885 	bl	8002934 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482e:	f7fe f881 	bl	8002934 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e05c      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004840:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x416>
 800484c:	e054      	b.n	80048f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484e:	4b10      	ldr	r3, [pc, #64]	@ (8004890 <HAL_RCC_OscConfig+0x478>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fe f86e 	bl	8002934 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485c:	f7fe f86a 	bl	8002934 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e045      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x444>
 800487a:	e03d      	b.n	80048f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d107      	bne.n	8004894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e038      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
 8004888:	40023800 	.word	0x40023800
 800488c:	40007000 	.word	0x40007000
 8004890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004894:	4b1b      	ldr	r3, [pc, #108]	@ (8004904 <HAL_RCC_OscConfig+0x4ec>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d028      	beq.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d121      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d11a      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048c4:	4013      	ands	r3, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d111      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	3b01      	subs	r3, #1
 80048de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d107      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800

08004908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0cc      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800491c:	4b68      	ldr	r3, [pc, #416]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d90c      	bls.n	8004944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b65      	ldr	r3, [pc, #404]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b63      	ldr	r3, [pc, #396]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e0b8      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d020      	beq.n	8004992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800495c:	4b59      	ldr	r3, [pc, #356]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4a58      	ldr	r2, [pc, #352]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004974:	4b53      	ldr	r3, [pc, #332]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4a52      	ldr	r2, [pc, #328]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800497e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004980:	4b50      	ldr	r3, [pc, #320]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	494d      	ldr	r1, [pc, #308]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d044      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d107      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a6:	4b47      	ldr	r3, [pc, #284]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d119      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e07f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d003      	beq.n	80049c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e06f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e067      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049e6:	4b37      	ldr	r3, [pc, #220]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f023 0203 	bic.w	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	4934      	ldr	r1, [pc, #208]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f8:	f7fd ff9c 	bl	8002934 <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a00:	f7fd ff98 	bl	8002934 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e04f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 020c 	and.w	r2, r3, #12
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d1eb      	bne.n	8004a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a28:	4b25      	ldr	r3, [pc, #148]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d20c      	bcs.n	8004a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a36:	4b22      	ldr	r3, [pc, #136]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b20      	ldr	r3, [pc, #128]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e032      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a5c:	4b19      	ldr	r3, [pc, #100]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4916      	ldr	r1, [pc, #88]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7a:	4b12      	ldr	r3, [pc, #72]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	490e      	ldr	r1, [pc, #56]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a8e:	f000 f821 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8004a92:	4602      	mov	r2, r0
 8004a94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	490a      	ldr	r1, [pc, #40]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa0:	5ccb      	ldrb	r3, [r1, r3]
 8004aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa6:	4a09      	ldr	r2, [pc, #36]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aaa:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fd fefc 	bl	80028ac <HAL_InitTick>

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40023c00 	.word	0x40023c00
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	08007474 	.word	0x08007474
 8004acc:	20000000 	.word	0x20000000
 8004ad0:	2000000c 	.word	0x2000000c

08004ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad8:	b094      	sub	sp, #80	@ 0x50
 8004ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aec:	4b79      	ldr	r3, [pc, #484]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d00d      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x40>
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	f200 80e1 	bhi.w	8004cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0x34>
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d003      	beq.n	8004b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b06:	e0db      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b08:	4b73      	ldr	r3, [pc, #460]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004b0c:	e0db      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b0e:	4b73      	ldr	r3, [pc, #460]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0x208>)
 8004b10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b12:	e0d8      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b14:	4b6f      	ldr	r3, [pc, #444]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d063      	beq.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	099b      	lsrs	r3, r3, #6
 8004b30:	2200      	movs	r2, #0
 8004b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b3e:	2300      	movs	r3, #0
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b46:	4622      	mov	r2, r4
 8004b48:	462b      	mov	r3, r5
 8004b4a:	f04f 0000 	mov.w	r0, #0
 8004b4e:	f04f 0100 	mov.w	r1, #0
 8004b52:	0159      	lsls	r1, r3, #5
 8004b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b58:	0150      	lsls	r0, r2, #5
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4621      	mov	r1, r4
 8004b60:	1a51      	subs	r1, r2, r1
 8004b62:	6139      	str	r1, [r7, #16]
 8004b64:	4629      	mov	r1, r5
 8004b66:	eb63 0301 	sbc.w	r3, r3, r1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b78:	4659      	mov	r1, fp
 8004b7a:	018b      	lsls	r3, r1, #6
 8004b7c:	4651      	mov	r1, sl
 8004b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b82:	4651      	mov	r1, sl
 8004b84:	018a      	lsls	r2, r1, #6
 8004b86:	4651      	mov	r1, sl
 8004b88:	ebb2 0801 	subs.w	r8, r2, r1
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ba6:	4690      	mov	r8, r2
 8004ba8:	4699      	mov	r9, r3
 8004baa:	4623      	mov	r3, r4
 8004bac:	eb18 0303 	adds.w	r3, r8, r3
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	462b      	mov	r3, r5
 8004bb4:	eb49 0303 	adc.w	r3, r9, r3
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	024b      	lsls	r3, r1, #9
 8004bca:	4621      	mov	r1, r4
 8004bcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	024a      	lsls	r2, r1, #9
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bda:	2200      	movs	r2, #0
 8004bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004be0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004be4:	f7fb fb5c 	bl	80002a0 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4613      	mov	r3, r2
 8004bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf0:	e058      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf2:	4b38      	ldr	r3, [pc, #224]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	099b      	lsrs	r3, r3, #6
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c02:	623b      	str	r3, [r7, #32]
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	464b      	mov	r3, r9
 8004c10:	f04f 0000 	mov.w	r0, #0
 8004c14:	f04f 0100 	mov.w	r1, #0
 8004c18:	0159      	lsls	r1, r3, #5
 8004c1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c1e:	0150      	lsls	r0, r2, #5
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4641      	mov	r1, r8
 8004c26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c44:	ebb2 040a 	subs.w	r4, r2, sl
 8004c48:	eb63 050b 	sbc.w	r5, r3, fp
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	00eb      	lsls	r3, r5, #3
 8004c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c5a:	00e2      	lsls	r2, r4, #3
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	461d      	mov	r5, r3
 8004c60:	4643      	mov	r3, r8
 8004c62:	18e3      	adds	r3, r4, r3
 8004c64:	603b      	str	r3, [r7, #0]
 8004c66:	464b      	mov	r3, r9
 8004c68:	eb45 0303 	adc.w	r3, r5, r3
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	028b      	lsls	r3, r1, #10
 8004c7e:	4621      	mov	r1, r4
 8004c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c84:	4621      	mov	r1, r4
 8004c86:	028a      	lsls	r2, r1, #10
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8e:	2200      	movs	r2, #0
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	61fa      	str	r2, [r7, #28]
 8004c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c98:	f7fb fb02 	bl	80002a0 <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004cb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cc0:	4b05      	ldr	r3, [pc, #20]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3750      	adds	r7, #80	@ 0x50
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	00f42400 	.word	0x00f42400
 8004cdc:	007a1200 	.word	0x007a1200

08004ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	@ (8004cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000000 	.word	0x20000000

08004cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cfc:	f7ff fff0 	bl	8004ce0 <HAL_RCC_GetHCLKFreq>
 8004d00:	4602      	mov	r2, r0
 8004d02:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	0a9b      	lsrs	r3, r3, #10
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	4903      	ldr	r1, [pc, #12]	@ (8004d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0e:	5ccb      	ldrb	r3, [r1, r3]
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	08007484 	.word	0x08007484

08004d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d24:	f7ff ffdc 	bl	8004ce0 <HAL_RCC_GetHCLKFreq>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	4b05      	ldr	r3, [pc, #20]	@ (8004d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	0b5b      	lsrs	r3, r3, #13
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	4903      	ldr	r1, [pc, #12]	@ (8004d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d36:	5ccb      	ldrb	r3, [r1, r3]
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40023800 	.word	0x40023800
 8004d44:	08007484 	.word	0x08007484

08004d48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10b      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d075      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d7c:	4b91      	ldr	r3, [pc, #580]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d82:	f7fd fdd7 	bl	8002934 <HAL_GetTick>
 8004d86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d8a:	f7fd fdd3 	bl	8002934 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e189      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d9c:	4b8a      	ldr	r3, [pc, #552]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f0      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d009      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	019a      	lsls	r2, r3, #6
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	071b      	lsls	r3, r3, #28
 8004dc0:	4981      	ldr	r1, [pc, #516]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01f      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dd4:	4b7c      	ldr	r3, [pc, #496]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dda:	0f1b      	lsrs	r3, r3, #28
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	019a      	lsls	r2, r3, #6
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	061b      	lsls	r3, r3, #24
 8004dee:	431a      	orrs	r2, r3
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	071b      	lsls	r3, r3, #28
 8004df4:	4974      	ldr	r1, [pc, #464]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004dfc:	4b72      	ldr	r3, [pc, #456]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e02:	f023 021f 	bic.w	r2, r3, #31
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	496e      	ldr	r1, [pc, #440]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00d      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	019a      	lsls	r2, r3, #6
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	061b      	lsls	r3, r3, #24
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	071b      	lsls	r3, r3, #28
 8004e34:	4964      	ldr	r1, [pc, #400]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e3c:	4b61      	ldr	r3, [pc, #388]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e42:	f7fd fd77 	bl	8002934 <HAL_GetTick>
 8004e46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e4a:	f7fd fd73 	bl	8002934 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e129      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e5c:	4b5a      	ldr	r3, [pc, #360]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d079      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e80:	4b52      	ldr	r3, [pc, #328]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e86:	f7fd fd55 	bl	8002934 <HAL_GetTick>
 8004e8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e8e:	f7fd fd51 	bl	8002934 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e107      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ea0:	4b49      	ldr	r3, [pc, #292]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eac:	d0ef      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d020      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004eba:	4b43      	ldr	r3, [pc, #268]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec0:	0f1b      	lsrs	r3, r3, #28
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	019a      	lsls	r2, r3, #6
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	061b      	lsls	r3, r3, #24
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	071b      	lsls	r3, r3, #28
 8004eda:	493b      	ldr	r1, [pc, #236]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ee2:	4b39      	ldr	r3, [pc, #228]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ee8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	4934      	ldr	r1, [pc, #208]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01e      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f08:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0e:	0e1b      	lsrs	r3, r3, #24
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	019a      	lsls	r2, r3, #6
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	061b      	lsls	r3, r3, #24
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	071b      	lsls	r3, r3, #28
 8004f28:	4927      	ldr	r1, [pc, #156]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f30:	4b25      	ldr	r3, [pc, #148]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	4922      	ldr	r1, [pc, #136]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f46:	4b21      	ldr	r3, [pc, #132]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f4c:	f7fd fcf2 	bl	8002934 <HAL_GetTick>
 8004f50:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f54:	f7fd fcee 	bl	8002934 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e0a4      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f66:	4b18      	ldr	r3, [pc, #96]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f72:	d1ef      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 808b 	beq.w	8005098 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	4b10      	ldr	r3, [pc, #64]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f92:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004faa:	f7fd fcc3 	bl	8002934 <HAL_GetTick>
 8004fae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fb0:	e010      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fb2:	f7fd fcbf 	bl	8002934 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d909      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e075      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004fc4:	42470068 	.word	0x42470068
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	42470070 	.word	0x42470070
 8004fd0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fd4:	4b38      	ldr	r3, [pc, #224]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0e8      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fe0:	4b36      	ldr	r3, [pc, #216]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fe8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d02f      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d028      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005006:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005008:	4b2d      	ldr	r3, [pc, #180]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800500e:	4b2c      	ldr	r3, [pc, #176]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005014:	4a29      	ldr	r2, [pc, #164]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800501a:	4b28      	ldr	r3, [pc, #160]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d114      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005026:	f7fd fc85 	bl	8002934 <HAL_GetTick>
 800502a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502c:	e00a      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fd fc81 	bl	8002934 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d901      	bls.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e035      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005044:	4b1d      	ldr	r3, [pc, #116]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0ee      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005058:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800505c:	d10d      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800505e:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800506e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005072:	4912      	ldr	r1, [pc, #72]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005074:	4313      	orrs	r3, r2
 8005076:	608b      	str	r3, [r1, #8]
 8005078:	e005      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800507a:	4b10      	ldr	r3, [pc, #64]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	4a0f      	ldr	r2, [pc, #60]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005080:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005084:	6093      	str	r3, [r2, #8]
 8005086:	4b0d      	ldr	r3, [pc, #52]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005088:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005092:	490a      	ldr	r1, [pc, #40]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005094:	4313      	orrs	r3, r2
 8005096:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80050aa:	4b06      	ldr	r3, [pc, #24]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80050ac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40007000 	.word	0x40007000
 80050bc:	40023800 	.word	0x40023800
 80050c0:	42470e40 	.word	0x42470e40
 80050c4:	424711e0 	.word	0x424711e0

080050c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e073      	b.n	80051c6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	7f5b      	ldrb	r3, [r3, #29]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fc fefe 	bl	8001ef0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b10      	cmp	r3, #16
 8005106:	d055      	beq.n	80051b4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	22ca      	movs	r2, #202	@ 0xca
 800510e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2253      	movs	r2, #83	@ 0x53
 8005116:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fa49 	bl	80055b0 <RTC_EnterInitMode>
 800511e:	4603      	mov	r3, r0
 8005120:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d12c      	bne.n	8005182 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005136:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800513a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6899      	ldr	r1, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	68d2      	ldr	r2, [r2, #12]
 8005162:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6919      	ldr	r1, [r3, #16]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	041a      	lsls	r2, r3, #16
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fa50 	bl	800561e <RTC_ExitInitMode>
 800517e:	4603      	mov	r3, r0
 8005180:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d110      	bne.n	80051aa <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005196:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	22ff      	movs	r2, #255	@ 0xff
 80051b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80051b2:	e001      	b.n	80051b8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051ce:	b590      	push	{r4, r7, lr}
 80051d0:	b087      	sub	sp, #28
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	7f1b      	ldrb	r3, [r3, #28]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_RTC_SetTime+0x1c>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e087      	b.n	80052fa <HAL_RTC_SetTime+0x12c>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2202      	movs	r2, #2
 80051f4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d126      	bne.n	800524a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d102      	bne.n	8005210 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2200      	movs	r2, #0
 800520e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fa27 	bl	8005668 <RTC_ByteToBcd2>
 800521a:	4603      	mov	r3, r0
 800521c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	785b      	ldrb	r3, [r3, #1]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fa20 	bl	8005668 <RTC_ByteToBcd2>
 8005228:	4603      	mov	r3, r0
 800522a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800522c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	789b      	ldrb	r3, [r3, #2]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fa18 	bl	8005668 <RTC_ByteToBcd2>
 8005238:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800523a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	78db      	ldrb	r3, [r3, #3]
 8005242:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	e018      	b.n	800527c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2200      	movs	r2, #0
 800525c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	785b      	ldrb	r3, [r3, #1]
 8005268:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800526a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005270:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	78db      	ldrb	r3, [r3, #3]
 8005276:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	22ca      	movs	r2, #202	@ 0xca
 8005282:	625a      	str	r2, [r3, #36]	@ 0x24
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2253      	movs	r2, #83	@ 0x53
 800528a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f98f 	bl	80055b0 <RTC_EnterInitMode>
 8005292:	4603      	mov	r3, r0
 8005294:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005296:	7cfb      	ldrb	r3, [r7, #19]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d120      	bne.n	80052de <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80052a6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80052aa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6899      	ldr	r1, [r3, #8]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f9a2 	bl	800561e <RTC_ExitInitMode>
 80052da:	4603      	mov	r3, r0
 80052dc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80052de:	7cfb      	ldrb	r3, [r7, #19]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d102      	bne.n	80052ea <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	22ff      	movs	r2, #255	@ 0xff
 80052f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]

  return status;
 80052f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd90      	pop	{r4, r7, pc}

08005302 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005334:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005338:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005344:	b2da      	uxtb	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	0a1b      	lsrs	r3, r3, #8
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005362:	b2da      	uxtb	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	0d9b      	lsrs	r3, r3, #22
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	b2da      	uxtb	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d11a      	bne.n	80053b4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f98e 	bl	80056a4 <RTC_Bcd2ToByte>
 8005388:	4603      	mov	r3, r0
 800538a:	461a      	mov	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	4618      	mov	r0, r3
 8005396:	f000 f985 	bl	80056a4 <RTC_Bcd2ToByte>
 800539a:	4603      	mov	r3, r0
 800539c:	461a      	mov	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	789b      	ldrb	r3, [r3, #2]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f97c 	bl	80056a4 <RTC_Bcd2ToByte>
 80053ac:	4603      	mov	r3, r0
 80053ae:	461a      	mov	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053be:	b590      	push	{r4, r7, lr}
 80053c0:	b087      	sub	sp, #28
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	7f1b      	ldrb	r3, [r3, #28]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_RTC_SetDate+0x1c>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e071      	b.n	80054be <HAL_RTC_SetDate+0x100>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2202      	movs	r2, #2
 80053e4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10e      	bne.n	800540a <HAL_RTC_SetDate+0x4c>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	785b      	ldrb	r3, [r3, #1]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	f023 0310 	bic.w	r3, r3, #16
 8005400:	b2db      	uxtb	r3, r3
 8005402:	330a      	adds	r3, #10
 8005404:	b2da      	uxtb	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d11c      	bne.n	800544a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	78db      	ldrb	r3, [r3, #3]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f927 	bl	8005668 <RTC_ByteToBcd2>
 800541a:	4603      	mov	r3, r0
 800541c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f920 	bl	8005668 <RTC_ByteToBcd2>
 8005428:	4603      	mov	r3, r0
 800542a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800542c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	789b      	ldrb	r3, [r3, #2]
 8005432:	4618      	mov	r0, r3
 8005434:	f000 f918 	bl	8005668 <RTC_ByteToBcd2>
 8005438:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800543a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	e00e      	b.n	8005468 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	78db      	ldrb	r3, [r3, #3]
 800544e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005456:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800545c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	22ca      	movs	r2, #202	@ 0xca
 800546e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2253      	movs	r2, #83	@ 0x53
 8005476:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f899 	bl	80055b0 <RTC_EnterInitMode>
 800547e:	4603      	mov	r3, r0
 8005480:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005482:	7cfb      	ldrb	r3, [r7, #19]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10c      	bne.n	80054a2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005492:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005496:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f8c0 	bl	800561e <RTC_ExitInitMode>
 800549e:	4603      	mov	r3, r0
 80054a0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80054a2:	7cfb      	ldrb	r3, [r7, #19]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	22ff      	movs	r2, #255	@ 0xff
 80054b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	771a      	strb	r2, [r3, #28]

  return status;
 80054bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd90      	pop	{r4, r7, pc}

080054c6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b086      	sub	sp, #24
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80054e0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80054e4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	0a1b      	lsrs	r3, r3, #8
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	0b5b      	lsrs	r3, r3, #13
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	b2da      	uxtb	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d11a      	bne.n	800555a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	78db      	ldrb	r3, [r3, #3]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f8bb 	bl	80056a4 <RTC_Bcd2ToByte>
 800552e:	4603      	mov	r3, r0
 8005530:	461a      	mov	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	4618      	mov	r0, r3
 800553c:	f000 f8b2 	bl	80056a4 <RTC_Bcd2ToByte>
 8005540:	4603      	mov	r3, r0
 8005542:	461a      	mov	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	789b      	ldrb	r3, [r3, #2]
 800554c:	4618      	mov	r0, r3
 800554e:	f000 f8a9 	bl	80056a4 <RTC_Bcd2ToByte>
 8005552:	4603      	mov	r3, r0
 8005554:	461a      	mov	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a0d      	ldr	r2, [pc, #52]	@ (80055ac <HAL_RTC_WaitForSynchro+0x48>)
 8005576:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005578:	f7fd f9dc 	bl	8002934 <HAL_GetTick>
 800557c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800557e:	e009      	b.n	8005594 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005580:	f7fd f9d8 	bl	8002934 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800558e:	d901      	bls.n	8005594 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e007      	b.n	80055a4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0ee      	beq.n	8005580 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	00017f5f 	.word	0x00017f5f

080055b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d122      	bne.n	8005614 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80055dc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055de:	f7fd f9a9 	bl	8002934 <HAL_GetTick>
 80055e2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80055e4:	e00c      	b.n	8005600 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055e6:	f7fd f9a5 	bl	8002934 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055f4:	d904      	bls.n	8005600 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2204      	movs	r2, #4
 80055fa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <RTC_EnterInitMode+0x64>
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d1e8      	bne.n	80055e6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005638:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff ff8b 	bl	8005564 <HAL_RTC_WaitForSynchro>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2204      	movs	r2, #4
 8005658:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800565e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005676:	e005      	b.n	8005684 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	3b0a      	subs	r3, #10
 8005682:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	2b09      	cmp	r3, #9
 8005688:	d8f6      	bhi.n	8005678 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	b2da      	uxtb	r2, r3
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	4313      	orrs	r3, r2
 8005696:	b2db      	uxtb	r3, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	091b      	lsrs	r3, r3, #4
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	4413      	add	r3, r2
 80056d2:	b2db      	uxtb	r3, r3
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e07b      	b.n	80057ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d108      	bne.n	800570c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005702:	d009      	beq.n	8005718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	61da      	str	r2, [r3, #28]
 800570a:	e005      	b.n	8005718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fc fc06 	bl	8001f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800574e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579c:	ea42 0103 	orr.w	r1, r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	0c1b      	lsrs	r3, r3, #16
 80057b6:	f003 0104 	and.w	r1, r3, #4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057be:	f003 0210 	and.w	r2, r3, #16
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e041      	b.n	8005888 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7fc fbfb 	bl	8002014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2202      	movs	r2, #2
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3304      	adds	r3, #4
 800582e:	4619      	mov	r1, r3
 8005830:	4610      	mov	r0, r2
 8005832:	f000 f8f5 	bl	8005a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIM_ConfigClockSource+0x1c>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e0b4      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x186>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058e4:	d03e      	beq.n	8005964 <HAL_TIM_ConfigClockSource+0xd4>
 80058e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ea:	f200 8087 	bhi.w	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 80058ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058f2:	f000 8086 	beq.w	8005a02 <HAL_TIM_ConfigClockSource+0x172>
 80058f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058fa:	d87f      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 80058fc:	2b70      	cmp	r3, #112	@ 0x70
 80058fe:	d01a      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0xa6>
 8005900:	2b70      	cmp	r3, #112	@ 0x70
 8005902:	d87b      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 8005904:	2b60      	cmp	r3, #96	@ 0x60
 8005906:	d050      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x11a>
 8005908:	2b60      	cmp	r3, #96	@ 0x60
 800590a:	d877      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 800590c:	2b50      	cmp	r3, #80	@ 0x50
 800590e:	d03c      	beq.n	800598a <HAL_TIM_ConfigClockSource+0xfa>
 8005910:	2b50      	cmp	r3, #80	@ 0x50
 8005912:	d873      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 8005914:	2b40      	cmp	r3, #64	@ 0x40
 8005916:	d058      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0x13a>
 8005918:	2b40      	cmp	r3, #64	@ 0x40
 800591a:	d86f      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 800591c:	2b30      	cmp	r3, #48	@ 0x30
 800591e:	d064      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0x15a>
 8005920:	2b30      	cmp	r3, #48	@ 0x30
 8005922:	d86b      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 8005924:	2b20      	cmp	r3, #32
 8005926:	d060      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0x15a>
 8005928:	2b20      	cmp	r3, #32
 800592a:	d867      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d05c      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0x15a>
 8005930:	2b10      	cmp	r3, #16
 8005932:	d05a      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0x15a>
 8005934:	e062      	b.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005946:	f000 f991 	bl	8005c6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	609a      	str	r2, [r3, #8]
      break;
 8005962:	e04f      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005974:	f000 f97a 	bl	8005c6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005986:	609a      	str	r2, [r3, #8]
      break;
 8005988:	e03c      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005996:	461a      	mov	r2, r3
 8005998:	f000 f8ee 	bl	8005b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2150      	movs	r1, #80	@ 0x50
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f947 	bl	8005c36 <TIM_ITRx_SetConfig>
      break;
 80059a8:	e02c      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059b6:	461a      	mov	r2, r3
 80059b8:	f000 f90d 	bl	8005bd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2160      	movs	r1, #96	@ 0x60
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f937 	bl	8005c36 <TIM_ITRx_SetConfig>
      break;
 80059c8:	e01c      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d6:	461a      	mov	r2, r3
 80059d8:	f000 f8ce 	bl	8005b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2140      	movs	r1, #64	@ 0x40
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 f927 	bl	8005c36 <TIM_ITRx_SetConfig>
      break;
 80059e8:	e00c      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4619      	mov	r1, r3
 80059f4:	4610      	mov	r0, r2
 80059f6:	f000 f91e 	bl	8005c36 <TIM_ITRx_SetConfig>
      break;
 80059fa:	e003      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005a00:	e000      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a46      	ldr	r2, [pc, #280]	@ (8005b4c <TIM_Base_SetConfig+0x12c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d013      	beq.n	8005a60 <TIM_Base_SetConfig+0x40>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a3e:	d00f      	beq.n	8005a60 <TIM_Base_SetConfig+0x40>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a43      	ldr	r2, [pc, #268]	@ (8005b50 <TIM_Base_SetConfig+0x130>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <TIM_Base_SetConfig+0x40>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a42      	ldr	r2, [pc, #264]	@ (8005b54 <TIM_Base_SetConfig+0x134>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_Base_SetConfig+0x40>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a41      	ldr	r2, [pc, #260]	@ (8005b58 <TIM_Base_SetConfig+0x138>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_Base_SetConfig+0x40>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a40      	ldr	r2, [pc, #256]	@ (8005b5c <TIM_Base_SetConfig+0x13c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d108      	bne.n	8005a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a35      	ldr	r2, [pc, #212]	@ (8005b4c <TIM_Base_SetConfig+0x12c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d02b      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a80:	d027      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a32      	ldr	r2, [pc, #200]	@ (8005b50 <TIM_Base_SetConfig+0x130>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d023      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a31      	ldr	r2, [pc, #196]	@ (8005b54 <TIM_Base_SetConfig+0x134>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01f      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a30      	ldr	r2, [pc, #192]	@ (8005b58 <TIM_Base_SetConfig+0x138>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01b      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8005b5c <TIM_Base_SetConfig+0x13c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d017      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8005b60 <TIM_Base_SetConfig+0x140>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a2d      	ldr	r2, [pc, #180]	@ (8005b64 <TIM_Base_SetConfig+0x144>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00f      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8005b68 <TIM_Base_SetConfig+0x148>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2b      	ldr	r2, [pc, #172]	@ (8005b6c <TIM_Base_SetConfig+0x14c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8005b70 <TIM_Base_SetConfig+0x150>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a29      	ldr	r2, [pc, #164]	@ (8005b74 <TIM_Base_SetConfig+0x154>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d108      	bne.n	8005ae4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a10      	ldr	r2, [pc, #64]	@ (8005b4c <TIM_Base_SetConfig+0x12c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_Base_SetConfig+0xf8>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a12      	ldr	r2, [pc, #72]	@ (8005b5c <TIM_Base_SetConfig+0x13c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d103      	bne.n	8005b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d105      	bne.n	8005b3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f023 0201 	bic.w	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	611a      	str	r2, [r3, #16]
  }
}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	40010000 	.word	0x40010000
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800
 8005b58:	40000c00 	.word	0x40000c00
 8005b5c:	40010400 	.word	0x40010400
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40014400 	.word	0x40014400
 8005b68:	40014800 	.word	0x40014800
 8005b6c:	40001800 	.word	0x40001800
 8005b70:	40001c00 	.word	0x40001c00
 8005b74:	40002000 	.word	0x40002000

08005b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f023 0201 	bic.w	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f023 030a 	bic.w	r3, r3, #10
 8005bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	621a      	str	r2, [r3, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b087      	sub	sp, #28
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	f023 0210 	bic.w	r2, r3, #16
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	031b      	lsls	r3, r3, #12
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f043 0307 	orr.w	r3, r3, #7
 8005c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	609a      	str	r2, [r3, #8]
}
 8005c60:	bf00      	nop
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	021a      	lsls	r2, r3, #8
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	609a      	str	r2, [r3, #8]
}
 8005ca0:	bf00      	nop
 8005ca2:	371c      	adds	r7, #28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e05a      	b.n	8005d7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a21      	ldr	r2, [pc, #132]	@ (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d022      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d10:	d01d      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1d      	ldr	r2, [pc, #116]	@ (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d018      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1b      	ldr	r2, [pc, #108]	@ (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00e      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a18      	ldr	r2, [pc, #96]	@ (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d009      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a17      	ldr	r2, [pc, #92]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a15      	ldr	r2, [pc, #84]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d10c      	bne.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40010000 	.word	0x40010000
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40000800 	.word	0x40000800
 8005d94:	40000c00 	.word	0x40000c00
 8005d98:	40010400 	.word	0x40010400
 8005d9c:	40014000 	.word	0x40014000
 8005da0:	40001800 	.word	0x40001800

08005da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e042      	b.n	8005e3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fc f942 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2224      	movs	r2, #36	@ 0x24
 8005dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f82b 	bl	8005e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e48:	b0c0      	sub	sp, #256	@ 0x100
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e60:	68d9      	ldr	r1, [r3, #12]
 8005e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	ea40 0301 	orr.w	r3, r0, r1
 8005e6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	431a      	orrs	r2, r3
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e9c:	f021 010c 	bic.w	r1, r1, #12
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005eaa:	430b      	orrs	r3, r1
 8005eac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebe:	6999      	ldr	r1, [r3, #24]
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	ea40 0301 	orr.w	r3, r0, r1
 8005eca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b8f      	ldr	r3, [pc, #572]	@ (8006110 <UART_SetConfig+0x2cc>)
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d005      	beq.n	8005ee4 <UART_SetConfig+0xa0>
 8005ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	4b8d      	ldr	r3, [pc, #564]	@ (8006114 <UART_SetConfig+0x2d0>)
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d104      	bne.n	8005eee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ee4:	f7fe ff1c 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 8005ee8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005eec:	e003      	b.n	8005ef6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eee:	f7fe ff03 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 8005ef2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f00:	f040 810c 	bne.w	800611c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f16:	4622      	mov	r2, r4
 8005f18:	462b      	mov	r3, r5
 8005f1a:	1891      	adds	r1, r2, r2
 8005f1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f1e:	415b      	adcs	r3, r3
 8005f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f26:	4621      	mov	r1, r4
 8005f28:	eb12 0801 	adds.w	r8, r2, r1
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	eb43 0901 	adc.w	r9, r3, r1
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	f04f 0300 	mov.w	r3, #0
 8005f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f46:	4690      	mov	r8, r2
 8005f48:	4699      	mov	r9, r3
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	eb18 0303 	adds.w	r3, r8, r3
 8005f50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f54:	462b      	mov	r3, r5
 8005f56:	eb49 0303 	adc.w	r3, r9, r3
 8005f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f72:	460b      	mov	r3, r1
 8005f74:	18db      	adds	r3, r3, r3
 8005f76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f78:	4613      	mov	r3, r2
 8005f7a:	eb42 0303 	adc.w	r3, r2, r3
 8005f7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f88:	f7fa f98a 	bl	80002a0 <__aeabi_uldivmod>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4b61      	ldr	r3, [pc, #388]	@ (8006118 <UART_SetConfig+0x2d4>)
 8005f92:	fba3 2302 	umull	r2, r3, r3, r2
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	011c      	lsls	r4, r3, #4
 8005f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fa4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fac:	4642      	mov	r2, r8
 8005fae:	464b      	mov	r3, r9
 8005fb0:	1891      	adds	r1, r2, r2
 8005fb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005fb4:	415b      	adcs	r3, r3
 8005fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	eb12 0a01 	adds.w	sl, r2, r1
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	eb43 0b01 	adc.w	fp, r3, r1
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fdc:	4692      	mov	sl, r2
 8005fde:	469b      	mov	fp, r3
 8005fe0:	4643      	mov	r3, r8
 8005fe2:	eb1a 0303 	adds.w	r3, sl, r3
 8005fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fea:	464b      	mov	r3, r9
 8005fec:	eb4b 0303 	adc.w	r3, fp, r3
 8005ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006000:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006004:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006008:	460b      	mov	r3, r1
 800600a:	18db      	adds	r3, r3, r3
 800600c:	643b      	str	r3, [r7, #64]	@ 0x40
 800600e:	4613      	mov	r3, r2
 8006010:	eb42 0303 	adc.w	r3, r2, r3
 8006014:	647b      	str	r3, [r7, #68]	@ 0x44
 8006016:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800601a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800601e:	f7fa f93f 	bl	80002a0 <__aeabi_uldivmod>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4611      	mov	r1, r2
 8006028:	4b3b      	ldr	r3, [pc, #236]	@ (8006118 <UART_SetConfig+0x2d4>)
 800602a:	fba3 2301 	umull	r2, r3, r3, r1
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	2264      	movs	r2, #100	@ 0x64
 8006032:	fb02 f303 	mul.w	r3, r2, r3
 8006036:	1acb      	subs	r3, r1, r3
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800603e:	4b36      	ldr	r3, [pc, #216]	@ (8006118 <UART_SetConfig+0x2d4>)
 8006040:	fba3 2302 	umull	r2, r3, r3, r2
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800604c:	441c      	add	r4, r3
 800604e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006052:	2200      	movs	r2, #0
 8006054:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006058:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800605c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006060:	4642      	mov	r2, r8
 8006062:	464b      	mov	r3, r9
 8006064:	1891      	adds	r1, r2, r2
 8006066:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006068:	415b      	adcs	r3, r3
 800606a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800606c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006070:	4641      	mov	r1, r8
 8006072:	1851      	adds	r1, r2, r1
 8006074:	6339      	str	r1, [r7, #48]	@ 0x30
 8006076:	4649      	mov	r1, r9
 8006078:	414b      	adcs	r3, r1
 800607a:	637b      	str	r3, [r7, #52]	@ 0x34
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006088:	4659      	mov	r1, fp
 800608a:	00cb      	lsls	r3, r1, #3
 800608c:	4651      	mov	r1, sl
 800608e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006092:	4651      	mov	r1, sl
 8006094:	00ca      	lsls	r2, r1, #3
 8006096:	4610      	mov	r0, r2
 8006098:	4619      	mov	r1, r3
 800609a:	4603      	mov	r3, r0
 800609c:	4642      	mov	r2, r8
 800609e:	189b      	adds	r3, r3, r2
 80060a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060a4:	464b      	mov	r3, r9
 80060a6:	460a      	mov	r2, r1
 80060a8:	eb42 0303 	adc.w	r3, r2, r3
 80060ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060c4:	460b      	mov	r3, r1
 80060c6:	18db      	adds	r3, r3, r3
 80060c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ca:	4613      	mov	r3, r2
 80060cc:	eb42 0303 	adc.w	r3, r2, r3
 80060d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80060da:	f7fa f8e1 	bl	80002a0 <__aeabi_uldivmod>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006118 <UART_SetConfig+0x2d4>)
 80060e4:	fba3 1302 	umull	r1, r3, r3, r2
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	2164      	movs	r1, #100	@ 0x64
 80060ec:	fb01 f303 	mul.w	r3, r1, r3
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	3332      	adds	r3, #50	@ 0x32
 80060f6:	4a08      	ldr	r2, [pc, #32]	@ (8006118 <UART_SetConfig+0x2d4>)
 80060f8:	fba2 2303 	umull	r2, r3, r2, r3
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	f003 0207 	and.w	r2, r3, #7
 8006102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4422      	add	r2, r4
 800610a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800610c:	e106      	b.n	800631c <UART_SetConfig+0x4d8>
 800610e:	bf00      	nop
 8006110:	40011000 	.word	0x40011000
 8006114:	40011400 	.word	0x40011400
 8006118:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800611c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006120:	2200      	movs	r2, #0
 8006122:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006126:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800612a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800612e:	4642      	mov	r2, r8
 8006130:	464b      	mov	r3, r9
 8006132:	1891      	adds	r1, r2, r2
 8006134:	6239      	str	r1, [r7, #32]
 8006136:	415b      	adcs	r3, r3
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
 800613a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800613e:	4641      	mov	r1, r8
 8006140:	1854      	adds	r4, r2, r1
 8006142:	4649      	mov	r1, r9
 8006144:	eb43 0501 	adc.w	r5, r3, r1
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	00eb      	lsls	r3, r5, #3
 8006152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006156:	00e2      	lsls	r2, r4, #3
 8006158:	4614      	mov	r4, r2
 800615a:	461d      	mov	r5, r3
 800615c:	4643      	mov	r3, r8
 800615e:	18e3      	adds	r3, r4, r3
 8006160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006164:	464b      	mov	r3, r9
 8006166:	eb45 0303 	adc.w	r3, r5, r3
 800616a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800617a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800618a:	4629      	mov	r1, r5
 800618c:	008b      	lsls	r3, r1, #2
 800618e:	4621      	mov	r1, r4
 8006190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006194:	4621      	mov	r1, r4
 8006196:	008a      	lsls	r2, r1, #2
 8006198:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800619c:	f7fa f880 	bl	80002a0 <__aeabi_uldivmod>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4b60      	ldr	r3, [pc, #384]	@ (8006328 <UART_SetConfig+0x4e4>)
 80061a6:	fba3 2302 	umull	r2, r3, r3, r2
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	011c      	lsls	r4, r3, #4
 80061ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061c0:	4642      	mov	r2, r8
 80061c2:	464b      	mov	r3, r9
 80061c4:	1891      	adds	r1, r2, r2
 80061c6:	61b9      	str	r1, [r7, #24]
 80061c8:	415b      	adcs	r3, r3
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061d0:	4641      	mov	r1, r8
 80061d2:	1851      	adds	r1, r2, r1
 80061d4:	6139      	str	r1, [r7, #16]
 80061d6:	4649      	mov	r1, r9
 80061d8:	414b      	adcs	r3, r1
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061e8:	4659      	mov	r1, fp
 80061ea:	00cb      	lsls	r3, r1, #3
 80061ec:	4651      	mov	r1, sl
 80061ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f2:	4651      	mov	r1, sl
 80061f4:	00ca      	lsls	r2, r1, #3
 80061f6:	4610      	mov	r0, r2
 80061f8:	4619      	mov	r1, r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	4642      	mov	r2, r8
 80061fe:	189b      	adds	r3, r3, r2
 8006200:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006204:	464b      	mov	r3, r9
 8006206:	460a      	mov	r2, r1
 8006208:	eb42 0303 	adc.w	r3, r2, r3
 800620c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	67bb      	str	r3, [r7, #120]	@ 0x78
 800621a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006228:	4649      	mov	r1, r9
 800622a:	008b      	lsls	r3, r1, #2
 800622c:	4641      	mov	r1, r8
 800622e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006232:	4641      	mov	r1, r8
 8006234:	008a      	lsls	r2, r1, #2
 8006236:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800623a:	f7fa f831 	bl	80002a0 <__aeabi_uldivmod>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4611      	mov	r1, r2
 8006244:	4b38      	ldr	r3, [pc, #224]	@ (8006328 <UART_SetConfig+0x4e4>)
 8006246:	fba3 2301 	umull	r2, r3, r3, r1
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	2264      	movs	r2, #100	@ 0x64
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	1acb      	subs	r3, r1, r3
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	3332      	adds	r3, #50	@ 0x32
 8006258:	4a33      	ldr	r2, [pc, #204]	@ (8006328 <UART_SetConfig+0x4e4>)
 800625a:	fba2 2303 	umull	r2, r3, r2, r3
 800625e:	095b      	lsrs	r3, r3, #5
 8006260:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006264:	441c      	add	r4, r3
 8006266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800626a:	2200      	movs	r2, #0
 800626c:	673b      	str	r3, [r7, #112]	@ 0x70
 800626e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006270:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	1891      	adds	r1, r2, r2
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	415b      	adcs	r3, r3
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006284:	4641      	mov	r1, r8
 8006286:	1851      	adds	r1, r2, r1
 8006288:	6039      	str	r1, [r7, #0]
 800628a:	4649      	mov	r1, r9
 800628c:	414b      	adcs	r3, r1
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800629c:	4659      	mov	r1, fp
 800629e:	00cb      	lsls	r3, r1, #3
 80062a0:	4651      	mov	r1, sl
 80062a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062a6:	4651      	mov	r1, sl
 80062a8:	00ca      	lsls	r2, r1, #3
 80062aa:	4610      	mov	r0, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	4642      	mov	r2, r8
 80062b2:	189b      	adds	r3, r3, r2
 80062b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062b6:	464b      	mov	r3, r9
 80062b8:	460a      	mov	r2, r1
 80062ba:	eb42 0303 	adc.w	r3, r2, r3
 80062be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80062ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80062d8:	4649      	mov	r1, r9
 80062da:	008b      	lsls	r3, r1, #2
 80062dc:	4641      	mov	r1, r8
 80062de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062e2:	4641      	mov	r1, r8
 80062e4:	008a      	lsls	r2, r1, #2
 80062e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80062ea:	f7f9 ffd9 	bl	80002a0 <__aeabi_uldivmod>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <UART_SetConfig+0x4e4>)
 80062f4:	fba3 1302 	umull	r1, r3, r3, r2
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	2164      	movs	r1, #100	@ 0x64
 80062fc:	fb01 f303 	mul.w	r3, r1, r3
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	3332      	adds	r3, #50	@ 0x32
 8006306:	4a08      	ldr	r2, [pc, #32]	@ (8006328 <UART_SetConfig+0x4e4>)
 8006308:	fba2 2303 	umull	r2, r3, r2, r3
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	f003 020f 	and.w	r2, r3, #15
 8006312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4422      	add	r2, r4
 800631a:	609a      	str	r2, [r3, #8]
}
 800631c:	bf00      	nop
 800631e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006322:	46bd      	mov	sp, r7
 8006324:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006328:	51eb851f 	.word	0x51eb851f

0800632c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800632c:	b084      	sub	sp, #16
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	f107 001c 	add.w	r0, r7, #28
 800633a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800633e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006342:	2b01      	cmp	r3, #1
 8006344:	d123      	bne.n	800638e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800635a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800636e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006372:	2b01      	cmp	r3, #1
 8006374:	d105      	bne.n	8006382 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 faa0 	bl	80068c8 <USB_CoreReset>
 8006388:	4603      	mov	r3, r0
 800638a:	73fb      	strb	r3, [r7, #15]
 800638c:	e01b      	b.n	80063c6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa94 	bl	80068c8 <USB_CoreReset>
 80063a0:	4603      	mov	r3, r0
 80063a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d106      	bne.n	80063ba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80063b8:	e005      	b.n	80063c6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063c6:	7fbb      	ldrb	r3, [r7, #30]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d10b      	bne.n	80063e4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f043 0206 	orr.w	r2, r3, #6
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f043 0220 	orr.w	r2, r3, #32
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063f0:	b004      	add	sp, #16
 80063f2:	4770      	bx	lr

080063f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f023 0201 	bic.w	r2, r3, #1
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	460b      	mov	r3, r1
 8006420:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d115      	bne.n	8006464 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006444:	200a      	movs	r0, #10
 8006446:	f7fc fa81 	bl	800294c <HAL_Delay>
      ms += 10U;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	330a      	adds	r3, #10
 800644e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fa2b 	bl	80068ac <USB_GetMode>
 8006456:	4603      	mov	r3, r0
 8006458:	2b01      	cmp	r3, #1
 800645a:	d01e      	beq.n	800649a <USB_SetCurrentMode+0x84>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006460:	d9f0      	bls.n	8006444 <USB_SetCurrentMode+0x2e>
 8006462:	e01a      	b.n	800649a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d115      	bne.n	8006496 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006476:	200a      	movs	r0, #10
 8006478:	f7fc fa68 	bl	800294c <HAL_Delay>
      ms += 10U;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	330a      	adds	r3, #10
 8006480:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa12 	bl	80068ac <USB_GetMode>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <USB_SetCurrentMode+0x84>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2bc7      	cmp	r3, #199	@ 0xc7
 8006492:	d9f0      	bls.n	8006476 <USB_SetCurrentMode+0x60>
 8006494:	e001      	b.n	800649a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e005      	b.n	80064a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2bc8      	cmp	r3, #200	@ 0xc8
 800649e:	d101      	bne.n	80064a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064b0:	b084      	sub	sp, #16
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b086      	sub	sp, #24
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80064be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064ca:	2300      	movs	r3, #0
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	e009      	b.n	80064e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	3340      	adds	r3, #64	@ 0x40
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	2200      	movs	r2, #0
 80064dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	3301      	adds	r3, #1
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2b0e      	cmp	r3, #14
 80064e8:	d9f2      	bls.n	80064d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d11c      	bne.n	800652c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006500:	f043 0302 	orr.w	r3, r3, #2
 8006504:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006516:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006522:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	639a      	str	r2, [r3, #56]	@ 0x38
 800652a:	e00b      	b.n	8006544 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006530:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800654a:	461a      	mov	r2, r3
 800654c:	2300      	movs	r3, #0
 800654e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006550:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006554:	2b01      	cmp	r3, #1
 8006556:	d10d      	bne.n	8006574 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800655c:	2b00      	cmp	r3, #0
 800655e:	d104      	bne.n	800656a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006560:	2100      	movs	r1, #0
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f968 	bl	8006838 <USB_SetDevSpeed>
 8006568:	e008      	b.n	800657c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800656a:	2101      	movs	r1, #1
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f963 	bl	8006838 <USB_SetDevSpeed>
 8006572:	e003      	b.n	800657c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006574:	2103      	movs	r1, #3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f95e 	bl	8006838 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800657c:	2110      	movs	r1, #16
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f8fa 	bl	8006778 <USB_FlushTxFifo>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f924 	bl	80067dc <USB_FlushRxFifo>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a4:	461a      	mov	r2, r3
 80065a6:	2300      	movs	r3, #0
 80065a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b0:	461a      	mov	r2, r3
 80065b2:	2300      	movs	r3, #0
 80065b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065bc:	461a      	mov	r2, r3
 80065be:	2300      	movs	r3, #0
 80065c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c2:	2300      	movs	r3, #0
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	e043      	b.n	8006650 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065de:	d118      	bne.n	8006612 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10a      	bne.n	80065fc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f2:	461a      	mov	r2, r3
 80065f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	e013      	b.n	8006624 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006608:	461a      	mov	r2, r3
 800660a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	e008      	b.n	8006624 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661e:	461a      	mov	r2, r3
 8006620:	2300      	movs	r3, #0
 8006622:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006630:	461a      	mov	r2, r3
 8006632:	2300      	movs	r3, #0
 8006634:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006642:	461a      	mov	r2, r3
 8006644:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006648:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	3301      	adds	r3, #1
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006654:	461a      	mov	r2, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	4293      	cmp	r3, r2
 800665a:	d3b5      	bcc.n	80065c8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800665c:	2300      	movs	r3, #0
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	e043      	b.n	80066ea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006674:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006678:	d118      	bne.n	80066ac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668c:	461a      	mov	r2, r3
 800668e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	e013      	b.n	80066be <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a2:	461a      	mov	r2, r3
 80066a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	e008      	b.n	80066be <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b8:	461a      	mov	r2, r3
 80066ba:	2300      	movs	r3, #0
 80066bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ca:	461a      	mov	r2, r3
 80066cc:	2300      	movs	r3, #0
 80066ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066dc:	461a      	mov	r2, r3
 80066de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	3301      	adds	r3, #1
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066ee:	461a      	mov	r2, r3
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d3b5      	bcc.n	8006662 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006708:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006716:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006718:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800671c:	2b00      	cmp	r3, #0
 800671e:	d105      	bne.n	800672c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f043 0210 	orr.w	r2, r3, #16
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	699a      	ldr	r2, [r3, #24]
 8006730:	4b10      	ldr	r3, [pc, #64]	@ (8006774 <USB_DevInit+0x2c4>)
 8006732:	4313      	orrs	r3, r2
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006738:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	f043 0208 	orr.w	r2, r3, #8
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800674c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006750:	2b01      	cmp	r3, #1
 8006752:	d107      	bne.n	8006764 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800675c:	f043 0304 	orr.w	r3, r3, #4
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006764:	7dfb      	ldrb	r3, [r7, #23]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006770:	b004      	add	sp, #16
 8006772:	4770      	bx	lr
 8006774:	803c3800 	.word	0x803c3800

08006778 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006792:	d901      	bls.n	8006798 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e01b      	b.n	80067d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	daf2      	bge.n	8006786 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	019b      	lsls	r3, r3, #6
 80067a8:	f043 0220 	orr.w	r2, r3, #32
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067bc:	d901      	bls.n	80067c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e006      	b.n	80067d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d0f0      	beq.n	80067b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067f4:	d901      	bls.n	80067fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e018      	b.n	800682c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	daf2      	bge.n	80067e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2210      	movs	r2, #16
 800680a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006818:	d901      	bls.n	800681e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e006      	b.n	800682c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0310 	and.w	r3, r3, #16
 8006826:	2b10      	cmp	r3, #16
 8006828:	d0f0      	beq.n	800680c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	68f9      	ldr	r1, [r7, #12]
 8006854:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006858:	4313      	orrs	r3, r2
 800685a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006884:	f023 0303 	bic.w	r3, r3, #3
 8006888:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006898:	f043 0302 	orr.w	r3, r3, #2
 800689c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	f003 0301 	and.w	r3, r3, #1
}
 80068bc:	4618      	mov	r0, r3
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068e0:	d901      	bls.n	80068e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e01b      	b.n	800691e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	daf2      	bge.n	80068d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f043 0201 	orr.w	r2, r3, #1
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800690a:	d901      	bls.n	8006910 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e006      	b.n	800691e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b01      	cmp	r3, #1
 800691a:	d0f0      	beq.n	80068fe <USB_CoreReset+0x36>

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <atoi>:
 800692a:	220a      	movs	r2, #10
 800692c:	2100      	movs	r1, #0
 800692e:	f000 b87b 	b.w	8006a28 <strtol>
	...

08006934 <_strtol_l.constprop.0>:
 8006934:	2b24      	cmp	r3, #36	@ 0x24
 8006936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800693a:	4686      	mov	lr, r0
 800693c:	4690      	mov	r8, r2
 800693e:	d801      	bhi.n	8006944 <_strtol_l.constprop.0+0x10>
 8006940:	2b01      	cmp	r3, #1
 8006942:	d106      	bne.n	8006952 <_strtol_l.constprop.0+0x1e>
 8006944:	f000 f8b6 	bl	8006ab4 <__errno>
 8006948:	2316      	movs	r3, #22
 800694a:	6003      	str	r3, [r0, #0]
 800694c:	2000      	movs	r0, #0
 800694e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006952:	4834      	ldr	r0, [pc, #208]	@ (8006a24 <_strtol_l.constprop.0+0xf0>)
 8006954:	460d      	mov	r5, r1
 8006956:	462a      	mov	r2, r5
 8006958:	f815 4b01 	ldrb.w	r4, [r5], #1
 800695c:	5d06      	ldrb	r6, [r0, r4]
 800695e:	f016 0608 	ands.w	r6, r6, #8
 8006962:	d1f8      	bne.n	8006956 <_strtol_l.constprop.0+0x22>
 8006964:	2c2d      	cmp	r4, #45	@ 0x2d
 8006966:	d12d      	bne.n	80069c4 <_strtol_l.constprop.0+0x90>
 8006968:	782c      	ldrb	r4, [r5, #0]
 800696a:	2601      	movs	r6, #1
 800696c:	1c95      	adds	r5, r2, #2
 800696e:	f033 0210 	bics.w	r2, r3, #16
 8006972:	d109      	bne.n	8006988 <_strtol_l.constprop.0+0x54>
 8006974:	2c30      	cmp	r4, #48	@ 0x30
 8006976:	d12a      	bne.n	80069ce <_strtol_l.constprop.0+0x9a>
 8006978:	782a      	ldrb	r2, [r5, #0]
 800697a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800697e:	2a58      	cmp	r2, #88	@ 0x58
 8006980:	d125      	bne.n	80069ce <_strtol_l.constprop.0+0x9a>
 8006982:	786c      	ldrb	r4, [r5, #1]
 8006984:	2310      	movs	r3, #16
 8006986:	3502      	adds	r5, #2
 8006988:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800698c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006990:	2200      	movs	r2, #0
 8006992:	fbbc f9f3 	udiv	r9, ip, r3
 8006996:	4610      	mov	r0, r2
 8006998:	fb03 ca19 	mls	sl, r3, r9, ip
 800699c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80069a0:	2f09      	cmp	r7, #9
 80069a2:	d81b      	bhi.n	80069dc <_strtol_l.constprop.0+0xa8>
 80069a4:	463c      	mov	r4, r7
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	dd27      	ble.n	80069fa <_strtol_l.constprop.0+0xc6>
 80069aa:	1c57      	adds	r7, r2, #1
 80069ac:	d007      	beq.n	80069be <_strtol_l.constprop.0+0x8a>
 80069ae:	4581      	cmp	r9, r0
 80069b0:	d320      	bcc.n	80069f4 <_strtol_l.constprop.0+0xc0>
 80069b2:	d101      	bne.n	80069b8 <_strtol_l.constprop.0+0x84>
 80069b4:	45a2      	cmp	sl, r4
 80069b6:	db1d      	blt.n	80069f4 <_strtol_l.constprop.0+0xc0>
 80069b8:	fb00 4003 	mla	r0, r0, r3, r4
 80069bc:	2201      	movs	r2, #1
 80069be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069c2:	e7eb      	b.n	800699c <_strtol_l.constprop.0+0x68>
 80069c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80069c6:	bf04      	itt	eq
 80069c8:	782c      	ldrbeq	r4, [r5, #0]
 80069ca:	1c95      	addeq	r5, r2, #2
 80069cc:	e7cf      	b.n	800696e <_strtol_l.constprop.0+0x3a>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1da      	bne.n	8006988 <_strtol_l.constprop.0+0x54>
 80069d2:	2c30      	cmp	r4, #48	@ 0x30
 80069d4:	bf0c      	ite	eq
 80069d6:	2308      	moveq	r3, #8
 80069d8:	230a      	movne	r3, #10
 80069da:	e7d5      	b.n	8006988 <_strtol_l.constprop.0+0x54>
 80069dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80069e0:	2f19      	cmp	r7, #25
 80069e2:	d801      	bhi.n	80069e8 <_strtol_l.constprop.0+0xb4>
 80069e4:	3c37      	subs	r4, #55	@ 0x37
 80069e6:	e7de      	b.n	80069a6 <_strtol_l.constprop.0+0x72>
 80069e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80069ec:	2f19      	cmp	r7, #25
 80069ee:	d804      	bhi.n	80069fa <_strtol_l.constprop.0+0xc6>
 80069f0:	3c57      	subs	r4, #87	@ 0x57
 80069f2:	e7d8      	b.n	80069a6 <_strtol_l.constprop.0+0x72>
 80069f4:	f04f 32ff 	mov.w	r2, #4294967295
 80069f8:	e7e1      	b.n	80069be <_strtol_l.constprop.0+0x8a>
 80069fa:	1c53      	adds	r3, r2, #1
 80069fc:	d108      	bne.n	8006a10 <_strtol_l.constprop.0+0xdc>
 80069fe:	2322      	movs	r3, #34	@ 0x22
 8006a00:	f8ce 3000 	str.w	r3, [lr]
 8006a04:	4660      	mov	r0, ip
 8006a06:	f1b8 0f00 	cmp.w	r8, #0
 8006a0a:	d0a0      	beq.n	800694e <_strtol_l.constprop.0+0x1a>
 8006a0c:	1e69      	subs	r1, r5, #1
 8006a0e:	e006      	b.n	8006a1e <_strtol_l.constprop.0+0xea>
 8006a10:	b106      	cbz	r6, 8006a14 <_strtol_l.constprop.0+0xe0>
 8006a12:	4240      	negs	r0, r0
 8006a14:	f1b8 0f00 	cmp.w	r8, #0
 8006a18:	d099      	beq.n	800694e <_strtol_l.constprop.0+0x1a>
 8006a1a:	2a00      	cmp	r2, #0
 8006a1c:	d1f6      	bne.n	8006a0c <_strtol_l.constprop.0+0xd8>
 8006a1e:	f8c8 1000 	str.w	r1, [r8]
 8006a22:	e794      	b.n	800694e <_strtol_l.constprop.0+0x1a>
 8006a24:	080081e9 	.word	0x080081e9

08006a28 <strtol>:
 8006a28:	4613      	mov	r3, r2
 8006a2a:	460a      	mov	r2, r1
 8006a2c:	4601      	mov	r1, r0
 8006a2e:	4802      	ldr	r0, [pc, #8]	@ (8006a38 <strtol+0x10>)
 8006a30:	6800      	ldr	r0, [r0, #0]
 8006a32:	f7ff bf7f 	b.w	8006934 <_strtol_l.constprop.0>
 8006a36:	bf00      	nop
 8006a38:	20000014 	.word	0x20000014

08006a3c <siprintf>:
 8006a3c:	b40e      	push	{r1, r2, r3}
 8006a3e:	b500      	push	{lr}
 8006a40:	b09c      	sub	sp, #112	@ 0x70
 8006a42:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a44:	9002      	str	r0, [sp, #8]
 8006a46:	9006      	str	r0, [sp, #24]
 8006a48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a4c:	4809      	ldr	r0, [pc, #36]	@ (8006a74 <siprintf+0x38>)
 8006a4e:	9107      	str	r1, [sp, #28]
 8006a50:	9104      	str	r1, [sp, #16]
 8006a52:	4909      	ldr	r1, [pc, #36]	@ (8006a78 <siprintf+0x3c>)
 8006a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a58:	9105      	str	r1, [sp, #20]
 8006a5a:	6800      	ldr	r0, [r0, #0]
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	a902      	add	r1, sp, #8
 8006a60:	f000 f9a8 	bl	8006db4 <_svfiprintf_r>
 8006a64:	9b02      	ldr	r3, [sp, #8]
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	b01c      	add	sp, #112	@ 0x70
 8006a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a70:	b003      	add	sp, #12
 8006a72:	4770      	bx	lr
 8006a74:	20000014 	.word	0x20000014
 8006a78:	ffff0208 	.word	0xffff0208

08006a7c <memset>:
 8006a7c:	4402      	add	r2, r0
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d100      	bne.n	8006a86 <memset+0xa>
 8006a84:	4770      	bx	lr
 8006a86:	f803 1b01 	strb.w	r1, [r3], #1
 8006a8a:	e7f9      	b.n	8006a80 <memset+0x4>

08006a8c <strncpy>:
 8006a8c:	b510      	push	{r4, lr}
 8006a8e:	3901      	subs	r1, #1
 8006a90:	4603      	mov	r3, r0
 8006a92:	b132      	cbz	r2, 8006aa2 <strncpy+0x16>
 8006a94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006a98:	f803 4b01 	strb.w	r4, [r3], #1
 8006a9c:	3a01      	subs	r2, #1
 8006a9e:	2c00      	cmp	r4, #0
 8006aa0:	d1f7      	bne.n	8006a92 <strncpy+0x6>
 8006aa2:	441a      	add	r2, r3
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d100      	bne.n	8006aac <strncpy+0x20>
 8006aaa:	bd10      	pop	{r4, pc}
 8006aac:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab0:	e7f9      	b.n	8006aa6 <strncpy+0x1a>
	...

08006ab4 <__errno>:
 8006ab4:	4b01      	ldr	r3, [pc, #4]	@ (8006abc <__errno+0x8>)
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000014 	.word	0x20000014

08006ac0 <__libc_init_array>:
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8006af8 <__libc_init_array+0x38>)
 8006ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8006afc <__libc_init_array+0x3c>)
 8006ac6:	1b64      	subs	r4, r4, r5
 8006ac8:	10a4      	asrs	r4, r4, #2
 8006aca:	2600      	movs	r6, #0
 8006acc:	42a6      	cmp	r6, r4
 8006ace:	d109      	bne.n	8006ae4 <__libc_init_array+0x24>
 8006ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8006b00 <__libc_init_array+0x40>)
 8006ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8006b04 <__libc_init_array+0x44>)
 8006ad4:	f000 fc66 	bl	80073a4 <_init>
 8006ad8:	1b64      	subs	r4, r4, r5
 8006ada:	10a4      	asrs	r4, r4, #2
 8006adc:	2600      	movs	r6, #0
 8006ade:	42a6      	cmp	r6, r4
 8006ae0:	d105      	bne.n	8006aee <__libc_init_array+0x2e>
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae8:	4798      	blx	r3
 8006aea:	3601      	adds	r6, #1
 8006aec:	e7ee      	b.n	8006acc <__libc_init_array+0xc>
 8006aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af2:	4798      	blx	r3
 8006af4:	3601      	adds	r6, #1
 8006af6:	e7f2      	b.n	8006ade <__libc_init_array+0x1e>
 8006af8:	08008324 	.word	0x08008324
 8006afc:	08008324 	.word	0x08008324
 8006b00:	08008324 	.word	0x08008324
 8006b04:	08008328 	.word	0x08008328

08006b08 <__retarget_lock_acquire_recursive>:
 8006b08:	4770      	bx	lr

08006b0a <__retarget_lock_release_recursive>:
 8006b0a:	4770      	bx	lr

08006b0c <_free_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4605      	mov	r5, r0
 8006b10:	2900      	cmp	r1, #0
 8006b12:	d041      	beq.n	8006b98 <_free_r+0x8c>
 8006b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b18:	1f0c      	subs	r4, r1, #4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bfb8      	it	lt
 8006b1e:	18e4      	addlt	r4, r4, r3
 8006b20:	f000 f8e0 	bl	8006ce4 <__malloc_lock>
 8006b24:	4a1d      	ldr	r2, [pc, #116]	@ (8006b9c <_free_r+0x90>)
 8006b26:	6813      	ldr	r3, [r2, #0]
 8006b28:	b933      	cbnz	r3, 8006b38 <_free_r+0x2c>
 8006b2a:	6063      	str	r3, [r4, #4]
 8006b2c:	6014      	str	r4, [r2, #0]
 8006b2e:	4628      	mov	r0, r5
 8006b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b34:	f000 b8dc 	b.w	8006cf0 <__malloc_unlock>
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d908      	bls.n	8006b4e <_free_r+0x42>
 8006b3c:	6820      	ldr	r0, [r4, #0]
 8006b3e:	1821      	adds	r1, r4, r0
 8006b40:	428b      	cmp	r3, r1
 8006b42:	bf01      	itttt	eq
 8006b44:	6819      	ldreq	r1, [r3, #0]
 8006b46:	685b      	ldreq	r3, [r3, #4]
 8006b48:	1809      	addeq	r1, r1, r0
 8006b4a:	6021      	streq	r1, [r4, #0]
 8006b4c:	e7ed      	b.n	8006b2a <_free_r+0x1e>
 8006b4e:	461a      	mov	r2, r3
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	b10b      	cbz	r3, 8006b58 <_free_r+0x4c>
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	d9fa      	bls.n	8006b4e <_free_r+0x42>
 8006b58:	6811      	ldr	r1, [r2, #0]
 8006b5a:	1850      	adds	r0, r2, r1
 8006b5c:	42a0      	cmp	r0, r4
 8006b5e:	d10b      	bne.n	8006b78 <_free_r+0x6c>
 8006b60:	6820      	ldr	r0, [r4, #0]
 8006b62:	4401      	add	r1, r0
 8006b64:	1850      	adds	r0, r2, r1
 8006b66:	4283      	cmp	r3, r0
 8006b68:	6011      	str	r1, [r2, #0]
 8006b6a:	d1e0      	bne.n	8006b2e <_free_r+0x22>
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	6053      	str	r3, [r2, #4]
 8006b72:	4408      	add	r0, r1
 8006b74:	6010      	str	r0, [r2, #0]
 8006b76:	e7da      	b.n	8006b2e <_free_r+0x22>
 8006b78:	d902      	bls.n	8006b80 <_free_r+0x74>
 8006b7a:	230c      	movs	r3, #12
 8006b7c:	602b      	str	r3, [r5, #0]
 8006b7e:	e7d6      	b.n	8006b2e <_free_r+0x22>
 8006b80:	6820      	ldr	r0, [r4, #0]
 8006b82:	1821      	adds	r1, r4, r0
 8006b84:	428b      	cmp	r3, r1
 8006b86:	bf04      	itt	eq
 8006b88:	6819      	ldreq	r1, [r3, #0]
 8006b8a:	685b      	ldreq	r3, [r3, #4]
 8006b8c:	6063      	str	r3, [r4, #4]
 8006b8e:	bf04      	itt	eq
 8006b90:	1809      	addeq	r1, r1, r0
 8006b92:	6021      	streq	r1, [r4, #0]
 8006b94:	6054      	str	r4, [r2, #4]
 8006b96:	e7ca      	b.n	8006b2e <_free_r+0x22>
 8006b98:	bd38      	pop	{r3, r4, r5, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000ee0 	.word	0x20000ee0

08006ba0 <sbrk_aligned>:
 8006ba0:	b570      	push	{r4, r5, r6, lr}
 8006ba2:	4e0f      	ldr	r6, [pc, #60]	@ (8006be0 <sbrk_aligned+0x40>)
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	6831      	ldr	r1, [r6, #0]
 8006ba8:	4605      	mov	r5, r0
 8006baa:	b911      	cbnz	r1, 8006bb2 <sbrk_aligned+0x12>
 8006bac:	f000 fba6 	bl	80072fc <_sbrk_r>
 8006bb0:	6030      	str	r0, [r6, #0]
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f000 fba1 	bl	80072fc <_sbrk_r>
 8006bba:	1c43      	adds	r3, r0, #1
 8006bbc:	d103      	bne.n	8006bc6 <sbrk_aligned+0x26>
 8006bbe:	f04f 34ff 	mov.w	r4, #4294967295
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}
 8006bc6:	1cc4      	adds	r4, r0, #3
 8006bc8:	f024 0403 	bic.w	r4, r4, #3
 8006bcc:	42a0      	cmp	r0, r4
 8006bce:	d0f8      	beq.n	8006bc2 <sbrk_aligned+0x22>
 8006bd0:	1a21      	subs	r1, r4, r0
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 fb92 	bl	80072fc <_sbrk_r>
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d1f2      	bne.n	8006bc2 <sbrk_aligned+0x22>
 8006bdc:	e7ef      	b.n	8006bbe <sbrk_aligned+0x1e>
 8006bde:	bf00      	nop
 8006be0:	20000edc 	.word	0x20000edc

08006be4 <_malloc_r>:
 8006be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be8:	1ccd      	adds	r5, r1, #3
 8006bea:	f025 0503 	bic.w	r5, r5, #3
 8006bee:	3508      	adds	r5, #8
 8006bf0:	2d0c      	cmp	r5, #12
 8006bf2:	bf38      	it	cc
 8006bf4:	250c      	movcc	r5, #12
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	db01      	blt.n	8006c00 <_malloc_r+0x1c>
 8006bfc:	42a9      	cmp	r1, r5
 8006bfe:	d904      	bls.n	8006c0a <_malloc_r+0x26>
 8006c00:	230c      	movs	r3, #12
 8006c02:	6033      	str	r3, [r6, #0]
 8006c04:	2000      	movs	r0, #0
 8006c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ce0 <_malloc_r+0xfc>
 8006c0e:	f000 f869 	bl	8006ce4 <__malloc_lock>
 8006c12:	f8d8 3000 	ldr.w	r3, [r8]
 8006c16:	461c      	mov	r4, r3
 8006c18:	bb44      	cbnz	r4, 8006c6c <_malloc_r+0x88>
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f7ff ffbf 	bl	8006ba0 <sbrk_aligned>
 8006c22:	1c43      	adds	r3, r0, #1
 8006c24:	4604      	mov	r4, r0
 8006c26:	d158      	bne.n	8006cda <_malloc_r+0xf6>
 8006c28:	f8d8 4000 	ldr.w	r4, [r8]
 8006c2c:	4627      	mov	r7, r4
 8006c2e:	2f00      	cmp	r7, #0
 8006c30:	d143      	bne.n	8006cba <_malloc_r+0xd6>
 8006c32:	2c00      	cmp	r4, #0
 8006c34:	d04b      	beq.n	8006cce <_malloc_r+0xea>
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	4639      	mov	r1, r7
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	eb04 0903 	add.w	r9, r4, r3
 8006c40:	f000 fb5c 	bl	80072fc <_sbrk_r>
 8006c44:	4581      	cmp	r9, r0
 8006c46:	d142      	bne.n	8006cce <_malloc_r+0xea>
 8006c48:	6821      	ldr	r1, [r4, #0]
 8006c4a:	1a6d      	subs	r5, r5, r1
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f7ff ffa6 	bl	8006ba0 <sbrk_aligned>
 8006c54:	3001      	adds	r0, #1
 8006c56:	d03a      	beq.n	8006cce <_malloc_r+0xea>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	442b      	add	r3, r5
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	bb62      	cbnz	r2, 8006cc0 <_malloc_r+0xdc>
 8006c66:	f8c8 7000 	str.w	r7, [r8]
 8006c6a:	e00f      	b.n	8006c8c <_malloc_r+0xa8>
 8006c6c:	6822      	ldr	r2, [r4, #0]
 8006c6e:	1b52      	subs	r2, r2, r5
 8006c70:	d420      	bmi.n	8006cb4 <_malloc_r+0xd0>
 8006c72:	2a0b      	cmp	r2, #11
 8006c74:	d917      	bls.n	8006ca6 <_malloc_r+0xc2>
 8006c76:	1961      	adds	r1, r4, r5
 8006c78:	42a3      	cmp	r3, r4
 8006c7a:	6025      	str	r5, [r4, #0]
 8006c7c:	bf18      	it	ne
 8006c7e:	6059      	strne	r1, [r3, #4]
 8006c80:	6863      	ldr	r3, [r4, #4]
 8006c82:	bf08      	it	eq
 8006c84:	f8c8 1000 	streq.w	r1, [r8]
 8006c88:	5162      	str	r2, [r4, r5]
 8006c8a:	604b      	str	r3, [r1, #4]
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	f000 f82f 	bl	8006cf0 <__malloc_unlock>
 8006c92:	f104 000b 	add.w	r0, r4, #11
 8006c96:	1d23      	adds	r3, r4, #4
 8006c98:	f020 0007 	bic.w	r0, r0, #7
 8006c9c:	1ac2      	subs	r2, r0, r3
 8006c9e:	bf1c      	itt	ne
 8006ca0:	1a1b      	subne	r3, r3, r0
 8006ca2:	50a3      	strne	r3, [r4, r2]
 8006ca4:	e7af      	b.n	8006c06 <_malloc_r+0x22>
 8006ca6:	6862      	ldr	r2, [r4, #4]
 8006ca8:	42a3      	cmp	r3, r4
 8006caa:	bf0c      	ite	eq
 8006cac:	f8c8 2000 	streq.w	r2, [r8]
 8006cb0:	605a      	strne	r2, [r3, #4]
 8006cb2:	e7eb      	b.n	8006c8c <_malloc_r+0xa8>
 8006cb4:	4623      	mov	r3, r4
 8006cb6:	6864      	ldr	r4, [r4, #4]
 8006cb8:	e7ae      	b.n	8006c18 <_malloc_r+0x34>
 8006cba:	463c      	mov	r4, r7
 8006cbc:	687f      	ldr	r7, [r7, #4]
 8006cbe:	e7b6      	b.n	8006c2e <_malloc_r+0x4a>
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	d1fb      	bne.n	8006cc0 <_malloc_r+0xdc>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	6053      	str	r3, [r2, #4]
 8006ccc:	e7de      	b.n	8006c8c <_malloc_r+0xa8>
 8006cce:	230c      	movs	r3, #12
 8006cd0:	6033      	str	r3, [r6, #0]
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f000 f80c 	bl	8006cf0 <__malloc_unlock>
 8006cd8:	e794      	b.n	8006c04 <_malloc_r+0x20>
 8006cda:	6005      	str	r5, [r0, #0]
 8006cdc:	e7d6      	b.n	8006c8c <_malloc_r+0xa8>
 8006cde:	bf00      	nop
 8006ce0:	20000ee0 	.word	0x20000ee0

08006ce4 <__malloc_lock>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	@ (8006cec <__malloc_lock+0x8>)
 8006ce6:	f7ff bf0f 	b.w	8006b08 <__retarget_lock_acquire_recursive>
 8006cea:	bf00      	nop
 8006cec:	20000ed8 	.word	0x20000ed8

08006cf0 <__malloc_unlock>:
 8006cf0:	4801      	ldr	r0, [pc, #4]	@ (8006cf8 <__malloc_unlock+0x8>)
 8006cf2:	f7ff bf0a 	b.w	8006b0a <__retarget_lock_release_recursive>
 8006cf6:	bf00      	nop
 8006cf8:	20000ed8 	.word	0x20000ed8

08006cfc <__ssputs_r>:
 8006cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d00:	688e      	ldr	r6, [r1, #8]
 8006d02:	461f      	mov	r7, r3
 8006d04:	42be      	cmp	r6, r7
 8006d06:	680b      	ldr	r3, [r1, #0]
 8006d08:	4682      	mov	sl, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	4690      	mov	r8, r2
 8006d0e:	d82d      	bhi.n	8006d6c <__ssputs_r+0x70>
 8006d10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d18:	d026      	beq.n	8006d68 <__ssputs_r+0x6c>
 8006d1a:	6965      	ldr	r5, [r4, #20]
 8006d1c:	6909      	ldr	r1, [r1, #16]
 8006d1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d22:	eba3 0901 	sub.w	r9, r3, r1
 8006d26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d2a:	1c7b      	adds	r3, r7, #1
 8006d2c:	444b      	add	r3, r9
 8006d2e:	106d      	asrs	r5, r5, #1
 8006d30:	429d      	cmp	r5, r3
 8006d32:	bf38      	it	cc
 8006d34:	461d      	movcc	r5, r3
 8006d36:	0553      	lsls	r3, r2, #21
 8006d38:	d527      	bpl.n	8006d8a <__ssputs_r+0x8e>
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	f7ff ff52 	bl	8006be4 <_malloc_r>
 8006d40:	4606      	mov	r6, r0
 8006d42:	b360      	cbz	r0, 8006d9e <__ssputs_r+0xa2>
 8006d44:	6921      	ldr	r1, [r4, #16]
 8006d46:	464a      	mov	r2, r9
 8006d48:	f000 fae8 	bl	800731c <memcpy>
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d56:	81a3      	strh	r3, [r4, #12]
 8006d58:	6126      	str	r6, [r4, #16]
 8006d5a:	6165      	str	r5, [r4, #20]
 8006d5c:	444e      	add	r6, r9
 8006d5e:	eba5 0509 	sub.w	r5, r5, r9
 8006d62:	6026      	str	r6, [r4, #0]
 8006d64:	60a5      	str	r5, [r4, #8]
 8006d66:	463e      	mov	r6, r7
 8006d68:	42be      	cmp	r6, r7
 8006d6a:	d900      	bls.n	8006d6e <__ssputs_r+0x72>
 8006d6c:	463e      	mov	r6, r7
 8006d6e:	6820      	ldr	r0, [r4, #0]
 8006d70:	4632      	mov	r2, r6
 8006d72:	4641      	mov	r1, r8
 8006d74:	f000 faa8 	bl	80072c8 <memmove>
 8006d78:	68a3      	ldr	r3, [r4, #8]
 8006d7a:	1b9b      	subs	r3, r3, r6
 8006d7c:	60a3      	str	r3, [r4, #8]
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	4433      	add	r3, r6
 8006d82:	6023      	str	r3, [r4, #0]
 8006d84:	2000      	movs	r0, #0
 8006d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8a:	462a      	mov	r2, r5
 8006d8c:	f000 fad4 	bl	8007338 <_realloc_r>
 8006d90:	4606      	mov	r6, r0
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d1e0      	bne.n	8006d58 <__ssputs_r+0x5c>
 8006d96:	6921      	ldr	r1, [r4, #16]
 8006d98:	4650      	mov	r0, sl
 8006d9a:	f7ff feb7 	bl	8006b0c <_free_r>
 8006d9e:	230c      	movs	r3, #12
 8006da0:	f8ca 3000 	str.w	r3, [sl]
 8006da4:	89a3      	ldrh	r3, [r4, #12]
 8006da6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006daa:	81a3      	strh	r3, [r4, #12]
 8006dac:	f04f 30ff 	mov.w	r0, #4294967295
 8006db0:	e7e9      	b.n	8006d86 <__ssputs_r+0x8a>
	...

08006db4 <_svfiprintf_r>:
 8006db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db8:	4698      	mov	r8, r3
 8006dba:	898b      	ldrh	r3, [r1, #12]
 8006dbc:	061b      	lsls	r3, r3, #24
 8006dbe:	b09d      	sub	sp, #116	@ 0x74
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	d510      	bpl.n	8006dea <_svfiprintf_r+0x36>
 8006dc8:	690b      	ldr	r3, [r1, #16]
 8006dca:	b973      	cbnz	r3, 8006dea <_svfiprintf_r+0x36>
 8006dcc:	2140      	movs	r1, #64	@ 0x40
 8006dce:	f7ff ff09 	bl	8006be4 <_malloc_r>
 8006dd2:	6028      	str	r0, [r5, #0]
 8006dd4:	6128      	str	r0, [r5, #16]
 8006dd6:	b930      	cbnz	r0, 8006de6 <_svfiprintf_r+0x32>
 8006dd8:	230c      	movs	r3, #12
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8006de0:	b01d      	add	sp, #116	@ 0x74
 8006de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de6:	2340      	movs	r3, #64	@ 0x40
 8006de8:	616b      	str	r3, [r5, #20]
 8006dea:	2300      	movs	r3, #0
 8006dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dee:	2320      	movs	r3, #32
 8006df0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006df4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006df8:	2330      	movs	r3, #48	@ 0x30
 8006dfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f98 <_svfiprintf_r+0x1e4>
 8006dfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e02:	f04f 0901 	mov.w	r9, #1
 8006e06:	4623      	mov	r3, r4
 8006e08:	469a      	mov	sl, r3
 8006e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e0e:	b10a      	cbz	r2, 8006e14 <_svfiprintf_r+0x60>
 8006e10:	2a25      	cmp	r2, #37	@ 0x25
 8006e12:	d1f9      	bne.n	8006e08 <_svfiprintf_r+0x54>
 8006e14:	ebba 0b04 	subs.w	fp, sl, r4
 8006e18:	d00b      	beq.n	8006e32 <_svfiprintf_r+0x7e>
 8006e1a:	465b      	mov	r3, fp
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4638      	mov	r0, r7
 8006e22:	f7ff ff6b 	bl	8006cfc <__ssputs_r>
 8006e26:	3001      	adds	r0, #1
 8006e28:	f000 80a7 	beq.w	8006f7a <_svfiprintf_r+0x1c6>
 8006e2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e2e:	445a      	add	r2, fp
 8006e30:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e32:	f89a 3000 	ldrb.w	r3, [sl]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 809f 	beq.w	8006f7a <_svfiprintf_r+0x1c6>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e46:	f10a 0a01 	add.w	sl, sl, #1
 8006e4a:	9304      	str	r3, [sp, #16]
 8006e4c:	9307      	str	r3, [sp, #28]
 8006e4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e52:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e54:	4654      	mov	r4, sl
 8006e56:	2205      	movs	r2, #5
 8006e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e5c:	484e      	ldr	r0, [pc, #312]	@ (8006f98 <_svfiprintf_r+0x1e4>)
 8006e5e:	f7f9 f9cf 	bl	8000200 <memchr>
 8006e62:	9a04      	ldr	r2, [sp, #16]
 8006e64:	b9d8      	cbnz	r0, 8006e9e <_svfiprintf_r+0xea>
 8006e66:	06d0      	lsls	r0, r2, #27
 8006e68:	bf44      	itt	mi
 8006e6a:	2320      	movmi	r3, #32
 8006e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e70:	0711      	lsls	r1, r2, #28
 8006e72:	bf44      	itt	mi
 8006e74:	232b      	movmi	r3, #43	@ 0x2b
 8006e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e80:	d015      	beq.n	8006eae <_svfiprintf_r+0xfa>
 8006e82:	9a07      	ldr	r2, [sp, #28]
 8006e84:	4654      	mov	r4, sl
 8006e86:	2000      	movs	r0, #0
 8006e88:	f04f 0c0a 	mov.w	ip, #10
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e92:	3b30      	subs	r3, #48	@ 0x30
 8006e94:	2b09      	cmp	r3, #9
 8006e96:	d94b      	bls.n	8006f30 <_svfiprintf_r+0x17c>
 8006e98:	b1b0      	cbz	r0, 8006ec8 <_svfiprintf_r+0x114>
 8006e9a:	9207      	str	r2, [sp, #28]
 8006e9c:	e014      	b.n	8006ec8 <_svfiprintf_r+0x114>
 8006e9e:	eba0 0308 	sub.w	r3, r0, r8
 8006ea2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	9304      	str	r3, [sp, #16]
 8006eaa:	46a2      	mov	sl, r4
 8006eac:	e7d2      	b.n	8006e54 <_svfiprintf_r+0xa0>
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	1d19      	adds	r1, r3, #4
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	9103      	str	r1, [sp, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bfbb      	ittet	lt
 8006eba:	425b      	neglt	r3, r3
 8006ebc:	f042 0202 	orrlt.w	r2, r2, #2
 8006ec0:	9307      	strge	r3, [sp, #28]
 8006ec2:	9307      	strlt	r3, [sp, #28]
 8006ec4:	bfb8      	it	lt
 8006ec6:	9204      	strlt	r2, [sp, #16]
 8006ec8:	7823      	ldrb	r3, [r4, #0]
 8006eca:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ecc:	d10a      	bne.n	8006ee4 <_svfiprintf_r+0x130>
 8006ece:	7863      	ldrb	r3, [r4, #1]
 8006ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ed2:	d132      	bne.n	8006f3a <_svfiprintf_r+0x186>
 8006ed4:	9b03      	ldr	r3, [sp, #12]
 8006ed6:	1d1a      	adds	r2, r3, #4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	9203      	str	r2, [sp, #12]
 8006edc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ee0:	3402      	adds	r4, #2
 8006ee2:	9305      	str	r3, [sp, #20]
 8006ee4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006fa8 <_svfiprintf_r+0x1f4>
 8006ee8:	7821      	ldrb	r1, [r4, #0]
 8006eea:	2203      	movs	r2, #3
 8006eec:	4650      	mov	r0, sl
 8006eee:	f7f9 f987 	bl	8000200 <memchr>
 8006ef2:	b138      	cbz	r0, 8006f04 <_svfiprintf_r+0x150>
 8006ef4:	9b04      	ldr	r3, [sp, #16]
 8006ef6:	eba0 000a 	sub.w	r0, r0, sl
 8006efa:	2240      	movs	r2, #64	@ 0x40
 8006efc:	4082      	lsls	r2, r0
 8006efe:	4313      	orrs	r3, r2
 8006f00:	3401      	adds	r4, #1
 8006f02:	9304      	str	r3, [sp, #16]
 8006f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f08:	4824      	ldr	r0, [pc, #144]	@ (8006f9c <_svfiprintf_r+0x1e8>)
 8006f0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f0e:	2206      	movs	r2, #6
 8006f10:	f7f9 f976 	bl	8000200 <memchr>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d036      	beq.n	8006f86 <_svfiprintf_r+0x1d2>
 8006f18:	4b21      	ldr	r3, [pc, #132]	@ (8006fa0 <_svfiprintf_r+0x1ec>)
 8006f1a:	bb1b      	cbnz	r3, 8006f64 <_svfiprintf_r+0x1b0>
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	3307      	adds	r3, #7
 8006f20:	f023 0307 	bic.w	r3, r3, #7
 8006f24:	3308      	adds	r3, #8
 8006f26:	9303      	str	r3, [sp, #12]
 8006f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f2a:	4433      	add	r3, r6
 8006f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f2e:	e76a      	b.n	8006e06 <_svfiprintf_r+0x52>
 8006f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f34:	460c      	mov	r4, r1
 8006f36:	2001      	movs	r0, #1
 8006f38:	e7a8      	b.n	8006e8c <_svfiprintf_r+0xd8>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	3401      	adds	r4, #1
 8006f3e:	9305      	str	r3, [sp, #20]
 8006f40:	4619      	mov	r1, r3
 8006f42:	f04f 0c0a 	mov.w	ip, #10
 8006f46:	4620      	mov	r0, r4
 8006f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f4c:	3a30      	subs	r2, #48	@ 0x30
 8006f4e:	2a09      	cmp	r2, #9
 8006f50:	d903      	bls.n	8006f5a <_svfiprintf_r+0x1a6>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0c6      	beq.n	8006ee4 <_svfiprintf_r+0x130>
 8006f56:	9105      	str	r1, [sp, #20]
 8006f58:	e7c4      	b.n	8006ee4 <_svfiprintf_r+0x130>
 8006f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f5e:	4604      	mov	r4, r0
 8006f60:	2301      	movs	r3, #1
 8006f62:	e7f0      	b.n	8006f46 <_svfiprintf_r+0x192>
 8006f64:	ab03      	add	r3, sp, #12
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	462a      	mov	r2, r5
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa4 <_svfiprintf_r+0x1f0>)
 8006f6c:	a904      	add	r1, sp, #16
 8006f6e:	4638      	mov	r0, r7
 8006f70:	f3af 8000 	nop.w
 8006f74:	1c42      	adds	r2, r0, #1
 8006f76:	4606      	mov	r6, r0
 8006f78:	d1d6      	bne.n	8006f28 <_svfiprintf_r+0x174>
 8006f7a:	89ab      	ldrh	r3, [r5, #12]
 8006f7c:	065b      	lsls	r3, r3, #25
 8006f7e:	f53f af2d 	bmi.w	8006ddc <_svfiprintf_r+0x28>
 8006f82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f84:	e72c      	b.n	8006de0 <_svfiprintf_r+0x2c>
 8006f86:	ab03      	add	r3, sp, #12
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	462a      	mov	r2, r5
 8006f8c:	4b05      	ldr	r3, [pc, #20]	@ (8006fa4 <_svfiprintf_r+0x1f0>)
 8006f8e:	a904      	add	r1, sp, #16
 8006f90:	4638      	mov	r0, r7
 8006f92:	f000 f879 	bl	8007088 <_printf_i>
 8006f96:	e7ed      	b.n	8006f74 <_svfiprintf_r+0x1c0>
 8006f98:	080082e9 	.word	0x080082e9
 8006f9c:	080082f3 	.word	0x080082f3
 8006fa0:	00000000 	.word	0x00000000
 8006fa4:	08006cfd 	.word	0x08006cfd
 8006fa8:	080082ef 	.word	0x080082ef

08006fac <_printf_common>:
 8006fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	4698      	mov	r8, r3
 8006fb4:	688a      	ldr	r2, [r1, #8]
 8006fb6:	690b      	ldr	r3, [r1, #16]
 8006fb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	bfb8      	it	lt
 8006fc0:	4613      	movlt	r3, r2
 8006fc2:	6033      	str	r3, [r6, #0]
 8006fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fc8:	4607      	mov	r7, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	b10a      	cbz	r2, 8006fd2 <_printf_common+0x26>
 8006fce:	3301      	adds	r3, #1
 8006fd0:	6033      	str	r3, [r6, #0]
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	0699      	lsls	r1, r3, #26
 8006fd6:	bf42      	ittt	mi
 8006fd8:	6833      	ldrmi	r3, [r6, #0]
 8006fda:	3302      	addmi	r3, #2
 8006fdc:	6033      	strmi	r3, [r6, #0]
 8006fde:	6825      	ldr	r5, [r4, #0]
 8006fe0:	f015 0506 	ands.w	r5, r5, #6
 8006fe4:	d106      	bne.n	8006ff4 <_printf_common+0x48>
 8006fe6:	f104 0a19 	add.w	sl, r4, #25
 8006fea:	68e3      	ldr	r3, [r4, #12]
 8006fec:	6832      	ldr	r2, [r6, #0]
 8006fee:	1a9b      	subs	r3, r3, r2
 8006ff0:	42ab      	cmp	r3, r5
 8006ff2:	dc26      	bgt.n	8007042 <_printf_common+0x96>
 8006ff4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ff8:	6822      	ldr	r2, [r4, #0]
 8006ffa:	3b00      	subs	r3, #0
 8006ffc:	bf18      	it	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	0692      	lsls	r2, r2, #26
 8007002:	d42b      	bmi.n	800705c <_printf_common+0xb0>
 8007004:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007008:	4641      	mov	r1, r8
 800700a:	4638      	mov	r0, r7
 800700c:	47c8      	blx	r9
 800700e:	3001      	adds	r0, #1
 8007010:	d01e      	beq.n	8007050 <_printf_common+0xa4>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	6922      	ldr	r2, [r4, #16]
 8007016:	f003 0306 	and.w	r3, r3, #6
 800701a:	2b04      	cmp	r3, #4
 800701c:	bf02      	ittt	eq
 800701e:	68e5      	ldreq	r5, [r4, #12]
 8007020:	6833      	ldreq	r3, [r6, #0]
 8007022:	1aed      	subeq	r5, r5, r3
 8007024:	68a3      	ldr	r3, [r4, #8]
 8007026:	bf0c      	ite	eq
 8007028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800702c:	2500      	movne	r5, #0
 800702e:	4293      	cmp	r3, r2
 8007030:	bfc4      	itt	gt
 8007032:	1a9b      	subgt	r3, r3, r2
 8007034:	18ed      	addgt	r5, r5, r3
 8007036:	2600      	movs	r6, #0
 8007038:	341a      	adds	r4, #26
 800703a:	42b5      	cmp	r5, r6
 800703c:	d11a      	bne.n	8007074 <_printf_common+0xc8>
 800703e:	2000      	movs	r0, #0
 8007040:	e008      	b.n	8007054 <_printf_common+0xa8>
 8007042:	2301      	movs	r3, #1
 8007044:	4652      	mov	r2, sl
 8007046:	4641      	mov	r1, r8
 8007048:	4638      	mov	r0, r7
 800704a:	47c8      	blx	r9
 800704c:	3001      	adds	r0, #1
 800704e:	d103      	bne.n	8007058 <_printf_common+0xac>
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007058:	3501      	adds	r5, #1
 800705a:	e7c6      	b.n	8006fea <_printf_common+0x3e>
 800705c:	18e1      	adds	r1, r4, r3
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	2030      	movs	r0, #48	@ 0x30
 8007062:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007066:	4422      	add	r2, r4
 8007068:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800706c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007070:	3302      	adds	r3, #2
 8007072:	e7c7      	b.n	8007004 <_printf_common+0x58>
 8007074:	2301      	movs	r3, #1
 8007076:	4622      	mov	r2, r4
 8007078:	4641      	mov	r1, r8
 800707a:	4638      	mov	r0, r7
 800707c:	47c8      	blx	r9
 800707e:	3001      	adds	r0, #1
 8007080:	d0e6      	beq.n	8007050 <_printf_common+0xa4>
 8007082:	3601      	adds	r6, #1
 8007084:	e7d9      	b.n	800703a <_printf_common+0x8e>
	...

08007088 <_printf_i>:
 8007088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800708c:	7e0f      	ldrb	r7, [r1, #24]
 800708e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007090:	2f78      	cmp	r7, #120	@ 0x78
 8007092:	4691      	mov	r9, r2
 8007094:	4680      	mov	r8, r0
 8007096:	460c      	mov	r4, r1
 8007098:	469a      	mov	sl, r3
 800709a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800709e:	d807      	bhi.n	80070b0 <_printf_i+0x28>
 80070a0:	2f62      	cmp	r7, #98	@ 0x62
 80070a2:	d80a      	bhi.n	80070ba <_printf_i+0x32>
 80070a4:	2f00      	cmp	r7, #0
 80070a6:	f000 80d2 	beq.w	800724e <_printf_i+0x1c6>
 80070aa:	2f58      	cmp	r7, #88	@ 0x58
 80070ac:	f000 80b9 	beq.w	8007222 <_printf_i+0x19a>
 80070b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070b8:	e03a      	b.n	8007130 <_printf_i+0xa8>
 80070ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070be:	2b15      	cmp	r3, #21
 80070c0:	d8f6      	bhi.n	80070b0 <_printf_i+0x28>
 80070c2:	a101      	add	r1, pc, #4	@ (adr r1, 80070c8 <_printf_i+0x40>)
 80070c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070c8:	08007121 	.word	0x08007121
 80070cc:	08007135 	.word	0x08007135
 80070d0:	080070b1 	.word	0x080070b1
 80070d4:	080070b1 	.word	0x080070b1
 80070d8:	080070b1 	.word	0x080070b1
 80070dc:	080070b1 	.word	0x080070b1
 80070e0:	08007135 	.word	0x08007135
 80070e4:	080070b1 	.word	0x080070b1
 80070e8:	080070b1 	.word	0x080070b1
 80070ec:	080070b1 	.word	0x080070b1
 80070f0:	080070b1 	.word	0x080070b1
 80070f4:	08007235 	.word	0x08007235
 80070f8:	0800715f 	.word	0x0800715f
 80070fc:	080071ef 	.word	0x080071ef
 8007100:	080070b1 	.word	0x080070b1
 8007104:	080070b1 	.word	0x080070b1
 8007108:	08007257 	.word	0x08007257
 800710c:	080070b1 	.word	0x080070b1
 8007110:	0800715f 	.word	0x0800715f
 8007114:	080070b1 	.word	0x080070b1
 8007118:	080070b1 	.word	0x080070b1
 800711c:	080071f7 	.word	0x080071f7
 8007120:	6833      	ldr	r3, [r6, #0]
 8007122:	1d1a      	adds	r2, r3, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6032      	str	r2, [r6, #0]
 8007128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800712c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007130:	2301      	movs	r3, #1
 8007132:	e09d      	b.n	8007270 <_printf_i+0x1e8>
 8007134:	6833      	ldr	r3, [r6, #0]
 8007136:	6820      	ldr	r0, [r4, #0]
 8007138:	1d19      	adds	r1, r3, #4
 800713a:	6031      	str	r1, [r6, #0]
 800713c:	0606      	lsls	r6, r0, #24
 800713e:	d501      	bpl.n	8007144 <_printf_i+0xbc>
 8007140:	681d      	ldr	r5, [r3, #0]
 8007142:	e003      	b.n	800714c <_printf_i+0xc4>
 8007144:	0645      	lsls	r5, r0, #25
 8007146:	d5fb      	bpl.n	8007140 <_printf_i+0xb8>
 8007148:	f9b3 5000 	ldrsh.w	r5, [r3]
 800714c:	2d00      	cmp	r5, #0
 800714e:	da03      	bge.n	8007158 <_printf_i+0xd0>
 8007150:	232d      	movs	r3, #45	@ 0x2d
 8007152:	426d      	negs	r5, r5
 8007154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007158:	4859      	ldr	r0, [pc, #356]	@ (80072c0 <_printf_i+0x238>)
 800715a:	230a      	movs	r3, #10
 800715c:	e011      	b.n	8007182 <_printf_i+0xfa>
 800715e:	6821      	ldr	r1, [r4, #0]
 8007160:	6833      	ldr	r3, [r6, #0]
 8007162:	0608      	lsls	r0, r1, #24
 8007164:	f853 5b04 	ldr.w	r5, [r3], #4
 8007168:	d402      	bmi.n	8007170 <_printf_i+0xe8>
 800716a:	0649      	lsls	r1, r1, #25
 800716c:	bf48      	it	mi
 800716e:	b2ad      	uxthmi	r5, r5
 8007170:	2f6f      	cmp	r7, #111	@ 0x6f
 8007172:	4853      	ldr	r0, [pc, #332]	@ (80072c0 <_printf_i+0x238>)
 8007174:	6033      	str	r3, [r6, #0]
 8007176:	bf14      	ite	ne
 8007178:	230a      	movne	r3, #10
 800717a:	2308      	moveq	r3, #8
 800717c:	2100      	movs	r1, #0
 800717e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007182:	6866      	ldr	r6, [r4, #4]
 8007184:	60a6      	str	r6, [r4, #8]
 8007186:	2e00      	cmp	r6, #0
 8007188:	bfa2      	ittt	ge
 800718a:	6821      	ldrge	r1, [r4, #0]
 800718c:	f021 0104 	bicge.w	r1, r1, #4
 8007190:	6021      	strge	r1, [r4, #0]
 8007192:	b90d      	cbnz	r5, 8007198 <_printf_i+0x110>
 8007194:	2e00      	cmp	r6, #0
 8007196:	d04b      	beq.n	8007230 <_printf_i+0x1a8>
 8007198:	4616      	mov	r6, r2
 800719a:	fbb5 f1f3 	udiv	r1, r5, r3
 800719e:	fb03 5711 	mls	r7, r3, r1, r5
 80071a2:	5dc7      	ldrb	r7, [r0, r7]
 80071a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071a8:	462f      	mov	r7, r5
 80071aa:	42bb      	cmp	r3, r7
 80071ac:	460d      	mov	r5, r1
 80071ae:	d9f4      	bls.n	800719a <_printf_i+0x112>
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d10b      	bne.n	80071cc <_printf_i+0x144>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	07df      	lsls	r7, r3, #31
 80071b8:	d508      	bpl.n	80071cc <_printf_i+0x144>
 80071ba:	6923      	ldr	r3, [r4, #16]
 80071bc:	6861      	ldr	r1, [r4, #4]
 80071be:	4299      	cmp	r1, r3
 80071c0:	bfde      	ittt	le
 80071c2:	2330      	movle	r3, #48	@ 0x30
 80071c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071cc:	1b92      	subs	r2, r2, r6
 80071ce:	6122      	str	r2, [r4, #16]
 80071d0:	f8cd a000 	str.w	sl, [sp]
 80071d4:	464b      	mov	r3, r9
 80071d6:	aa03      	add	r2, sp, #12
 80071d8:	4621      	mov	r1, r4
 80071da:	4640      	mov	r0, r8
 80071dc:	f7ff fee6 	bl	8006fac <_printf_common>
 80071e0:	3001      	adds	r0, #1
 80071e2:	d14a      	bne.n	800727a <_printf_i+0x1f2>
 80071e4:	f04f 30ff 	mov.w	r0, #4294967295
 80071e8:	b004      	add	sp, #16
 80071ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	f043 0320 	orr.w	r3, r3, #32
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	4833      	ldr	r0, [pc, #204]	@ (80072c4 <_printf_i+0x23c>)
 80071f8:	2778      	movs	r7, #120	@ 0x78
 80071fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	6831      	ldr	r1, [r6, #0]
 8007202:	061f      	lsls	r7, r3, #24
 8007204:	f851 5b04 	ldr.w	r5, [r1], #4
 8007208:	d402      	bmi.n	8007210 <_printf_i+0x188>
 800720a:	065f      	lsls	r7, r3, #25
 800720c:	bf48      	it	mi
 800720e:	b2ad      	uxthmi	r5, r5
 8007210:	6031      	str	r1, [r6, #0]
 8007212:	07d9      	lsls	r1, r3, #31
 8007214:	bf44      	itt	mi
 8007216:	f043 0320 	orrmi.w	r3, r3, #32
 800721a:	6023      	strmi	r3, [r4, #0]
 800721c:	b11d      	cbz	r5, 8007226 <_printf_i+0x19e>
 800721e:	2310      	movs	r3, #16
 8007220:	e7ac      	b.n	800717c <_printf_i+0xf4>
 8007222:	4827      	ldr	r0, [pc, #156]	@ (80072c0 <_printf_i+0x238>)
 8007224:	e7e9      	b.n	80071fa <_printf_i+0x172>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	f023 0320 	bic.w	r3, r3, #32
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	e7f6      	b.n	800721e <_printf_i+0x196>
 8007230:	4616      	mov	r6, r2
 8007232:	e7bd      	b.n	80071b0 <_printf_i+0x128>
 8007234:	6833      	ldr	r3, [r6, #0]
 8007236:	6825      	ldr	r5, [r4, #0]
 8007238:	6961      	ldr	r1, [r4, #20]
 800723a:	1d18      	adds	r0, r3, #4
 800723c:	6030      	str	r0, [r6, #0]
 800723e:	062e      	lsls	r6, r5, #24
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	d501      	bpl.n	8007248 <_printf_i+0x1c0>
 8007244:	6019      	str	r1, [r3, #0]
 8007246:	e002      	b.n	800724e <_printf_i+0x1c6>
 8007248:	0668      	lsls	r0, r5, #25
 800724a:	d5fb      	bpl.n	8007244 <_printf_i+0x1bc>
 800724c:	8019      	strh	r1, [r3, #0]
 800724e:	2300      	movs	r3, #0
 8007250:	6123      	str	r3, [r4, #16]
 8007252:	4616      	mov	r6, r2
 8007254:	e7bc      	b.n	80071d0 <_printf_i+0x148>
 8007256:	6833      	ldr	r3, [r6, #0]
 8007258:	1d1a      	adds	r2, r3, #4
 800725a:	6032      	str	r2, [r6, #0]
 800725c:	681e      	ldr	r6, [r3, #0]
 800725e:	6862      	ldr	r2, [r4, #4]
 8007260:	2100      	movs	r1, #0
 8007262:	4630      	mov	r0, r6
 8007264:	f7f8 ffcc 	bl	8000200 <memchr>
 8007268:	b108      	cbz	r0, 800726e <_printf_i+0x1e6>
 800726a:	1b80      	subs	r0, r0, r6
 800726c:	6060      	str	r0, [r4, #4]
 800726e:	6863      	ldr	r3, [r4, #4]
 8007270:	6123      	str	r3, [r4, #16]
 8007272:	2300      	movs	r3, #0
 8007274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007278:	e7aa      	b.n	80071d0 <_printf_i+0x148>
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	4632      	mov	r2, r6
 800727e:	4649      	mov	r1, r9
 8007280:	4640      	mov	r0, r8
 8007282:	47d0      	blx	sl
 8007284:	3001      	adds	r0, #1
 8007286:	d0ad      	beq.n	80071e4 <_printf_i+0x15c>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	079b      	lsls	r3, r3, #30
 800728c:	d413      	bmi.n	80072b6 <_printf_i+0x22e>
 800728e:	68e0      	ldr	r0, [r4, #12]
 8007290:	9b03      	ldr	r3, [sp, #12]
 8007292:	4298      	cmp	r0, r3
 8007294:	bfb8      	it	lt
 8007296:	4618      	movlt	r0, r3
 8007298:	e7a6      	b.n	80071e8 <_printf_i+0x160>
 800729a:	2301      	movs	r3, #1
 800729c:	4632      	mov	r2, r6
 800729e:	4649      	mov	r1, r9
 80072a0:	4640      	mov	r0, r8
 80072a2:	47d0      	blx	sl
 80072a4:	3001      	adds	r0, #1
 80072a6:	d09d      	beq.n	80071e4 <_printf_i+0x15c>
 80072a8:	3501      	adds	r5, #1
 80072aa:	68e3      	ldr	r3, [r4, #12]
 80072ac:	9903      	ldr	r1, [sp, #12]
 80072ae:	1a5b      	subs	r3, r3, r1
 80072b0:	42ab      	cmp	r3, r5
 80072b2:	dcf2      	bgt.n	800729a <_printf_i+0x212>
 80072b4:	e7eb      	b.n	800728e <_printf_i+0x206>
 80072b6:	2500      	movs	r5, #0
 80072b8:	f104 0619 	add.w	r6, r4, #25
 80072bc:	e7f5      	b.n	80072aa <_printf_i+0x222>
 80072be:	bf00      	nop
 80072c0:	080082fa 	.word	0x080082fa
 80072c4:	0800830b 	.word	0x0800830b

080072c8 <memmove>:
 80072c8:	4288      	cmp	r0, r1
 80072ca:	b510      	push	{r4, lr}
 80072cc:	eb01 0402 	add.w	r4, r1, r2
 80072d0:	d902      	bls.n	80072d8 <memmove+0x10>
 80072d2:	4284      	cmp	r4, r0
 80072d4:	4623      	mov	r3, r4
 80072d6:	d807      	bhi.n	80072e8 <memmove+0x20>
 80072d8:	1e43      	subs	r3, r0, #1
 80072da:	42a1      	cmp	r1, r4
 80072dc:	d008      	beq.n	80072f0 <memmove+0x28>
 80072de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072e6:	e7f8      	b.n	80072da <memmove+0x12>
 80072e8:	4402      	add	r2, r0
 80072ea:	4601      	mov	r1, r0
 80072ec:	428a      	cmp	r2, r1
 80072ee:	d100      	bne.n	80072f2 <memmove+0x2a>
 80072f0:	bd10      	pop	{r4, pc}
 80072f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072fa:	e7f7      	b.n	80072ec <memmove+0x24>

080072fc <_sbrk_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4d06      	ldr	r5, [pc, #24]	@ (8007318 <_sbrk_r+0x1c>)
 8007300:	2300      	movs	r3, #0
 8007302:	4604      	mov	r4, r0
 8007304:	4608      	mov	r0, r1
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	f7fa ff76 	bl	80021f8 <_sbrk>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d102      	bne.n	8007316 <_sbrk_r+0x1a>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	b103      	cbz	r3, 8007316 <_sbrk_r+0x1a>
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	20000ed4 	.word	0x20000ed4

0800731c <memcpy>:
 800731c:	440a      	add	r2, r1
 800731e:	4291      	cmp	r1, r2
 8007320:	f100 33ff 	add.w	r3, r0, #4294967295
 8007324:	d100      	bne.n	8007328 <memcpy+0xc>
 8007326:	4770      	bx	lr
 8007328:	b510      	push	{r4, lr}
 800732a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800732e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007332:	4291      	cmp	r1, r2
 8007334:	d1f9      	bne.n	800732a <memcpy+0xe>
 8007336:	bd10      	pop	{r4, pc}

08007338 <_realloc_r>:
 8007338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800733c:	4680      	mov	r8, r0
 800733e:	4615      	mov	r5, r2
 8007340:	460c      	mov	r4, r1
 8007342:	b921      	cbnz	r1, 800734e <_realloc_r+0x16>
 8007344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	4611      	mov	r1, r2
 800734a:	f7ff bc4b 	b.w	8006be4 <_malloc_r>
 800734e:	b92a      	cbnz	r2, 800735c <_realloc_r+0x24>
 8007350:	f7ff fbdc 	bl	8006b0c <_free_r>
 8007354:	2400      	movs	r4, #0
 8007356:	4620      	mov	r0, r4
 8007358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800735c:	f000 f81a 	bl	8007394 <_malloc_usable_size_r>
 8007360:	4285      	cmp	r5, r0
 8007362:	4606      	mov	r6, r0
 8007364:	d802      	bhi.n	800736c <_realloc_r+0x34>
 8007366:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800736a:	d8f4      	bhi.n	8007356 <_realloc_r+0x1e>
 800736c:	4629      	mov	r1, r5
 800736e:	4640      	mov	r0, r8
 8007370:	f7ff fc38 	bl	8006be4 <_malloc_r>
 8007374:	4607      	mov	r7, r0
 8007376:	2800      	cmp	r0, #0
 8007378:	d0ec      	beq.n	8007354 <_realloc_r+0x1c>
 800737a:	42b5      	cmp	r5, r6
 800737c:	462a      	mov	r2, r5
 800737e:	4621      	mov	r1, r4
 8007380:	bf28      	it	cs
 8007382:	4632      	movcs	r2, r6
 8007384:	f7ff ffca 	bl	800731c <memcpy>
 8007388:	4621      	mov	r1, r4
 800738a:	4640      	mov	r0, r8
 800738c:	f7ff fbbe 	bl	8006b0c <_free_r>
 8007390:	463c      	mov	r4, r7
 8007392:	e7e0      	b.n	8007356 <_realloc_r+0x1e>

08007394 <_malloc_usable_size_r>:
 8007394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007398:	1f18      	subs	r0, r3, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	bfbc      	itt	lt
 800739e:	580b      	ldrlt	r3, [r1, r0]
 80073a0:	18c0      	addlt	r0, r0, r3
 80073a2:	4770      	bx	lr

080073a4 <_init>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr

080073b0 <_fini>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr
